<Type Name="DesignerSerializationManager" FullName="System.ComponentModel.Design.Serialization.DesignerSerializationManager">
  <TypeSignature Language="C#" Value="public class DesignerSerializationManager : IServiceProvider, System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerSerializationManager extends System.Object implements class System.ComponentModel.Design.Serialization.IDesignerSerializationManager, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerSerializationManager&#xA;Implements IDesignerSerializationManager, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerSerializationManager : IServiceProvider, System::ComponentModel::Design::Serialization::IDesignerSerializationManager" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.Serialization.IDesignerSerializationManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3ba5f-101"><see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 인터페이스의 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-101">Provides an implementation of the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-102"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 인터페이스는 serialization을 제어 하는 개체를 형식 독립적 인터페이스 하도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-102">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> interface is designed to be a format-independent interface to an object that controls serialization.</span></span> <span data-ttu-id="3ba5f-103">기본적으로 실제로 deserialization을 수행 하는 serializer를 컨텍스트 및 서비스 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-103">It essentially provides context and services to serializers, which actually perform the deserialization.</span></span> <span data-ttu-id="3ba5f-104"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 개체는 추적 하 여 deserialization 프로세스에 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-104"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> assists in the deserialization process by keeping track of objects.</span></span> <span data-ttu-id="3ba5f-105">기술적에서 것과 비슷합니다는 <xref:System.ComponentModel.Design.IDesignerHost> 인터페이스: 실제로 디자이너 사용자 인터페이스 (UI)을 제공 하 고 <xref:System.ComponentModel.Design.IDesignerHost> 으로 함께 작동 하는 연결을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-105">This is similar in technique to the <xref:System.ComponentModel.Design.IDesignerHost> interface: designers actually provide the user interface (UI), and <xref:System.ComponentModel.Design.IDesignerHost> provides the glue that allows different designers to work together.</span></span>  
  
 <span data-ttu-id="3ba5f-106"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 클래스는 <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-106">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class implements <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>.</span></span> <span data-ttu-id="3ba5f-107">런타임에 직렬 변환기와 같은 비슷한 deserialization 제네릭 형식을 제공 하도록 설계 되었습니다는 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-107">It is designed to provide a generic form of deserialization that is similar to run-time serializers like the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="3ba5f-108"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 세 가지 목표를 달성 하는 클래스:</span><span class="sxs-lookup"><span data-stu-id="3ba5f-108">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class achieves three goals:</span></span>  
  
-   <span data-ttu-id="3ba5f-109">다양 한 형식의 deserialize 하는 데 사용할 수 있는 간단 하 고 턴키 개체 이므로.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-109">It is a simple, turnkey object that can be used to deserialize a variety of formats.</span></span>  
  
-   <span data-ttu-id="3ba5f-110">제네릭 및 특정 형식에 국한 되지 않으므로 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-110">It is generic and not tied to any particular format.</span></span> <span data-ttu-id="3ba5f-111">CodeDOM 역직렬화 뿐만 아니라 태그 deserialization에 대 한 동일 하 게 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-111">It can be used equally for CodeDOM deserialization as well as markup deserialization.</span></span>  
  
-   <span data-ttu-id="3ba5f-112">확장 가능 하 고 복사/붙여넣기 및 실행 취소/다시 시나리오에서 사용 되는 다른 serialization 메서드를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-112">It is extensible and supports different serialization methods that are used in copy/paste and undo/redo scenarios.</span></span>  
  
 <span data-ttu-id="3ba5f-113">디자인 타임 serialization에 런타임에 개체 serialization에서 다음과 같은 차이점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-113">Design-time serialization has the following differences from run-time object serialization:</span></span>  
  
-   <span data-ttu-id="3ba5f-114">직렬화를 수행 하는 개체는 런타임 개체에서 일반적으로 별도 되므로 구성 요소에서 디자인 타임 논리를 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-114">The object performing the serialization is generally separate from the run-time object, so that design-time logic can be removed from a component.</span></span>  
  
-   <span data-ttu-id="3ba5f-115">Serialization 체계 완전히 초기화 된 개체를 만들 수는 가정 및 역직렬화 하는 동안 속성 및 메서드 호출을 통해 수정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-115">The serialization scheme assumes the object will be created fully initialized, and then modified through property and method invocations during deserialization.</span></span>  
  
-   <span data-ttu-id="3ba5f-116">(속성의 기본값을 포함 하는 데 사용) 하는 개체에 설정 되지 않은 값이 있는 개체의 속성을 serialize 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-116">Properties of an object that have values that were never set on the object (the properties contain the default values) are not serialized.</span></span> <span data-ttu-id="3ba5f-117">반대로, 역직렬화 스트림 구멍 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-117">Conversely, the deserialization stream may have holes.</span></span>  
  
-   <span data-ttu-id="3ba5f-118">개체의 전체 serialization 보다는 serialization 스트림에 내부에서 내용의 품질에 강조 사항이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-118">Emphasis is placed on the quality of the content within the serialization stream, rather than the full serialization of an object.</span></span> <span data-ttu-id="3ba5f-119">이 즉, 정의 된 개체를 직렬화 할 수 없지만 이면 해당 개체는 건너뛸 수 있습니다는 대신 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-119">This means that if there is no defined way to serialize an object, that object may be skipped rather than throwing an exception.</span></span> <span data-ttu-id="3ba5f-120">Serialization 엔진은 여기는 오류를 무시할 수를 결정 하 고는 복구할 수 없는 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-120">The serialization engine may provide heuristics here to decide which failures can be ignored and which are unrecoverable.</span></span>  
  
-   <span data-ttu-id="3ba5f-121">Serialization 스트림에 deserialization을 위해 필요한 것 보다 더 많은 데이터가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-121">The serialization stream may have more data than is needed for deserialization.</span></span> <span data-ttu-id="3ba5f-122">소스 코드 직렬화는 예를 들어, 개체 그래프를 deserialize 하는 데 필요한 코드를 혼합 하는 사용자 코드를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-122">Source code serialization, for example, has user code mixed in with the code needed to deserialize an object graph.</span></span> <span data-ttu-id="3ba5f-123">이 사용자 코드 deserialization 중에 무시 하 고 serialization 중에 유지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-123">This user code must be ignored on deserialization and preserved on serialization.</span></span>  
  
 <span data-ttu-id="3ba5f-124">이러한 차이 때문에 다른 serialization 모델을 디자인 타임 serialization에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-124">Because of these differences, a different serialization model applies to design-time serialization.</span></span> <span data-ttu-id="3ba5f-125">이 모델에서 serialize 되 고 각 데이터 형식에 대 한 별도 serializer가 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-125">This model utilizes a separate serializer object for each data type being serialized.</span></span> <span data-ttu-id="3ba5f-126">각 serializer에 전체적으로 작은 기여 하는 문제를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-126">Each serializer provides its small contribution to the problem as a whole.</span></span> <span data-ttu-id="3ba5f-127">이러한 serializer는 모두 공통 serialization 관리자를 통해 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-127">These serializers are all coordinated through a common serialization manager.</span></span> <span data-ttu-id="3ba5f-128">Serialization 관리자는 이러한 다른 serializer 간의 상태를 유지 관리 담당 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-128">The serialization manager is responsible for maintaining state between these different serializers.</span></span> <span data-ttu-id="3ba5f-129">예를 들어, 다음 클래스를 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-129">As an example, consider the following class:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/Program.cs#2)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/Program.vb#2)]  
  
 <span data-ttu-id="3ba5f-130">이 클래스의 인스턴스는 세 가지 다른 직렬 변환기를 이용 합니다:에 대 한 `SampleObject`, 문자열 및 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-130">An instance of this class would utilize three different serializers: one for `SampleObject`, one for strings, and another for integers.</span></span> <span data-ttu-id="3ba5f-131">에 대 한 serializer `SampleObject` 때문에 루트 serializer 라고 `SampleObject` serialization 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-131">The serializer for `SampleObject` is called the root serializer because `SampleObject` is the root of the serialization graph.</span></span> <span data-ttu-id="3ba5f-132">더 복잡 한 개체 그래프도 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-132">More complex object graphs can be created as well.</span></span> <span data-ttu-id="3ba5f-133">예를 들어 어떻게 될 지를 고려 하는 경우 `SampleObject` 가 다음과 같이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-133">For example, consider what would happen if `SampleObject` were changed as follows:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/SampleObject.cs#11)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/SampleObject.vb#11)]  
  
 <span data-ttu-id="3ba5f-134">이 통해 `SampleObject` 자체의 다른 인스턴스임을 자식을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-134">This allows `SampleObject` to have a child that is another instance of itself.</span></span> <span data-ttu-id="3ba5f-135">다음 코드는 개체 그래프에 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-135">The following code fills in the object graph:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/SampleObject.cs#12)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/SampleObject.vb#12)]  
  
 <span data-ttu-id="3ba5f-136">때 `root` serialize 되는 4 개 직렬 변환기 사용 됩니다: 하나의 루트 serializer, 자식에 대 한 하나의 serializer `SampleObject`에 대 한 하나의 serializer `int`, 및에 대 한 하나의 serializer `string`합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-136">When `root` is serialized, there will be four serializers used: one root serializer, one serializer for the child `SampleObject`, one serializer for `int`, and one serializer for `string`.</span></span> <span data-ttu-id="3ba5f-137">Serializer의 각 인스턴스에 대해 serializer를 만들 필요가 없습니다 이므로, 형식에 따라 캐시 `SampleObject`합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-137">Serializers are cached based on type, so there is no need to create a serializer for each instance of `SampleObject`.</span></span>  
  
 <span data-ttu-id="3ba5f-138"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> serialization 세션의 아이디어를 기반으로 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-138">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class is based on the idea of a serialization session.</span></span> <span data-ttu-id="3ba5f-139">세션을 다양 한 serializer에서 액세스할 수 있는 상태를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-139">A session maintains state that can be accessed by the various serializers.</span></span> <span data-ttu-id="3ba5f-140">세션이 삭제 될 때이 상태가 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-140">When a session is disposed, this state is destroyed.</span></span> <span data-ttu-id="3ba5f-141">Serializer 대부분 상태 비저장 유지 하 고 있는 serializer를 정리 하는 데 도움이 손상 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-141">This helps to ensure that serializers remain largely stateless, and helps to clean up serializers that are have been corrupted.</span></span> <span data-ttu-id="3ba5f-142">다음 표에서 세션 간에 그리고에서 상태 관리 되는 방식을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-142">The following tables describe how state is managed in and among sessions.</span></span>  
  
## <a name="global-state"></a><span data-ttu-id="3ba5f-143">전역 상태</span><span class="sxs-lookup"><span data-stu-id="3ba5f-143">Global State</span></span>  
 <span data-ttu-id="3ba5f-144">이 상태가 serialization 관리자 개체가 소유 하지만 현재 serialization 세션 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-144">This state is owned by the serialization manager object, but is independent of the current serialization session.</span></span>  
  
|<span data-ttu-id="3ba5f-145">Object</span><span class="sxs-lookup"><span data-stu-id="3ba5f-145">Object</span></span>|<span data-ttu-id="3ba5f-146">용도</span><span class="sxs-lookup"><span data-stu-id="3ba5f-146">Usage</span></span>|  
|------------|-----------|  
|<span data-ttu-id="3ba5f-147">Serialization 공급자</span><span class="sxs-lookup"><span data-stu-id="3ba5f-147">Serialization providers</span></span>|<span data-ttu-id="3ba5f-148">개체 수는 사용자 지정 serialization 공급자 자체를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-148">Objects can add themselves as custom serialization providers.</span></span> <span data-ttu-id="3ba5f-149">이러한 공급자는 serializer를 찾는 데 사용 되, 때문에 이러한 보다 수명이 깁니다 serialization 세션이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-149">Because these providers are used to locate serializers, they outlive a serialization session.</span></span>|  
  
## <a name="session-owned-state"></a><span data-ttu-id="3ba5f-150">세션 소유 상태</span><span class="sxs-lookup"><span data-stu-id="3ba5f-150">Session-Owned State</span></span>  
 <span data-ttu-id="3ba5f-151">이 상태가 세션에서 소유 하 고 세션 소멸 될 때 소멸 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-151">This state is owned by a session and is destroyed when a session is destroyed.</span></span> <span data-ttu-id="3ba5f-152">따라서 모든 속성이 나 메서드는이 상태를 처리 하는 액세스 serialization 관리자에 활성 세션이 없는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-152">Consequently, accessing any properties or methods that would manipulate this state will throw an exception if the serialization manager is not in an active session.</span></span>  
  
|<span data-ttu-id="3ba5f-153">개체</span><span class="sxs-lookup"><span data-stu-id="3ba5f-153">Object</span></span>|<span data-ttu-id="3ba5f-154">사용법</span><span class="sxs-lookup"><span data-stu-id="3ba5f-154">Usage</span></span>|  
|------------|-----------|  
|<span data-ttu-id="3ba5f-155"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> 이벤트</span><span class="sxs-lookup"><span data-stu-id="3ba5f-155"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event</span></span>|<span data-ttu-id="3ba5f-156"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> 이름의 추가 확인을 제공 하는 serializer에서 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-156">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event is attached by a serializer to provide additional resolution of names.</span></span> <span data-ttu-id="3ba5f-157">모든 처리기는 세션을 종료 하는 경우이 이벤트에서 분리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-157">All handlers are detached from this event when a session terminates.</span></span>|  
|<span data-ttu-id="3ba5f-158"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> 이벤트</span><span class="sxs-lookup"><span data-stu-id="3ba5f-158"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event</span></span>|<span data-ttu-id="3ba5f-159"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> 이벤트 세션 삭제 되기 바로 전에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-159">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event is raised just before a session is disposed.</span></span> <span data-ttu-id="3ba5f-160">그런 다음 모든 처리기는이 이벤트에서 분리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-160">Then, all handlers are detached from this event.</span></span>|  
|<span data-ttu-id="3ba5f-161">이름 테이블</span><span class="sxs-lookup"><span data-stu-id="3ba5f-161">Name table</span></span>|<span data-ttu-id="3ba5f-162">Serialization 관리자 개체와 해당 이름 간의 매핑하는 테이블을 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-162">The serialization manager maintains a table that maps between objects and their names.</span></span> <span data-ttu-id="3ba5f-163">Serializer를 쉽게 식별에 대 한 개체 이름을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-163">Serializers may give objects names for easy identification.</span></span> <span data-ttu-id="3ba5f-164">세션이 종료 될 때이 이름을 테이블이 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-164">This name table is cleared when the session terminates.</span></span>|  
|<span data-ttu-id="3ba5f-165">직렬 변환기 캐시</span><span class="sxs-lookup"><span data-stu-id="3ba5f-165">Serializer cache</span></span>|<span data-ttu-id="3ba5f-166">Serialization 관리자 serializer를 제공 하 라는 표시 된 캐시를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-166">The serialization manager maintains a cache of serializers it has been asked to supply.</span></span> <span data-ttu-id="3ba5f-167">이 캐시는 세션이 종료 될 때 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-167">This cache is cleared when the session terminates.</span></span> <span data-ttu-id="3ba5f-168">공용 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> 언제 든 지 안전 하 게 메서드를 호출할 수 있지만 세션 내에서 호출 하는 경우에 값이 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-168">The public <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> method can safely be called at any time, but its value is cached only if it is called from within a session.</span></span>|  
|<span data-ttu-id="3ba5f-169">컨텍스트 스택</span><span class="sxs-lookup"><span data-stu-id="3ba5f-169">Context stack</span></span>|<span data-ttu-id="3ba5f-170">Serialization 관리자를 사용 하 여 액세스할 수 있는 컨텍스트 스택에 라는 개체가 유지 관리는 <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-170">The serialization manager maintains an object called the context stack, which you can access with the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A> property.</span></span> <span data-ttu-id="3ba5f-171">Serializer이이 스택을 사용 하 여 다른 serializer에 사용할 수 있는 추가 정보를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-171">Serializers can use this stack to store additional information that is available to other serializers.</span></span> <span data-ttu-id="3ba5f-172">예를 들어, 속성 값을 직렬화 하는 serializer 직렬화 할 값을 요청 하기 전에 직렬화 스택에 속성 이름을 푸시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-172">For example, a serializer that is serializing a property value can push the property name on the serialization stack before asking the value to serialize.</span></span> <span data-ttu-id="3ba5f-173">이 스택 세션이 종료 될 때 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-173">This stack is cleared when the session is terminated.</span></span>|  
|<span data-ttu-id="3ba5f-174">오류 목록</span><span class="sxs-lookup"><span data-stu-id="3ba5f-174">Error list</span></span>|<span data-ttu-id="3ba5f-175">Serialization 관리자에는 serialization 중에 발생 한 오류의 목록을 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-175">The serialization manager maintains a list of errors that occurred during serialization.</span></span> <span data-ttu-id="3ba5f-176">이 목록을 통해 액세스할 수 있는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> 세션이 종료 될 때 속성의 선택을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-176">This list, which is accessed through the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> property, is cleared when the session is terminated.</span></span> <span data-ttu-id="3ba5f-177">에 액세스 하는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> 세션 속성을 사용 하면 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-177">Accessing the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> property between sessions will result in an exception.</span></span>|  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.ContextStack" />
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3ba5f-178"><see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-178">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerSerializationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerSerializationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3ba5f-179"><see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-179">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-180">이 생성자는 설정의 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> 및 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-180">This constructor sets the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> properties to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerSerializationManager (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerSerializationManager(IServiceProvider ^ provider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="3ba5f-181"><see cref="T:System.IServiceProvider" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-181">An <see cref="T:System.IServiceProvider" />.</span></span></param>
        <summary><span data-ttu-id="3ba5f-182">지정된 서비스 공급자를 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-182">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class with the given service provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-183">기본 구현은 해당 요청을 전달 serializer를 serialization 관리자에 의해 충족 될 수 없는 서비스를 요청 하는 경우는 `provider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-183">If a serializer requests services that cannot be satisfied by the serialization manager, the default implementation will forward those requests to the `provider` parameter.</span></span>  
  
 <span data-ttu-id="3ba5f-184">이 생성자는 설정의 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> 및 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-184">This constructor sets the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> properties to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3ba5f-185"><paramref name="provider" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-185"><paramref name="provider" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container" />
      <MemberSignature Language="VB.NET" Value="Public Property Container As IContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IContainer ^ Container { System::ComponentModel::IContainer ^ get(); void set(System::ComponentModel::IContainer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-186">이 serialization 관리자에 대한 컨테이너를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-186">Gets or sets to the container for this serialization manager.</span></span></summary>
        <value><span data-ttu-id="3ba5f-187">serialization 관리자가 구성 요소를 추가할 <see cref="T:System.ComponentModel.IContainer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-187">The <see cref="T:System.ComponentModel.IContainer" /> to which the serialization manager will add components.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-188">컨테이너가 존재 하는 경우 serialization 관리자에 의해 만들어진 모든 구성 요소를 컨테이너에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-188">If a container exists, all components that are created by the serialization manager will be added to the container.</span></span> <span data-ttu-id="3ba5f-189">이 속성의 기본 구현에 대 한 서비스 공급자가 검색 된 <xref:System.ComponentModel.Design.IDesignerHost> 디자이너 호스트에서 제공 하는 컨테이너를 사용 하 고, 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-189">The default implementation of this property will search the service provider for an <xref:System.ComponentModel.Design.IDesignerHost> and use the container provided by the designer host, should one exist.</span></span> <span data-ttu-id="3ba5f-190">그렇지 않으면이 속성은 반환 `null` 구성 컨테이너에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-190">Otherwise, this property will return `null` and no components will be added to a container.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-191">serialization 관리자에 활성 serialization 세션이 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-191">The serialization manager has an active serialization session.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateInstance(class System.Type type, class System.Collections.ICollection arguments, string name, bool addToContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ CreateInstance(Type ^ type, System::Collections::ICollection ^ arguments, System::String ^ name, bool addToContainer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="addToContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3ba5f-192">인스턴스를 만들 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-192">The type to create an instance of.</span></span></param>
        <param name="arguments"><span data-ttu-id="3ba5f-193">형식 생성자의 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-193">The parameters of the type’s constructor.</span></span> <span data-ttu-id="3ba5f-194">기본 생성자를 호출하려면 <see langword="null" />이거나 빈 컬렉션이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-194">This can be <see langword="null" /> or an empty collection to invoke the default constructor.</span></span></param>
        <param name="name"><span data-ttu-id="3ba5f-195">개체에 지정할 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-195">A name to give the object.</span></span> <span data-ttu-id="3ba5f-196"><see langword="null" />이면, 개체가 컨테이너에 추가되고 이 컨테이너가 개체에 이름을 제공하지 않을 경우 개체에 이름이 지정되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-196">If <see langword="null" />, the object will not be given a name, unless the object is added to a container and the container gives the object a name.</span></span></param>
        <param name="addToContainer">
          <span data-ttu-id="3ba5f-197">개체가 <see cref="T:System.ComponentModel.IComponent" />를 구현할 경우 컨테이너에 개체를 추가하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-197"><see langword="true" /> to add the object to the container if the object implements <see cref="T:System.ComponentModel.IComponent" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3ba5f-198">형식의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-198">Creates an instance of a type.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-199"><paramref name="type" />에 의해 지정된 형식의 새 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-199">A new instance of the type specified by <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-200">이 메서드는 형식의 인스턴스를 만들 하려고 할 때 serializer에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-200">This method is called by serializers when they attempt to create an instance of a type.</span></span> <span data-ttu-id="3ba5f-201">기본 구현은 형식의 새 인스턴스를 만들거나의 값에 따라 기존 인스턴스를 반환할 수 있습니다는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> 및 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-201">The default implementation creates a new instance of the type, or it may return an existing instance depending on the values of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> properties.</span></span> <span data-ttu-id="3ba5f-202"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A> 리플렉션을 사용 하 여 인스턴스를 만드는 방법과 몇 가지 일반적인을 수행 합니다 <xref:System.IConvertible> 변환을 매개 변수에 일치 하는 생성자를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-202">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A> method uses reflection to create instances and will perform some generic <xref:System.IConvertible> transformations on parameters to find a matching constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="3ba5f-203"><paramref name="type" />에 포함된 매개 변수를 가져오는 생성자가 <paramref name="arguments" />에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-203"><paramref name="type" /> does not have a constructor that takes parameters contained in <paramref name="arguments" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="CreateSession">
      <MemberSignature Language="C#" Value="public IDisposable CreateSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable CreateSession() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSession () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ CreateSession();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3ba5f-204">새 serialization 세션을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-204">Creates a new serialization session.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-205">새 serialization 세션을 나타내는 <see cref="T:System.IDisposable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-205">An <see cref="T:System.IDisposable" /> that represents a new serialization session.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-206">Serialization 관리자 내에서 대부분의 데이터는 일시적 이며만 직렬화 세션의 수명 기간 동안 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-206">Most data within the serialization manager is transient and only lives for the life of a serialization session.</span></span> <span data-ttu-id="3ba5f-207">세션이 삭제 될 때 serialization 완료 것으로 간주 하 고이 임시 상태가 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-207">When a session is disposed, serialization is considered to be complete and this transient state is cleared.</span></span> <span data-ttu-id="3ba5f-208">따라서 여러 개체 트리를 serialize 하는 데 사용할 serialization 관리자의 단일 인스턴스 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-208">This allows a single instance of a serialization manager to be used to serialize multiple object trees.</span></span> <span data-ttu-id="3ba5f-209">서비스 공급자 및 serialization 관리자에 추가 된 모든 사용자 지정 serialization 공급자를 비롯 하 여 일부 상태 이면 세션에 걸쳐 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-209">Some state, including the service provider and any custom serialization providers that were added to the serialization manager, span sessions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-210">serialization 관리자가 이미 세션에 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-210">The serialization manager is already within a session.</span></span> <span data-ttu-id="3ba5f-211"><see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />의 이 버전은 동시 세션을 지원하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-211">This version of <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> does not support simultaneous sessions.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.IList Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Errors" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Errors { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-212">serialization 또는 deserialization 도중 발생한 오류의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-212">Gets the list of errors that occurred during serialization or deserialization.</span></span></summary>
        <value><span data-ttu-id="3ba5f-213">serialization 또는 deserialization 도중 발생한 오류의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-213">The list of errors that occurred during serialization or deserialization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-214">오류 목록 serialization 세션이 활성 상태인 동안에 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-214">You can only read the error list while a serialization session is active.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-215">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-215">This property was accessed outside of a serialization session.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public Type GetRuntimeType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetRuntimeType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetRuntimeType(System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3ba5f-216">가져올 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-216">The name of the type to get.</span></span></param>
        <summary><span data-ttu-id="3ba5f-217">지정된 형식 이름에 해당하는 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-217">Gets the type corresponding to the specified type name.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-218">지정된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-218">The specified type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializer">
      <MemberSignature Language="C#" Value="public object GetSerializer (Type objectType, Type serializerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSerializer(class System.Type objectType, class System.Type serializerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSerializer (objectType As Type, serializerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSerializer(Type ^ objectType, Type ^ serializerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="serializerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="3ba5f-219">serializer를 검색할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-219">The type of object for which to retrieve the serializer.</span></span></param>
        <param name="serializerType"><span data-ttu-id="3ba5f-220">검색할 serializer의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-220">The type of serializer to retrieve.</span></span></param>
        <summary><span data-ttu-id="3ba5f-221">지정된 개체 형식에 대한 serializer를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-221">Gets the serializer for the given object type.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-222"><paramref name="objectType" />에 대한 serializer이거나, 해당 serializer가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-222">The serializer for <paramref name="objectType" />, or <see langword="null" />, if not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-223">원하는 serializer의 형식을 요청할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-223">You can request the type of serializer you would like.</span></span> <span data-ttu-id="3ba5f-224">이 메서드가 반환 `null` 지정된 된 개체 형식에 대 한 요청 된 형식의 serializer가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-224">This method returns `null` if there is no serializer of the requested type for the specified object type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3ba5f-225"><paramref name="objectType" /> 또는 <paramref name="serializerType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-225"><paramref name="objectType" /> or <paramref name="serializerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected virtual object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="3ba5f-226">검색할 서비스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-226">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="3ba5f-227">요청한 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-227">Gets the requested service.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-228">요청된 서비스이거나, 해당 서비스를 확인할 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-228">The requested service, or <see langword="null" /> if the service cannot be resolved.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-229"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService%2A> 메서드는 기본 컨테이너 또는 생성자에서 설정 된 서비스 공급자에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-229">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService%2A> method provides access to the underlying container or service provider that was set in the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="protected virtual Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ GetType(System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3ba5f-230">검색할 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-230">The name of the type to retrieve.</span></span></param>
        <summary><span data-ttu-id="3ba5f-231">요청된 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-231">Gets the requested type.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-232">요청된 형식이거나, 해당 형식을 확인할 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-232">The requested type, or <see langword="null" /> if the type cannot be resolved.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-233"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> 메서드는 검색에 대 한 서비스 공급자는 <xref:System.ComponentModel.Design.ITypeResolutionService> 사용 가능한 경우 것을 위임 하는 해당 서비스에는 형식을 확인 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-233">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> method will search the service provider for an <xref:System.ComponentModel.Design.ITypeResolutionService> and, if available, it will delegate to that service to resolve the type.</span></span> <span data-ttu-id="3ba5f-234">경우는 <xref:System.ComponentModel.Design.ITypeResolutionService> 를 사용할 수 없으면 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> 호출 됩니다는 <xref:System.Object.GetType%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-234">If an <xref:System.ComponentModel.Design.ITypeResolutionService> is not available, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> will call the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveName">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveName (System.ComponentModel.Design.Serialization.ResolveNameEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveName(class System.ComponentModel.Design.Serialization.ResolveNameEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveName (e As ResolveNameEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveName(System::ComponentModel::Design::Serialization::ResolveNameEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="3ba5f-235">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-235">A <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="3ba5f-236"><see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-236">Raises the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-237">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-237">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="3ba5f-238">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-238">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="3ba5f-239">또한 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-239">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="3ba5f-240">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-240">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3ba5f-241">재정의 하는 경우 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-241">When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> method so that registered delegates receive the event.</span></span></para>
        </block>
        <altmember cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="3ba5f-242">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-242">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="3ba5f-243"><see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-243">Raises the <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-244">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-244">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="3ba5f-245">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-245">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="3ba5f-246">또한 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-246">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="3ba5f-247">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-247">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3ba5f-248">재정의 하는 경우 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-248">When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionDisposed">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionDisposed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionDisposed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionDisposed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionDisposed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="3ba5f-249">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-249">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="3ba5f-250"><see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-250">Raises the <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-251">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-251">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="3ba5f-252">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-252">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="3ba5f-253">또한 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-253">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="3ba5f-254">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-254">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3ba5f-255">재정의 하는 경우 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-255">When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PreserveNames">
      <MemberSignature Language="C#" Value="public bool PreserveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveNames" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property PreserveNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreserveNames { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-256"><see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 메서드가 컨테이너에 특정 이름이 존재하는지 확인할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-256">Gets or sets a value indicating whether the <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method should check for the presence of the given name in the container.</span></span></summary>
        <value>
          <span data-ttu-id="3ba5f-257"><see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 특정 구성 요소 이름을 전달하면 <see langword="true" />이고, <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 컨테이너에 특정 이름이 존재하는지 확인하면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-257"><see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will pass the given component name; <see langword="false" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will check for the presence of the given name in the container.</span></span> <span data-ttu-id="3ba5f-258">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-258">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-259"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> 의 동작을 결정 하는 속성은 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-259">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> property determines the behavior of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method.</span></span> <span data-ttu-id="3ba5f-260">경우 `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 특정된 구성 요소 이름을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-260">If `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will pass the given component name.</span></span> <span data-ttu-id="3ba5f-261">경우 `false`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 컨테이너에 특정 이름이 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-261">If `false`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will check for the presence of the given name in the container.</span></span> <span data-ttu-id="3ba5f-262">컨테이너에이 이름이 존재 하지 않는 경우 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 지정한 이름을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-262">If the name does not exist in the container, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will use the given name.</span></span> <span data-ttu-id="3ba5f-263">컨테이너에 이름이 없는 경우 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 새 이름을 제공 하는 컨테이너에 추가할 때 구성 요소 이름으로 null 값을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-263">If the name does exist in the container, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will pass a null value as the name of a component when adding it to the container, thereby giving it a new name.</span></span> <span data-ttu-id="3ba5f-264">이 두 번째 변형 해당 개체가 존재 하지 않는 것으로 가정 하는 것이 아니라 항상 개체를 복제 하는 serializer를 구현 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-264">This second variation is useful for implementing a serializer that always duplicates objects, rather than assuming those objects do not exist.</span></span> <span data-ttu-id="3ba5f-265">붙여넣기 명령을 종종 이러한 유형의 serializer 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-265">Paste commands often use this type of serializer.</span></span>  
  
 <span data-ttu-id="3ba5f-266">Serialization 세션에 있지 않은 경우에이 속성을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-266">You can only change this property when you are not in a serialization session.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-267">이 속성이 serialization 세션 내에서 변경된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-267">This property was changed from within a serialization session.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PropertyProvider">
      <MemberSignature Language="C#" Value="public object PropertyProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PropertyProvider" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyProvider As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PropertyProvider { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-268">serialization 관리자의 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 속성에 속성을 제공하는 데 사용할 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-268">Gets the object that should be used to provide properties to the serialization manager's <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span></span></summary>
        <value><span data-ttu-id="3ba5f-269">serialization 관리자의 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 속성에 속성을 제공하는 데 사용할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-269">The object that should be used to provide properties to the serialization manager's <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-270"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider%2A> 속성은 serialization 관리자 직렬 변환기의 동작을 안내 하는 데 사용할 수 있는 직렬화 속성 집합을 제공 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-270">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider%2A> property provides a way to give the serialization manager a set of serialization properties that serializers can use to guide their behavior.</span></span>  
  
 <span data-ttu-id="3ba5f-271">이 개체의 공용 속성 검사 되며 serialization 관리자의 대상 개체를 포함 하는 새 속성 설명자에 래핑됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-271">This object's public properties will be inspected and wrapped in new property descriptors that have a target object of the serialization manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecycleInstances">
      <MemberSignature Language="C#" Value="public bool RecycleInstances { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecycleInstances" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      <MemberSignature Language="VB.NET" Value="Public Property RecycleInstances As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecycleInstances { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-272"><see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 항상 형식의 새 인스턴스를 만들지 여부를 나타내는 플래그를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-272">Gets or sets a flag indicating whether <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will always create a new instance of a type.</span></span></summary>
        <value>
          <span data-ttu-id="3ba5f-273"><see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 기존 인스턴스를 반환하면 <see langword="true" />이고, <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 형식의 새 인스턴스를 만들면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-273"><see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will return the existing instance; <see langword="false" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will create a new instance of a type.</span></span> <span data-ttu-id="3ba5f-274">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-274">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-275">경우는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> 속성은 `false`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 메서드 항상 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-275">If the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `false`, the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method will always create a new instance of a type.</span></span> <span data-ttu-id="3ba5f-276">경우 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> 은 `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 이름 테이블 및 동일한 이름 가진 개체에 대 한 컨테이너를 먼저 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-276">If <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> is `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will first search the name table and container for an object of the same name.</span></span> <span data-ttu-id="3ba5f-277">이러한 개체가 존재 하 고 동일한 유형의 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 기존 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-277">If such an object exists and is of the same type, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will return the existing instance.</span></span> <span data-ttu-id="3ba5f-278">이 두 번째 변형 항상 새 트리를 만드는 대신 기존 집합의 개체를 직렬화 상태를 적용 하는 serializer 구현 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-278">This second variation is useful for implementing a serializer that applies serialization state to an existing set of objects, rather than always creating a new tree.</span></span> <span data-ttu-id="3ba5f-279">**실행 취소** 명령은 자주 사용 하 여 이러한 유형의 serializer입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-279">The **Undo** command often uses this type of serializer.</span></span>  
  
 <span data-ttu-id="3ba5f-280">경우에서에 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> 속성은 `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 속성의 동작을 수정 추가 됩니다 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 두 개체의 형식에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-280">In the case where the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `true`, the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> property will further modify the behavior of <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> depending on the types of the two objects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-281">serialization 관리자에 활성 serialization 세션이 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-281">The serialization manager has an active serialization session.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="SessionCreated">
      <MemberSignature Language="C#" Value="public event EventHandler SessionCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SessionCreated" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SessionCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-282">세션이 만들어질 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-282">Occurs when a session is created.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDisposed">
      <MemberSignature Language="C#" Value="public event EventHandler SessionDisposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SessionDisposed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionDisposed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SessionDisposed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-283">세션이 삭제될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-283">Occurs when a session is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(class System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub AddSerializationProvider (provider As IDesignerSerializationProvider) Implements IDesignerSerializationManager.AddSerializationProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System::ComponentModel::Design::Serialization::IDesignerSerializationProvider ^ provider) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::AddSerializationProvider;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="3ba5f-284">추가할 serialization 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-284">The serialization provider to add.</span></span></param>
        <summary><span data-ttu-id="3ba5f-285">사용자 지정 serialization 공급자를 serialization 관리자에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-285">Adds a custom serialization provider to the serialization manager.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-286">경우는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> , serialization 관리자는 먼저 전에 찾고 형식의 메타 데이터에 적절 한 serializer에 대 한 사용자 지정 serialization 공급자를 쿼리 결과로 메서드는 serialization 공급자를 요청 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-286">When the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> method is used to request a serialization provider, the serialization manager queries the custom serialization providers first before looking in the type's metadata for the appropriate serializer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <MemberSignature Language="C#" Value="System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Context As ContextStack Implements IDesignerSerializationManager.Context" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::Design::Serialization::ContextStack ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { System::ComponentModel::Design::Serialization::ContextStack ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.Serialization.ContextStack</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-287">이 serialization 세션을 위한 컨텍스트 스택을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-287">Gets the context stack for this serialization session.</span></span></summary>
        <value><span data-ttu-id="3ba5f-288">데이터를 저장하는 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-288">A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that stores data.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-289">컨텍스트 스택을 스택으로 구현 되는 사용자 정의 저장소 영역을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-289">A context stack provides a user-defined storage area, implemented as a stack.</span></span> <span data-ttu-id="3ba5f-290">이 저장소 영역 serializer에 걸쳐 통신을 제공 하는 유용한 방법은 serialization은 일반적으로 계층적 프로세스.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-290">This storage area is a useful way to provide communication across serializers, as serialization is a generally hierarchical process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-291">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-291">This property was accessed outside of a serialization session.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.ContextStack" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(class System.Type type, class System.Collections.ICollection arguments, string name, bool addToContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type ^ type, System::Collections::ICollection ^ arguments, System::String ^ name, bool addToContainer) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::CreateInstance;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="addToContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3ba5f-292">만들 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-292">The data type to create.</span></span></param>
        <param name="arguments"><span data-ttu-id="3ba5f-293">이 형식에 대한 생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-293">The arguments to pass to the constructor for this type.</span></span></param>
        <param name="name"><span data-ttu-id="3ba5f-294">개체의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-294">The name of the object.</span></span> <span data-ttu-id="3ba5f-295">이 이름은 나중에 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />를 통해 개체에 액세스하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-295">This name can be used to access the object later through <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />.</span></span> <span data-ttu-id="3ba5f-296"><see langword="null" />이 전달되면 개체는 계속 만들어지지만 이름을 통해 개체에 액세스할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-296">If <see langword="null" /> is passed, the object is still created but cannot be accessed by name.</span></span></param>
        <param name="addToContainer">
          <span data-ttu-id="3ba5f-297">이 개체를 디자인 컨테이너에 추가하려면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-297"><see langword="true" /> to add this object to the design container.</span></span> <span data-ttu-id="3ba5f-298">개체에서는 영향을 줄 수 있도록 이에 대한 <see cref="T:System.ComponentModel.IComponent" />를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-298">The object must implement <see cref="T:System.ComponentModel.IComponent" /> for this to have any effect.</span></span></param>
        <summary><span data-ttu-id="3ba5f-299"><see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-299">Implements the <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-300">새로 만들어진 개체 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-300">The newly created object instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.GetInstance (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetInstance (name As String) As Object Implements IDesignerSerializationManager.GetInstance" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System::String ^ name) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetInstance;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3ba5f-301">검색할 개체의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-301">The name of the object to retrieve.</span></span></param>
        <summary><span data-ttu-id="3ba5f-302">지정된 이름을 가진 생성된 개체의 인스턴스를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-302">Retrieves an instance of a created object of the specified name.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-303">지정된 이름의 개체 인스턴스이거나, 해당 이름의 개체를 찾을 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-303">An instance of the object with the given name, or <see langword="null" /> if no object by that name can be found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3ba5f-304"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-304"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-305">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-305">This property was accessed outside of a serialization session.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName">
      <MemberSignature Language="C#" Value="string IDesignerSerializationManager.GetName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetName (value As Object) As String Implements IDesignerSerializationManager.GetName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System::Object ^ value) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3ba5f-306">이름을 검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-306">The object for which to retrieve the name.</span></span></param>
        <summary><span data-ttu-id="3ba5f-307">지정된 개체의 이름을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-307">Retrieves a name for the specified object.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-308">개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-308">The name of the object, or <see langword="null" /> if the object is unnamed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-309">경우는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetName%2A> 메서드는 변수의 해당 이름을 찾을 수 없습니다는 `value` 발생 매개 변수는 <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> 이벤트를 반환 하기 전에 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-309">If the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetName%2A> method cannot find a corresponding name for the `value` parameter, it raises the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event before it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3ba5f-310"><paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-310"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-311">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-311">This property was accessed outside of a serialization session.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
        <altmember cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.GetSerializer (Type objectType, Type serializerType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(class System.Type objectType, class System.Type serializerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetSerializer (objectType As Type, serializerType As Type) As Object Implements IDesignerSerializationManager.GetSerializer" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type ^ objectType, Type ^ serializerType) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetSerializer;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="serializerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="3ba5f-312">serializer를 가져올 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-312">The type of the object to get the serializer for.</span></span></param>
        <param name="serializerType"><span data-ttu-id="3ba5f-313">검색할 serializer의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-313">The type of the serializer to retrieve.</span></span></param>
        <summary><span data-ttu-id="3ba5f-314">지정된 개체 형식에 대한 요청된 형식의 serializer를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-314">Gets a serializer of the requested type for the specified object type.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-315">요청된 serializer의 인스턴스이거나, 적절한 serializer를 찾을 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-315">An instance of the requested serializer, or <see langword="null" /> if no appropriate serializer can be located.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType">
      <MemberSignature Language="C#" Value="Type IDesignerSerializationManager.GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetType (typeName As String) As Type Implements IDesignerSerializationManager.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System::String ^ typeName) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetType;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3ba5f-316">로드할 형식의 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-316">The fully qualified name of the type to load.</span></span></param>
        <summary><span data-ttu-id="3ba5f-317">지정된 이름의 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-317">Gets a type of the specified name.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-318">형식의 인스턴스이거나, 형식이 로드될 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-318">An instance of the type, or <see langword="null" /> if the type cannot be loaded.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-319">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-319">This property was accessed outside of a serialization session.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Properties As PropertyDescriptorCollection Implements IDesignerSerializationManager.Properties" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::PropertyDescriptorCollection ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { System::ComponentModel::PropertyDescriptorCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-320"><see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 속성을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-320">Implements the <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span></span></summary>
        <value><span data-ttu-id="3ba5f-321">serialize될 속성이 들어 있는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-321">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the properties to be serialized.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(class System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveSerializationProvider (provider As IDesignerSerializationProvider) Implements IDesignerSerializationManager.RemoveSerializationProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System::ComponentModel::Design::Serialization::IDesignerSerializationProvider ^ provider) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::RemoveSerializationProvider;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="3ba5f-322">제거할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-322">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to remove.</span></span></param>
        <summary><span data-ttu-id="3ba5f-323">이전에 추가한 serialization 공급자를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-323">Removes a previously added serialization provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-324"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23RemoveSerializationProvider%2A> 메서드를 호출 하 여 이전에 추가 된 사용자 지정 serialization 공급자를 제거는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-324">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23RemoveSerializationProvider%2A> method removes a custom serialization provider that was previously added by a call to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.ReportError (object errorInformation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object errorInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub ReportError (errorInformation As Object) Implements IDesignerSerializationManager.ReportError" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System::Object ^ errorInformation) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::ReportError;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorInformation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="errorInformation"><span data-ttu-id="3ba5f-325">오류 정보를 포함하는 개체로서 대개 <see cref="T:System.String" /> 또는 <see cref="T:System.Exception" /> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-325">An object containing the error information, usually of type <see cref="T:System.String" /> or <see cref="T:System.Exception" />.</span></span></param>
        <summary><span data-ttu-id="3ba5f-326">serialization에서 발생한 복구 가능 오류를 보고하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-326">Used to report a recoverable error in serialization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-327">Serializer를 호출 하 여 복구 가능한 오류를 정상적으로 처리에 쓸 수는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> 오류 정보와 함께 메서드.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-327">Serializers can be written to handle recoverable errors gracefully by calling the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> method with the error information.</span></span> <span data-ttu-id="3ba5f-328">Serialization 관리자가 완료 되 면 또는이 메서드에서 예외를 throw 하 고 serialization 프로세스를 중단할 수 있습니다 후의 오류 목록을 보고 기능을 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-328">The serialization manager may support reporting a list of errors after it completes, or it may throw an exception from this method and abort the serialization process.</span></span> <span data-ttu-id="3ba5f-329">Serializer는이 함수를 호출한 후 계속 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-329">The serializer should continue after calling this function.</span></span>  
  
 <span data-ttu-id="3ba5f-330"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> 추가 `errorInformation` 매개 변수는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-330"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> adds the `errorInformation` parameter to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> collection.</span></span> <span data-ttu-id="3ba5f-331">경우 `errorInformation` 은 `null`, 아무 작업도 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-331">If `errorInformation` is `null`, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-332">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-332">This property was accessed outside of a serialization session.</span></span></exception>
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.SetName (object instance, string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetName (instance As Object, name As String) Implements IDesignerSerializationManager.SetName" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System::Object ^ instance, System::String ^ name) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::SetName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3ba5f-333">이름을 설정할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-333">The object to set the name.</span></span></param>
        <param name="name"><span data-ttu-id="3ba5f-334">개체 이름으로 사용되는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-334">A <see cref="T:System.String" /> used as the name of the object.</span></span></param>
        <summary><span data-ttu-id="3ba5f-335">지정된 개체의 이름을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-335">Sets the name for the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-336"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23SetName%2A> 메서드는 기존 개체의 이름을 설정 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-336">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23SetName%2A> method provides a way to set the name of an existing object.</span></span> <span data-ttu-id="3ba5f-337">호출을 통해 개체의 인스턴스를 만들 수이 고 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A> 의 오버 헤드를 방지 하는 메서드를는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-337">This enables creation of an instance of the object through a call to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A> method, avoiding the overhead of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3ba5f-338">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-338">One or both of the parameters are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3ba5f-339">인스턴스에 의해 지정된 개체가 이미 이름을 가지고 있거나, 명명된 다른 개체가 이미 <paramref name="name" />을 사용하는 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-339">The object specified by instance already has a name, or <paramref name="name" /> is already used by another named object.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-340">이 속성이 serialization 세션 밖에서 액세스된 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-340">This property was accessed outside of a serialization session.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="System.IServiceProvider.GetService">
      <MemberSignature Language="C#" Value="object IServiceProvider.GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IServiceProvider.GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetService (serviceType As Type) As Object Implements IServiceProvider.GetService" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IServiceProvider.GetService(Type ^ serviceType) = IServiceProvider::GetService;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="3ba5f-341">가져올 서비스 개체의 형식을 지정하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-341">An object that specifies the type of service object to get.</span></span></param>
        <summary><span data-ttu-id="3ba5f-342">이 멤버에 대한 설명을 보려면 <see cref="M:System.IServiceProvider.GetService(System.Type)" /> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-342">For a description of this member, see the <see cref="M:System.IServiceProvider.GetService(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="3ba5f-343"><paramref name="serviceType" /> 형식의 서비스 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-343">A service object of type <paramref name="serviceType" />.</span></span>  
  
 <span data-ttu-id="3ba5f-344">또는</span><span class="sxs-lookup"><span data-stu-id="3ba5f-344">-or-</span></span>  
  
 <span data-ttu-id="3ba5f-345"><paramref name="serviceType" /> 형식의 서비스 개체가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-345"><see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-346">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3ba5f-346">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3ba5f-347"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 인스턴스가 <xref:System.IServiceProvider> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-347">It can be used only when the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> instance is cast to an <xref:System.IServiceProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRecycledTypes">
      <MemberSignature Language="C#" Value="public bool ValidateRecycledTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateRecycledTypes" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateRecycledTypes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateRecycledTypes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3ba5f-348">일치하는 이름이 동일한 형식을 참조하는지에 대해 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 메서드가 확인할지 여부를 나타내는 플래그를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-348">Gets or sets a flag indicating whether the <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method will verify that matching names refer to the same type.</span></span></summary>
        <value>
          <span data-ttu-id="3ba5f-349"><see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 형식을 확인하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-349"><see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> verifies types; otherwise, <see langword="false" /> if it does not.</span></span> <span data-ttu-id="3ba5f-350">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-350">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ba5f-351"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 의 동작을 수정 하는 속성은 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 메서드 때는 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> 속성은 `true`다음 표에 설명 된 대로, 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-351">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> property modifies the behavior of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method when the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `true`, as detailed in the following table.</span></span>  
  
|`RecycleInstances`|`ValidateRecycledTypes`|<span data-ttu-id="3ba5f-352">동작 `CreateInstance`</span><span class="sxs-lookup"><span data-stu-id="3ba5f-352">Behavior of `CreateInstance`</span></span>|  
|------------------------|-----------------------------|----------------------------------|  
|`false`|<span data-ttu-id="3ba5f-353">`true` 또는 `false`</span><span class="sxs-lookup"><span data-stu-id="3ba5f-353">`true` or `false`</span></span>|<span data-ttu-id="3ba5f-354">항상 지정 된 형식의 새 인스턴스를 만들으십시오</span><span class="sxs-lookup"><span data-stu-id="3ba5f-354">Always create a new instance of the specified type</span></span>|  
|`true`|`false`|<span data-ttu-id="3ba5f-355">해당 형식에 관계 없이 일치 하는 인스턴스가 있는 경우 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-355">If a matching instance is found it is returned, regardless of its type.</span></span>|  
|`true`|`true`|<span data-ttu-id="3ba5f-356">일치 하는 인스턴스가 발견 되 면 해당 형식이 고 메서드 호출에 지정 된 대로 동일한 경우에 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-356">If a matching instance is found, it is returned only if its type is the same as specified in the method call.</span></span>|  
  
 <span data-ttu-id="3ba5f-357"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 비슷한 속성을 갖지만 인터페이스 없음이나 공통 부모를 공유 하는 경우 한 가지 유형의 개체를 다른 개체를 변형 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3ba5f-357"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> is useful for morphing one type of object to another if they have similar properties but share no common parent or interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3ba5f-358">serialization 관리자에 활성 serialization 세션이 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3ba5f-358">The serialization manager has an active serialization session.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      </Docs>
    </Member>
  </Members>
</Type>