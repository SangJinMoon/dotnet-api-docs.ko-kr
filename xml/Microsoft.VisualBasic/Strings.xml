<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4f13c149a72369d178effaa99f3e4cb3e277653b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659852" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <see langword="Strings" /> module contains procedures used to perform string operations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 모듈은 Visual Basic 언어 키워드 및 문자열 조작 하는 런타임 라이브러리 멤버를 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 문자열에서 해당 공간 분할 하는 방법을 보여 줍니다.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 입력된 문자에 대 한 문자 코드입니다. 이 0에서 255까지 단일 바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 이 0 ~ 65535 수 있습니다. 반환 된 값은 현재 스레드 문화권 및 코드 페이지 설정을 독립적입니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 함수는 문자가 아닌 바이트를 바이트에 대 한 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드에서 및 `AscB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `Asc` 반환 하도록 함수 `Integer` 문자 코드 각 문자열의 첫 번째 문자에 해당 합니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 입력된 문자에 대 한 문자 코드입니다. 이 0에서 255까지 단일 바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 이 0 ~ 65535 수 있습니다. 반환 된 값은 현재 스레드 문화권 및 코드 페이지 설정을 독립적입니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 함수는 문자가 아닌 바이트를 바이트에 대 한 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드에서 및 `AscB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `Asc` 반환 하도록 함수 `Integer` 문자 코드 각 문자열의 첫 번째 문자에 해당 합니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 입력된 문자에 대 한 문자 코드입니다. 이 0에서 255까지 단일 바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 이 0 ~ 65535 수 있습니다. 반환 된 값은 현재 스레드 문화권 및 코드 페이지 설정을 독립적입니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 함수는 문자가 아닌 바이트를 바이트에 대 한 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드에서 및 `AscB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `Asc` 반환 하도록 함수 `Integer` 문자 코드 각 문자열의 첫 번째 문자에 해당 합니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 입력된 문자에 대 한 문자 코드입니다. 이 0에서 255까지 단일 바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 이 0 ~ 65535 수 있습니다. 반환 된 값은 현재 스레드 문화권 및 코드 페이지 설정을 독립적입니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 함수는 문자가 아닌 바이트를 바이트에 대 한 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드에서 및 `AscB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `Asc` 반환 하도록 함수 `Integer` 문자 코드 각 문자열의 첫 번째 문자에 해당 합니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비대칭 범위가 허용 `CharCode` 저장소 차이 대 한 보정는 `Short` 및 `Integer`합니다. 예를 들어-29183은는 `Short` 36353 노드인는 `Integer`합니다. 이 Visual Basic 6.0와의 호환성도 지원합니다.  
  
 `Chr` 사용 하 여는 <xref:System.Text.Encoding> 클래스에 <xref:System.Text?displayProperty=nameWithType> 현재 스레드가 단일 바이트 문자 집합 (SBCS) 나 더블 바이트 문자 사용 되 고 있는지 확인 하려면 네임 스페이스 (DBCS)를 설정 합니다. 그런 다음 걸리는 `CharCode` 적절 한 집합에 코드 포인트로 합니다. 범위는 0에서 255까지 SBCS 문자의 32768에서 65535까지 DBCS 문자에 대 한 있을 수 있습니다.  
  
 에 포함 되어 있는 현재 스레드에 대 한 코드 페이지에 따라 반환된 값의 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 속성의는 <xref:System.Globalization.TextInfo> 클래스에 <xref:System.Globalization> 네임 스페이스입니다. 가져올 수 있습니다 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 지정 하 여 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`합니다.  
  
 `ChrW` `CharCode` 유니코드 코드 포인트입니다. 범위는 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다. 값은-1부터에서 32768 +65535 값과 동일 하 게 처리 합니다.  
  
 0에서 31 까지의 숫자 인쇄할 수 없는 표준 ASCII 코드와 동일합니다. 예를 들어 `Chr(10)` 줄 바꿈 문자를 반환 합니다.  
  
> [!NOTE]
>  `ChrB` 이전 버전의 Visual Basic의 함수는 단일 바이트를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. Visual Basic 및.NET Framework의 모든 문자열은 유니코드에서 및 `ChrB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `Chr` 함수는 지정 된 문자 코드와 연결 된 문자를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비대칭 범위가 허용 `CharCode` 저장소 차이 대 한 보정는 `Short` 및 `Integer`합니다. 예를 들어-29183은는 `Short` 36353 노드인는 `Integer`합니다. 이 Visual Basic 6.0와의 호환성도 지원합니다.  
  
 `Chr` 사용 하 여는 <xref:System.Text.Encoding> 클래스에 <xref:System.Text?displayProperty=nameWithType> 현재 스레드가 단일 바이트 문자 집합 (SBCS) 나 더블 바이트 문자 사용 되 고 있는지 확인 하려면 네임 스페이스 (DBCS)를 설정 합니다. 그런 다음 걸리는 `CharCode` 적절 한 집합에 코드 포인트로 합니다. 범위는 0에서 255까지 SBCS 문자의 32768에서 65535까지 DBCS 문자에 대 한 있을 수 있습니다.  
  
 에 포함 되어 있는 현재 스레드에 대 한 코드 페이지에 따라 반환된 값의 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 속성의는 <xref:System.Globalization.TextInfo> 클래스에 <xref:System.Globalization> 네임 스페이스입니다. 가져올 수 있습니다 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 지정 하 여 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`합니다.  
  
 `ChrW` `CharCode` 유니코드 코드 포인트입니다. 범위는 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다. 값은-1부터에서 32768 +65535 값과 동일 하 게 처리 합니다.  
  
 0에서 31 까지의 숫자 인쇄할 수 없는 표준 ASCII 코드와 동일합니다. 예를 들어 `Chr(10)` 줄 바꿈 문자를 반환 합니다.  
  
> [!NOTE]
>  `ChrB` 이전 버전의 Visual Basic의 함수는 단일 바이트를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. Visual Basic 및.NET Framework의 모든 문자열은 유니코드에서 및 `ChrB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `Chr` 함수는 지정 된 문자 코드와 연결 된 문자를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일치 `Match` 내의 `Source`, `Filter` 함수는 빈 배열을 반환 합니다. 오류가 발생 하는 경우 `Source` 로 설정 된 `Nothing` 또는 1 차원 배열이 아닙니다.  
  
 반환 된 배열에서 `Filter` 함수에는 일치 항목의 수를 포함 하는 데 충분 한 요소에만 포함 되어 있습니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|상수|설명|  
|`CompareMethod.Binary`|이진 비교를 수행|  
|`CompareMethod.Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `Filter` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일치 `Match` 내의 `Source`, `Filter` 함수는 빈 배열을 반환 합니다. 오류가 발생 하는 경우 `Source` 로 설정 된 `Nothing` 또는 1 차원 배열이 아닙니다.  
  
 반환 된 배열에서 `Filter` 함수에는 일치 항목의 수를 포함 하는 데 충분 한 요소에만 포함 되어 있습니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|`CompareMethod.Binary`|이진 비교를 수행|  
|`CompareMethod.Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `Filter` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Any valid expression.</param>
        <param name="Style">Optional. A valid named or user-defined format <see langword="String" /> expression.</param>
        <summary>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</summary>
        <returns>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> 메서드 유사한 기능을 제공 합니다.  
  
 지역화 되지 않은 숫자 문자열 형식을 지정 하는 경우 사용자 정의 숫자 형식의 사용 하 여 원하는 것을 보장 해야 있습니다.  
  
 지정 하지 않고 숫자의 형식을 지정 하려는 경우 `Style`, `Format` 에 유사한 기능을 제공 하는 함수는 `Str` 함수, 국가별로 인식 되 긴 하지만 합니다. 그러나 양수 문자열 형식으로 지정를 사용 하 여는 `Format` 함수 값의 부호에 대 한 예약된 하는 선행 공백을 포함 하지 않으면 사용 하 여 변환 하는 것은 `Str` 함수 선행 공간을 유지 합니다.  
  
## <a name="different-formats-for-different-numeric-values"></a>다른 숫자 값에 대 한 다양 한 형식  
 숫자에 대 한 사용자 정의 형식 식은 1 세미콜론으로 구분 된 세 개의 섹션을 가질 수 있습니다. 경우는 `Style` 의 인수는 `Format` 함수에 포함 되어 미리 정의 된 숫자 형식 중 하나가, 한 개의 절만 허용 됩니다.  
  
|사용 하는 경우|이것은 결과입니다.|  
|-|-|  
|한 개의 절만|형식 식이 모든 값에 적용 됩니다.|  
|두 섹션|첫 번째 섹션을 양수 값 및 0;에 적용 두 번째 음수 값에 적용 됩니다.|  
|세 섹션|첫 번째 섹션은 양수 값에 적용 됩니다., 음수 값에 적용 되 고 두 번째 및 세 번째 0에 적용 됩니다.|  
  
 다음 예제에서는 다음 두 섹션이: 첫 번째 양수 값 및 0;에 대 한 형식 정의 두 번째 섹션에는 음수 값에 대 한 형식을 정의합니다. 이후는 `Style` 의 인수는 `Format` 문자열을 사용 하는 함수, 따옴표로 묶어야 합니다.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 세미콜론 사이 아무 것도 포함 하는 경우에 누락 된 섹션이 양수 값 형식을 사용 하 여 인쇄 됩니다. 예를 들어 다음과 같은 형식 표시 양수 및 음수 값 첫 번째 절의 형식을 사용 하 여 표시 `Zero` 값이 0입니다.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>미리 정의 된 숫자 형식  
 다음 표에서 미리 정의 된 숫자 형식 이름. 이를 이름으로 사용할 수 있습니다는 `Style` 에 대 한 인수는 `Format` 함수:  
  
|형식 이름|설명|  
|-|-|  
|`General Number`, `G`또는 `g`|함께 천 구분 기호 없이 숫자를 표시 합니다.<br /><br /> 예를 들어 `Format(&H3FA, "g")` 반환 `1018`합니다.|  
|`Currency`, `C`또는 `c`|해당 하는 경우 숫자를 천 구분 기호를 표시 소수 구분 기호 오른쪽으로 두 자릿수를 표시합니다. 출력은 시스템 로캘 설정에 따릅니다.<br /><br /> 예를 들어 `Format(1234567, "c")` 반환 `$1,234,567.00`합니다.|  
|`Fixed`, `F`또는 `f`|소수 구분 기호 오른쪽을 왼쪽으로 최소 한 자릿수 및 두 자릿수를 표시합니다.<br /><br /> 예를 들어 `Format(1234567, "f")` 반환 `1234567.00`합니다.|  
|`Standard`, `N`또는 `n`|소수 구분 기호 오른쪽을 천 구분 기호 왼쪽으로 최소 한 자릿수, 두 자리 수를 표시 합니다.<br /><br /> 예를 들어 `Format(1234567, "n")` 반환 `1,234,567.00`합니다.|  
|`Percent`|바로 오른쪽에 추가 하는 백분율 기호 (%)으로 100으로 곱한 숫자를 표시 합니다. 항상 소수 구분 기호 오른쪽으로 두 자릿수를 표시 합니다.<br /><br /> 예를 들어 `Format(0.4744, "Percent")` 반환 `47.44%`합니다.|  
|`P`또는 `p`|100으로 곱한 백분율 기호 (%)로 오른쪽에 공백 하나로 천 단위 구분 기호와 함께 숫자를 표시, 항상 소수 구분 기호 오른쪽으로 두 자릿수를 표시 합니다.<br /><br /> 예를 들어 `Format(0.80345, "p")` 반환 `80.35 %`합니다.|  
|`Scientific`|두 개의 유효 자릿수를 제공 하는 표준 과학적 표기법을 사용 합니다.<br /><br /> 예를 들어 `Format(1234567, "Scientific")` 반환 `1.23E+06`합니다.|  
|`E`또는 `e`|유효 자릿수 6 개를 제공 하는 표준 과학적 표기법을 사용 합니다.<br /><br /> 예를 들어 `Format(1234567, "e")` 반환 `1.234567e+006`합니다.|  
|`D`또는 `d`|숫자를 10 진수 (밑수 10) 형식의 숫자 값이 포함 된 문자열로 표시 합니다. 이 옵션은 정수 계열 형식에 대 한 지원 (`Byte`, `Short`, `Integer`, `Long`)만 있습니다.<br /><br /> 예를 들어 `Format(&H7F, "d")` 반환 `127`합니다.|  
|`X`또는 `x`|숫자를 16 진수 (밑수 16) 형식의 숫자 값이 포함 된 문자열로 표시 합니다. 이 옵션은 정수 계열 형식에 대 한 지원 (`Byte`, `Short`, `Integer`, `Long`)만 있습니다.<br /><br /> 예를 들어 `Format(127, "x")` 반환 `7f`합니다.|  
|`Yes/No`|표시 `No` 번호가 고, 그렇지 않으면 0 이면 표시 `Yes`합니다.<br /><br /> 예를 들어 `Format(0, "Yes/No")` 반환 `No`합니다.|  
|`True/False`|표시 `False` 번호가 고, 그렇지 않으면 0 이면 표시 `True`합니다.<br /><br /> 예를 들어 `Format(1, "True/False")` 반환 `True`합니다.|  
|`On/Off`|표시 `Off` 번호가 고, 그렇지 않으면 0 이면 표시 `On`합니다.<br /><br /> 예를 들어 `Format(1, "On/Off")` 반환 `On`합니다.|  
  
### <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Yes/No`, `True/False`, 및 `On/Off` 형식은 지원 되지 않습니다.  
  
## <a name="user-defined-numeric-formats"></a>사용자 정의 숫자 형식  
 다음 표에서 사용자 지정 숫자 형식을 만드는 데 사용할 수 있는 문자를 보여 줍니다. 이 빌드를 사용할 수 있습니다는 `Style` 에 대 한 인수는 `Format` 함수:  
  
|문자|설명|  
|-|-|  
|없음|서식 없는 숫자를 표시합니다.|  
|(`0`)|숫자 자리 표시자입니다. 숫자 또는 0을 표시 합니다. 식에 형식 문자열에 0이 나타나는 위치에 숫자를 표시 합니다. 그렇지 않으면 해당 위치에 0이 표시 됩니다.<br /><br /> 숫자에 보다 적은 수의 숫자 0 경우 (소수점 양쪽)에 십진수 선행 또는 후행 0이 표시 됩니다. 숫자에 보다 소수 구분 기호 오른쪽 자릿수가 0 많은 경우 형식 식의 소수 구분 기호 오른쪽에 0 만큼 숫자가 소수 자릿수를 반올림 합니다. 숫자에 보다 소수 구분 기호 왼쪽 자릿수가 형식 식의 소수 구분 기호 왼쪽 0 수정 없이 추가 자릿수가 표시 있습니다.|  
|(`#`)|숫자 자리 표시자입니다. 숫자 또는 아무 것도 표시 됩니다. 식에 위치에 숫자가 있으면 여기서는 `#` 표시; 그렇지 않으면 해당 위치에 아무 것도 표시 형식 문자열에 문자를 표시 합니다.<br /><br /> 이 기호 비슷합니다는 `0` 경우 1 보다 더 적은 자릿수가 표시 되지 않습니다는 선행 및 후행 0 자리 표시자 `#` 형식 식의 소수 구분 기호 양쪽에 있는 문자입니다.|  
|(`.`)|10 진수 자리 표시자입니다. 소수점 자리 표시자는 소수 구분 기호 왼쪽 및 오른쪽 표시 자릿수를 결정 합니다. 형식 지정 식이 포함 되 면 `#` 이 기호의 왼쪽에 문자; 소수 구분 기호로 시작 1 보다 작은 숫자입니다. 소수 자릿수 숫자를 앞에 오는 0을 표시 하려면 소수 구분 기호 왼쪽에 첫 번째 숫자 자리 표시자로 0을 사용 합니다. 일부 로캘에서 소수 구분 기호로 쉼표를 사용 합니다. 형식이 지정 된 출력에서 소수점 자리 표시자로 사용 되는 실제 문자는 시스템에서 인식 하는 숫자 형식에 따라 달라 집니다. 따라서 사용 해야 마침표를 소수점 자리 표시자 사용자 정의 형식에서에서 소수점 자리 표시자 쉼표를 사용 하는 로캘에서 경우에 합니다. 서식이 지정 된 문자열은 로캘에 대 한 올바른 형식으로 표시 됩니다.|  
|(`%`)|백분율 자리 표시자입니다. 식에 100을 곱합니다. 백분율 문자 (`%`) 형식 문자열에 표시 되는 위치에 삽입 됩니다.|  
|(`,`)|천 구분 기호입니다. 천 구분 기호는 소수 구분 기호 왼쪽에 네 개 이상의 자릿수를 가진 숫자에서 1000 자리를 구분 합니다. 천 구분 기호의 표준 사용이 지정 된 10 진수 자리 표시자로 묶 였는 천 구분 기호가 포함 되는 경우 (`0` 또는 `#`).<br /><br /> 바로 왼쪽 (소수 지정 여부)의 소수 구분 기호 또는 가장 오른쪽에 천 구분 문자는 문자열에 "수 1000으로 나눈 필요에 따라 반올림 합니다." 숫자 1, 000 보다 작은 하지만 크거나 500으로 표시 됩니다 `1`, 및 500으로 표시 되는 것 보다 작은 숫자 `0`합니다. 두 개의 인접 한 천 단위 구분 기호가이 위치에 1 백만 비율과 추가적인 각 구분 기호에 대해 1,000 단위로 또 다른 요인입니다.<br /><br /> 소수 구분 기호 왼쪽에 즉시 이외의 위치 또는 문자열에서 맨 오른쪽 위치에는 여러 구분 기호는 천 구분 기호 사용을 지정한 것으로 취급 됩니다. 일부 로캘에서 천 구분 기호로 마침표를 사용 합니다. 형식이 지정 된 출력에서 천 구분 기호로 사용 되는 실제 문자는 시스템에서 인식 하는 숫자 형식에 따라 달라 집니다. 따라서 사용 해야 쉼표 천 구분 기호로 사용자 정의 형식에는 로캘에서 천 구분 기호로 마침표를 사용 하는 경우에 합니다. 서식이 지정 된 문자열은 로캘에 대 한 올바른 형식으로 표시 됩니다.<br /><br /> 예를 들어 다음과 같은 세 가지 형식 문자열:<br /><br /> -   `"#,0."`를 형식 문자열 "100000000"으로 100 백만 수를 지정 하려면 어떤 사용 하 여 1000 단위 구분 기호입니다.<br />-   `"#0,."`를 사용 하 여 배율 인수 1 천의 문자열 "100000"으로 100 백만 수의 형식을 지정 합니다.<br />-   `"#,0,."`를 사용 하 여 1000 단위 구분 기호 및 번호 100 백만 문자열 "100000"으로 지정 하려면 1 천으로 크기를 조정 합니다.|  
|(`:`)|시간 구분 기호입니다. 일부 로캘에서 시간 구분 기호에 다른 문자를 사용 될 수 있습니다. 시간, 분 및 초 시간 값에 형식을 지정할 때 시간 구분 기호를 구분 합니다. 형식이 지정 된 출력에는 시간 구분 기호로 사용 되는 실제 문자는 시스템 설정에 따라 결정 됩니다.|  
|(`/`)|날짜 구분 기호입니다. 일부 로캘에서 날짜 구분 기호에 다른 문자를 사용 될 수 있습니다. 날짜 값에 형식을 지정할 때 년, 월, 일 및 날짜 구분 기호를 구분 합니다. 형식이 지정 된 출력에서 날짜 구분 기호로 사용 되는 실제 문자는 시스템 설정에 따라 결정 됩니다.|  
|(`E-``E+``e-``e+`)|공학용 형식입니다. 형식 지정 식이 하나 이상 10 진수 자리 표시자를 포함 하는 경우 (`0` 또는 `#`)의 왼쪽에 `E-`, `E+`, `e-`, 또는 `e+`, 숫자는 공학용 형식으로 표시 하 고 `E` 또는 `e` 수와 지 수 사이 삽입 됩니다. 지 수의 자릿수를 결정 하는 왼쪽에 숫자 자리 표시자의 수입니다. 사용 하 여 `E-` 또는 `e-` 음의 지 수에 빼기 기호를 배치할 수 있습니다. 사용 하 여 `E+` 또는 `e+` 음의 지 수에 빼기 기호 및 양의 지 수에 더하기 기호를 배치할 합니다. 올바른 형식을 지정 하려면이 기호의 오른쪽에 10 진수 자리 표시자를 포함 해야 합니다.|  
|`-` `+` `$` ( )|리터럴 문자입니다. 이러한 문자는 형식 문자열에 입력 한 대로 표시 됩니다. 나열 된 다른 문자를 표시 하려면 앞에 백슬래시 (`\`) 또는 이중 따옴표로 묶습니다 ("").|  
|(`\`)|형식 문자열에 다음 문자를 표시합니다. 리터럴 문자와 같이 특별 한 의미가 있는 문자를 표시 하려면 앞에 백슬래시 (`\`). 백슬래시 자체는 표시 되지 않습니다. 백슬래시를 사용 하 여 다음 문자를 큰따옴표로 묶는 것과 같습니다. 백슬래시를 표시 하려면 백슬래시를 두 개를 사용 하 여 (`\\`).<br /><br /> 리터럴 문자는 날짜 서식 지정 및 시간 서식 문자에는 표시할 수 없는 문자의 예 (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, 및 `:`), 숫자 형식 지정 문자 (`#`, `0`, `%`, `E`, `e`, 쉼표 및 기간), 및 문자열 형식 지정 문자 (`@`, `&`, `<`, `>`, 및 `!`).|  
|(`"``ABC``"`)|큰따옴표 내부의 문자열을 표시 (""). 사용 해야 코드 내에 있는 스타일 인수에 문자열을 포함 하려면 `Chr(34)` 텍스트를 묶으십시오 (`34` 는 따옴표 (")에 대 한 문자 코드).|  
  
### <a name="legacy-code-example"></a>레거시 코드 예제  
 다음 표에서 일부 샘플 형식 식이 숫자에 대 한 합니다. (이 예제에서는 모두 사용자의 시스템 로캘 설정이 영어 (미국) 라고 가정 하는 데 사용) 첫 번째 열에 대 한 형식 문자열에 포함 된 `Style` 의 인수는 `Format` 함수, 형식이 지정 된 데이터 열 머리글에 지정 된 값이 있으면 출력 결과 포함 하는 다른 열.  
  
|형식 (`Style`)|"5" 일 경우|"-5" 형식으로 지정|"0.5" 형식으로 지정|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>미리 정의 된 날짜/시간 형식  
 다음 표에서 미리 정의 된 날짜 및 시간 형식 이름. 이 대 한 스타일 인수로 이름으로 사용할 수 있습니다는 `Format` 함수:  
  
|형식 이름|설명|  
|-|-|  
|`General Date`또는 `G`|날짜 및/또는 시간을 표시합니다. 예를 들어, `3/12/2008 11:07:31 AM`을 입력합니다. 날짜 표시는 응용 프로그램의 현재 문화권 값에 따라 결정 됩니다.|  
|`Long Date`, `Medium Date`또는 `D`|현재 문화권의 긴 날짜 형식에 따라 날짜를 표시합니다. 예를 들어, `Wednesday, March 12, 2008`을 입력합니다.|  
|`Short Date`또는 `d`|현재 문화권의 짧은 날짜 형식을 사용 하 여 날짜를 표시 합니다. 예를 들어, `3/12/2008`을 입력합니다.<br /><br /> `d` 문자 일 사용자 정의 날짜 형식으로 표시 합니다.|  
|`Long Time`, `Medium Time`또는 `T`|현재 문화권의 긴 시간 형식으로 사용 하 여 시간이 표시 됩니다. 일반적으로 시간, 분, 초를 포함 합니다. 예를 들어, `11:07:31 AM`을 입력합니다.|  
|`Short Time` 또는 `t`|현재 문화권의 짧은 시간 형식을 사용 하 여 시간을 표시 합니다. 예를 들어, `11:07 AM`을 입력합니다.<br /><br /> `t` 표시 문자 `AM` 또는 `PM` 시간 사용자 정의 형식으로 12 시간제 시계를 사용 하는 값입니다.|  
|`f`|긴 날짜 패턴과 짧은 시간 현재 문화권의 형식에 따라 표시합니다. 예를 들어, `Wednesday, March 12, 2008 11:07 AM`을 입력합니다.|  
|`F`|긴 날짜 패턴과 긴 시간 현재 문화권의 형식에 따라 표시합니다. 예를 들어, `Wednesday, March 12, 2008 11:07:31 AM`을 입력합니다.|  
|`g`|간단한 날짜와 현재 문화권의 형식에 따라 짧은 시간을 표시합니다. 예를 들어, `3/12/2008 11:07 AM`을 입력합니다.|  
|`M`, `m`|월 및 날짜의 일을 표시합니다. 예를 들어, `March 12`을 입력합니다.<br /><br /> `M` 문자를 사용자 정의 날짜 형식을 월 표시 됩니다. `m` 문자는 분 시간 사용자 정의 형식으로 표시 합니다.|  
|`R`, `r`|에 따라 날짜 서식을 지정 하는 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> 속성입니다. 예를 들어, `Wed, 12 Mar 2008 11:07:31 GMT`을 입력합니다. 형식이 지정 된 날짜의 날짜 및 시간 값을 조정 하지 않습니다. 호출 하기 전에 날짜/시간 값을 gmt로 조정 해야 합니다는 `Format` 함수입니다.|  
|`s`|날짜 및 시간에 정렬 가능한 인덱스 형식을 지정합니다. 예를 들어, `2008-03-12T11:07:31`을 입력합니다.<br /><br /> `s` 문자는 초 시간 사용자 정의 형식으로 표시 합니다.|  
|`u`|날짜 및 시간에 GMT 정렬 가능한 인덱스 형식을 지정합니다. 예를 들어, `2008-03-12 11:07:31Z`을 입력합니다.|  
|`U`|날짜 및 시간을 자세한 날짜 및 긴 시간 GMT로 서식을 지정 합니다. 예를 들어, `Wednesday, March 12, 2008 6:07:31 PM`을 입력합니다.|  
|`Y`, `y`|연도 및 월으로 날짜를 서식을 지정 합니다. 예를 들어, `March, 2008`을 입력합니다.<br /><br /> `Y` 및 `y` 사용자 정의 날짜 형식에는 연도 표시 하는 문자입니다.|  
  
 응용 프로그램의 현재 culture 정보에 대 한 자세한 내용은 참조 [어떻게 Culture에 영향을 줍니다 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
## <a name="user-defined-datetime-formats"></a>사용자 정의 날짜/시간 형식  
 다음 표에서 사용자 정의 날짜/시간 형식을 만드는 데 사용할 수 있는 문자를 보여 줍니다. 이전 버전의 Visual Basic의 경우에서 달리 이러한 형식 문자는 대/소문자 구분 합니다.  
  
|문자|설명|  
|-|-|  
|(`:`)|시간 구분 기호입니다. 일부 로캘에서 시간 구분 기호에 다른 문자를 사용 될 수 있습니다. 시간, 분 및 초 시간 값에 형식을 지정할 때 시간 구분 기호를 구분 합니다. 형식이 지정 된 출력에는 시간 구분 기호로 사용 되는 실제 문자는 응용 프로그램의 현재 문화권 값에 따라 결정 됩니다.|  
|(`/`)|날짜 구분 기호입니다. 일부 로캘에서 날짜 구분 기호에 다른 문자를 사용 될 수 있습니다. 날짜 값에 형식을 지정할 때 년, 월, 일 및 날짜 구분 기호를 구분 합니다. 형식이 지정 된 출력에서 날짜 구분 기호로 사용 되는 실제 문자는 응용 프로그램의 현재 문화권에 의해 결정 됩니다.|  
|(`%`)|다음 문자 뒤에 나오는 문자에 관계 없이 단일 문자 형식으로 읽도록 나타내는 데 사용 합니다. 또한 단일 문자 형식을 사용자 정의 형식으로 읽었음을 나타내는 하는 데 사용 합니다. 자세한 내용은 다음을 참조 하십시오.|  
|`d`|요일을 앞에 오는 0 없이 숫자로 표시 합니다 (예를 들어 `1`). 사용 하 여 `%d` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`dd`|요일을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `01`).|  
|`ddd`|요일을 약어로 표시 합니다 (예를 들어 `Sun`).|  
|`dddd`|요일을 정식 이름으로 표시 합니다 (예를 들어 `Sunday`).|  
|`M`|월을 앞에 오는 0 없이 숫자로 표시 합니다 (1 월으로 표시 되는 예를 들어 `1`). 사용 하 여 `%M` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`MM`|월을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `01/12/01`).|  
|`MMM`|월을 약어로 표시 합니다 (예를 들어 `Jan`).|  
|`MMMM`|전체 월 이름을 월 표시 합니다 (예를 들어 `January`).|  
|`gg`|시대/연대 문자열을 표시 합니다 (예를 들어 `A.D.`).|  
|`h`|앞에 12 시간제 시계를 사용 하 여 0 없이 숫자로 시간을 표시 합니다 (예를 들어 `1:15:15 PM`). 사용 하 여 `%h` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`hh`|앞에 12 시간제를 사용 하는 0과 함께 숫자로 표시 합니다 (예를 들어 `01:15:15 PM`).|  
|`H`|앞에 24 시간제를 사용 하 여 0 없이 숫자로 시간을 표시 합니다 (예를 들어 `1:15:15`). 사용 하 여 `%H` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`HH`|앞에 오는 0은 24 시간제를 사용 하 여과 함께 숫자로 표시 합니다 (예를 들어 `01:15:15`).|  
|`m`|분을 앞에 오는 0 없이 숫자로 표시 합니다 (예를 들어 `12:1:15`). 사용 하 여 `%m` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`mm`|분을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `12:01:15`).|  
|`s`|초를 앞에 오는 0 없이 숫자로 표시 합니다 (예를 들어 `12:15:5`). 사용 하 여 `%s` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`ss`|초를 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `12:15:05`).|  
|`f`|소수 단위 초를 표시합니다. 예를 들어 `ff` 초의 1/100 표시 `ffff` 10000 시간 (초)를 표시 합니다. 합계 7을 사용할 수 있습니다 `f` 사용자 정의 형식에는 기호입니다. 사용 하 여 `%f` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`t`|12 시간제 시계를 사용 하 고 대문자 표시 `A` 정오 이전의 모든 시간에 대문자 표시 `P` 정오부터 오후 11시 59분 사이의 모든 시간에 대 한 사용 하 여 `%t` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`tt`|12 시간제 시계를 사용 하는 로캘의 대문자 표시 `AM` 정오 이전의 모든 시간에 대문자 표시 `PM` 정오부터 오후 11시 59분 사이의 모든 시간에<br /><br /> 24 시간제를 사용 하는 로캘의 경우 아무 것도 표시 합니다.|  
|`y`|앞에 오는 0 없이 연도 숫자를 (0-9)를 표시 합니다. 사용 하 여 `%y` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`yy`|해당 하는 경우에 두 자리 숫자 형식 앞에 오는 0으로 연도 표시 합니다.|  
|`yyy`|4 자리 숫자의 연도 표시합니다.|  
|`yyyy`|4 자리 숫자의 연도 표시합니다.|  
|`z`|표준 시간대 오프셋 앞에 오는 0 없이 표시 합니다 (예를 들어 `-8`). 사용 하 여 `%z` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`zz`|표준 시간대 오프셋 앞에 0을 표시 합니다 (예를 들어 `-08`)|  
|`zzz`|전체 표준 시간대 오프셋을 표시 합니다 (예를 들어 `-08:00`)|  
  
### <a name="legacy-code-example"></a>레거시 코드 예제  
 다음은 사용자 지정 날짜 및 시간 형식에 대 한 몇 가지 `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|형식|표시|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 장치에 대 한 최소 시간 확인은 장치 제조업체에 의해 결정 됩니다. 장치에 대 한 해결 시간 형식이 정밀 하는 경우는 `f` 해당 장치에서 실행 하는 경우 0을 반환 하는 형식 문자.  
  
   
  
## Examples  
 다양 한 용도 보여 주는이 예제는 `Format` 모두 사용 하 여 값 형식 함수 `String` 형식이 나 사용자 정의 형식입니다. 날짜 구분 기호에 대 한 (`/`)을 시간 구분 기호 (`:`), 및 AM/PM 표시기 (`t` 및 `tt`), 실제로 출력 형식은 시스템에서 표시 되는 코드에서 사용 하는 로캘 설정에 따라 달라 집니다. 때 시간 및 개발 환경에서 표시 되는 날짜, 간단한 시간 형식 및 코드 로캘의 간단한 날짜 서식을 사용 됩니다.  
  
> [!NOTE]
>  24 시간 시계를 AM/PM 표시기를 사용 하는 로캘의 (`t` 및 `tt`) 아무 것도 표시 합니다.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Remarks" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses. See "Remarks" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Remarks" for values.</param>
        <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
        <returns>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하나 이상의 선택적 인수를 생략 하면 컴퓨터의 일치 하는 국가별 설정 값이 대신 사용 됩니다.  
  
 통화 값을 기준으로 통화 기호 위치는 시스템의 국가별 설정에 의해 결정 됩니다.  
  
> [!NOTE]
>  모든 설정 정보는 응용 프로그램의 로캘은에서 제공 됩니다. 기본적으로 제어판에서 설정 로캘이 사용 됩니다. 그러나 것으로 변경 될 수 프로그래밍 방식으로.NET Framework에서 파생 앞에 오는 0 제외 하 고 사용 하 여 `Number` 탭 합니다.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수는 다음 3 상 열거형 값을 사용 합니다.  
  
|값|설명|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|컴퓨터의 국가별 설정|  
  
   
  
## Examples  
 다음 예제에서는 `FormatCurrency` 함수를 사용하는 방법을 보여 줍니다.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Number of digits after decimal point is greater than 99.</exception>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, <see langword="DateFormat.GeneralDate" /> is used.</param>
        <summary>Returns a string expression representing a date/time value.</summary>
        <returns>Returns a string expression representing a date/time value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` 데이터 형식이 항상 날짜와 시간 정보를 포함 합니다. 형식 변환 목적으로, Visual Basic은 간주 1/1/1 (1 1 년 1 월) 시간에 대 한 기본값으로 간주 하 여 날짜 및 00시: 00 (자정)에 대 한 중립 값 이어야 합니다. 포맷 하는 경우는 `Date` 값을 날짜/시간 문자열로 `FormatDateTime` 기본값이 결과 문자열에 포함 되지 않습니다. 예를 들어 #1/1/0001 변환 하는 경우 9시 30분: 00 #을 문자열로 결과 "9시 30분: 00 AM"; 날짜 정보는 표시 되지 않습니다. 그러나 날짜 정보에에서는 아직 있는 원래 `Date` 값 및와 같은 함수를 사용 하 여 복구할 수 수 `DatePart`합니다.  
  
> [!NOTE]
>  전달 하는 경우는 `Expression` 으로 인수는 `String` 리터럴 `FormatDateTime` 에 따라 해석는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 응용 프로그램의 설정 합니다. 그러나로 전달 하는 경우는 `Date` 리터럴 형식 #mm/dd를 사용 하 여/yyyy # 때문에 `FormatDateTime` 항상 해석 한 `Date` 영어 (미국) 문화권에 따라 리터럴. 이 작업은 필요 하기 때문에, 응용 프로그램 개발 되 고 사용 하 여 코딩 된 경우 `Date` 하나에서 리터럴 문화권 되지만 다른 문화권을 사용 되는 플랫폼에서 실행할는 `Date` 리터럴 수 올바르게 구문 분석할 수 없습니다.  
  
 `NamedFormat` 인수에는 다음 설정 합니다.  
  
|상수|설명|  
|-|-|  
|`DateFormat.GeneralDate`|날짜 및/또는 시간을 표시 합니다. 짧은 날짜 형식으로 날짜 부분을 표시 합니다. 시간 부분은, 자세한 시간 형식으로 표시 합니다. 있는 경우 둘 다 표시 합니다.|  
|`DateFormat.LongDate`|컴퓨터의 국가별 설정에 지정 된 자세한 날짜 형식을 사용 하 여 날짜를 표시 합니다.|  
|`DateFormat.ShortDate`|컴퓨터의 국가별 설정에 지정 된 간단한 날짜 서식을 사용 하 여 날짜를 표시 합니다.|  
|`DateFormat.LongTime`|컴퓨터의 국가별 설정에 지정 된 시간 형식을 사용 하 여 시간을 표시 합니다.|  
|`DateFormat.ShortTime`|24 시간 형식 (hh: mm)를 사용 하 여 시간을 표시 합니다.|  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `FormatDateTime` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> setting is not valid.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a number.</summary>
        <returns>Returns an expression formatted as a number.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하나 이상의 선택적 인수가 생략 될 때 값 생략 된 인수에 대 한 로캘 설정에 따라 제공 됩니다.  
  
> [!NOTE]
>  모든 설정 정보는 응용 프로그램의 로캘은에서 제공 됩니다. 기본적으로 제어판에서 설정 로캘이 사용 됩니다. 그러나 이렇게 할 경우.NET Framework를 사용 하 여 프로그래밍 방식으로 변경할 수 있습니다 것.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수는 다음과 같은 설정이 있습니다.  
  
|상수|설명|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|컴퓨터의 국가별 설정|  
  
   
  
## Examples  
 이 예제에서는 `FormatNumber` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
        <returns>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하나 이상의 선택적 인수를 생략 하면 값 생략 된 인수에 대 한 로캘 설정에 따라 제공 됩니다.  
  
> [!NOTE]
>  모든 설정 정보는 응용 프로그램의 로캘은에서 제공 됩니다. 기본적으로 제어판에서 설정 로캘이 사용 됩니다. 그러나 이렇게 할 경우.NET Framework를 사용 하 여 프로그래밍 방식으로 변경할 수 있습니다 것.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수는 다음과 같은 설정이 있습니다.  
  
|상수|설명|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|컴퓨터의 국가별 설정|  
  
   
  
## Examples  
 이 예제에서는 사용 된 `FormatPercent` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Index">Required. <see langword="Integer" /> expression. The (1-based) index of the character in <c>str</c> to be returned.</param>
        <summary>Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</summary>
        <returns>
          <see langword="Char" /> value representing the character from the specified index in the supplied string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Index` 가 1 보다 작은 마지막 문자 인덱스 보다 큰 `str`, `ArgumentException` throw 됩니다.  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 `GetChar` 함수에서 지정한 인덱스의 문자를 반환 하는 `String`합니다.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.  The integer is a one-based index if a match is found.  If no match is found, the function returns zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description> The starting position for the search, which defaults to the first character position.  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 `InStr` 함수는 문자열을 구문 분석할 때 사용 됩니다.  
  
> [!NOTE]
>  `InStrB` 이전 버전의 Visual Basic의 문자 위치 아닌 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드에서 및 `InStrB` 더 이상 지원 합니다.  
  
 `Compare` 인수 설정은 다음과 같습니다.  
  
|상수|값|설명|  
|-|-|-|  
|`Binary`|0|이진 비교를 수행|  
|`Text`|1|텍스트 비교 수행|  
  
   
  
## Examples  
 사용 하 여이 예제는 `InStr` 함수 내에서 다른 한 문자열의 첫 번째 발생 위치를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 `InStr` 함수는 문자열을 구문 분석할 때 사용 됩니다.  
  
> [!NOTE]
>  `InStrB` 이전 버전의 Visual Basic의 문자 위치 아닌 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드에서 및 `InStrB` 더 이상 지원 합니다.  
  
 `Compare` 인수 설정은 다음과 같습니다.  
  
|상수|값|설명|  
|-|-|-|  
|`Binary`|0|이진 비교를 수행|  
|`Text`|1|텍스트 비교 수행|  
  
   
  
## Examples  
 사용 하 여이 예제는 `InStr` 함수 내에서 다른 한 문자열의 첫 번째 발생 위치를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Required. String expression being searched.</param>
        <param name="StringMatch">Required. String expression being searched for.</param>
        <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
        <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStrRev returns  </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> is zero-length  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is zero-length  </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
              <description> Position at which the first match is found, starting with the right side of the string.  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구문에 대 한는 `InStrRev` 함수에 대 한 구문 동일 하지 않습니다는 `InStr` 함수입니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|`Binary`|이진 비교를 수행 합니다.|  
|`Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `InStrRev` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 간의 패리티는 `Join` 및 `Split` 함수입니다. `Join` 함수는 문자열의 배열을 사용 하 고 단일 문자열을 반환 하는 구분 기호 문자열을 사용 하 여 연결 합니다. `Split` 함수는 문자열을 구분 기호로 구분 하는 문자열의 배열을 반환 합니다. 그러나 주요 차이점은 `Join` 모든 구분 기호 문자열로 문자열을 연결할 수 `Split` 단일 문자 구분 기호를 사용 하 여 문자열을 구분할 수만 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 `Join` 여러 문자열의 목록을 만드는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 간의 패리티는 `Join` 및 `Split` 함수입니다. `Join` 함수는 문자열의 배열을 사용 하 고 단일 문자열을 반환 하는 구분 기호 문자열을 사용 하 여 연결 합니다. `Split` 함수는 문자열을 구분 기호로 구분 하는 문자열의 배열을 반환 합니다. 그러나 주요 차이점은 `Join` 모든 구분 기호 문자열로 문자열을 연결할 수 `Split` 단일 문자 구분 기호를 사용 하 여 문자열을 구분할 수만 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 `Join` 여러 문자열의 목록을 만드는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character converted to lowercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대 문자만 변환할지를 소문자로 모든 소문자와 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경이 응용 프로그램이 사용 되는 로캘에 대 한 적절 한 있도록 문자열을 조작할 때 응용 프로그램의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  응용 프로그램에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야는 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드와 패스 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 참조 [어떻게 Culture에 영향을 줍니다 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `LCase` 함수는 문자열의 소문자 버전을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대 문자만 변환할지를 소문자로 모든 소문자와 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경이 응용 프로그램이 사용 되는 로캘에 대 한 적절 한 있도록 문자열을 조작할 때 응용 프로그램의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  응용 프로그램에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야는 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드와 패스 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 참조 [어떻게 Culture에 영향을 줍니다 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `LCase` 함수는 문자열의 소문자 버전을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the leftmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다. Windows Forms 응용 프로그램 또는 있는 다른 클래스에서 사용 하는 경우는 `Left` 속성을 정규화 해야 사용 하 여 함수 `Microsoft.VisualBasic.Left`합니다.  
  
> [!NOTE]
>  `LeftB` 함수 이전 버전의 Visual Basic에서 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LeftB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `Left` 의 부분 문자열을 반환 하는 함수는 주어진 `String`합니다. 가 클래스에는 `Left` 속성을 수 있습니다를 정규화 하는 데 필요한는 `Left` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수는 `Len` 함수 크기를 반환 하 여 파일에 쓸 수는 `FilePut` 함수입니다. 경우는 `Object` 포함 한 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 기타 형식을 포함 하 여 파일에 쓸 수는 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때를 바이트 단위로 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다. `Len` 함수는 `VBFixedString` 특성을 제공 되는 경우의 크기를 결정할 때 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수 사용자 정의 데이터 형식의 가변 길이 문자열과 함께 사용 하면 필요한 저장소 바이트의 실제 수를 확인 하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아닌 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `LenB` 더 이상 지원 합니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 장치 개발자 노트  
 `Len` 함수 받아들일지 `String` 및 `Object` 매개 변수로 변수입니다. 경우는 `Object` 포함 한 `String`의 길이 반환 합니다는 `String`합니다. 매개 변수가 NULL 인 경우 `Object` 참조, 함수는 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 된 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a left-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 문자열에 지정된 된 길이 보다 긴 경우 지정된 된 길이에 반환 된 문자열이 줄어듭니다. 지정된 된 문자열에 지정된 된 길이 보다 짧은 경우 적절 한 길이 생성 하는 반환 된 문자열의 오른쪽 끝에 공백이 추가 됩니다.  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `LSet` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `LTrim` 선행 공백을 제거 하는 함수 및 `RTrim` 문자열 변수에서 함수를 후행 공백입니다. 사용 하 여는 `Trim` 후행 공백 모두 제거 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string that contains characters from a specified string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one-based.</param>
        <summary>Returns a string that contains all the characters starting from a specified position in a string.</summary>
        <returns>A string that consists of all the characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.  
  
 Visual Basic에는 `Mid` 함수 및 `Mid` 문. 이러한 요소는 지정된 된 수는 문자열에 있는 문자에 모두 작동 하지만 `Mid` 해당 문자를 반환 하는 함수는 `Mid` 문은 문자를 대체 합니다. 자세한 내용은 참조 [Mid 문](~/docs/visual-basic/language-reference/statements/mid-statement.md)합니다.  
  
> [!NOTE]
>  `MidB` 함수 이전 버전의 Visual Basic에서 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 문자열은 유니코드에서 및 `MidB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 이 예에서 마지막 줄이 오버이 로드를 사용 하 여는 `Mid` 다섯 번째 및 이후의 문자는 문자열에서 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one based.</param>
        <param name="Length">Optional. <see langword="Integer" /> expression. Number of characters to return. If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</param>
        <summary>Returns a string that contains a specified number of characters starting from a specified position in a string.</summary>
        <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.  
  
 Visual Basic에는 `Mid` 함수 및 `Mid` 문. 이러한 요소는 지정된 된 수는 문자열에 있는 문자에 모두 작동 하지만 `Mid` 해당 문자를 반환 하는 함수는 `Mid` 문은 문자를 대체 합니다. 자세한 내용은 참조 [Mid 문](~/docs/visual-basic/language-reference/statements/mid-statement.md)합니다.  
  
> [!NOTE]
>  `MidB` 함수 이전 버전의 Visual Basic에서 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 문자열은 유니코드에서 및 `MidB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 처음 두 `Mid` 이 예제 함수는 지정 된 위치에서 시작 하 여 문자열에서 지정한 개수의 문자를 반환 합니다. (마지막 함수를 보여 줍니다는 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> 오버 로드 하 고만 문자열 추출에 대 한 시작 위치를 지정 합니다.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression containing substring to replace.</param>
        <param name="Find">Required. Substring being searched for.</param>
        <param name="Replacement">Required. Replacement substring.</param>
        <param name="Start">Optional. Position within <c>Expression</c> that starts a substring used for replacement. The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions. If omitted, 1 is assumed.</param>
        <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
        <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
        <returns>
          <see langword="Replace" /> returns the following values.  
  
 <list type="table"><item><term> If  </term><description> Replace returns  </description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length  </term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0  </term><description> Copy of <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값은 `Replace` 함수는 지정 된 위치에서 시작 하는 문자열 `Start` 의 끝에서 종료 하 고는 `Expression` 대체가 수행 된 문자열에 지정 된 대로 `Find` 및 `Replace` 값입니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|`Binary`|이진 비교를 수행|  
|`Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 `Replace` 함수입니다.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the rightmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" />. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다. Windows Form 또는 있는 다른 클래스에서 사용 하는 경우는 `Right` 속성을 정규화 해야 사용 하 여 함수 `Microsoft.VisualBasic.Strings.Right`합니다.  
  
> [!NOTE]
>  `RightB` 함수 이전 버전의 Visual Basic에서 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 응용 프로그램의 문자열을 변환에 주로 사용 됩니다. 유니코드에 있는 모든 현재 Visual Basic 문자열 및 `RightB` 더 이상 지원 합니다.  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `Right` 의 부분 문자열을 반환 하는 함수는 주어진 `String`합니다. 가 클래스에는 `Right` 속성을 수 있습니다를 정규화 하는 데 필요한는 `Right` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a right-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a right-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Source` 보다 긴 `Length`, `RSet` 의 길이 까지만 왼쪽 문자를 배치 `Source`, 반환된 된 문자열에 있습니다. 지정된 된 문자열에 지정된 된 길이 보다 짧은 경우 적절 한 길이 생성 하는 문자열의 왼쪽된 끝에 공백이 추가 됩니다. 지정된 된 문자열에 지정된 된 길이 보다 긴 경우 지정된 된 길이에 줄어듭니다.  
  
   
  
## Examples  
 사용을 보여 주는이 예제는 `RSet` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `LTrim` 선행 공백을 제거 하는 함수 및 `RTrim` 문자열 변수에서 함수를 후행 공백입니다. 사용 하 여는 `Trim` 후행 공백 모두 제거 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The number of spaces you want in the string.</param>
        <summary>Returns a string consisting of the specified number of spaces.</summary>
        <returns>Returns a string consisting of the specified number of spaces.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` 함수는 출력 서식을 지정 하 고 고정 길이 문자열에서 데이터를 지울 때 유용 합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `Space` 함수는 지정 된 수 만큼의 공백으로 구성 된 문자열을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="String" /> expression containing substrings and delimiters.</param>
        <param name="Delimiter">Optional. Any single character used to identify substring limits. If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</param>
        <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</param>
        <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
        <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
        <returns>
          <see langword="String" /> array. If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 또는 때 `Limit` 가-1 이면는 `Split` 함수는 구분 기호 문자열의 모든 위치에서 입력된 문자열을 분할 하 고 배열에 하위 문자열을 반환 합니다. 경우는 `Limit` 매개 변수는 0 보다 큰는 `Split` 함수는 첫 번째에서 문자열을 분할 `Limit`-1 개, 구분 기호 결과 하위 문자열과 함께 배열을 반환 합니다. 예를 들어 `Split("a:b:c", ":")` 배열을 반환 `{"a", "b", "c"}`, 동안 `Split("a:b:c", ":", 2)` 배열을 반환 `{"a", "b:c"}`합니다.  
  
 경우는 `Split` 함수 발생 한 행의 두 구분 기호 또는 부분이 나 문자열의 끝 부분에 대 한 구분 기호, 빈 문자열을 둘러싸는 해석 (""). 예를 들어 `Split("xx", "x")` 3 개의 빈 문자열이 포함 된 배열을 반환: 사이 있는 문자열의 시작과 "x", "x" 문자열을 두 개의 첫 번째 및 마지막 "x"와 문자열의 끝 사이 있는 합니다.  
  
 이 표에서 방법을 선택적 `Delimiter`, `Limit`, 및 `Compare` 매개 변수는의 동작을 변경할 수는 `Split` 함수입니다.  
  
|분할 호출|반환 값|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice와 Bob"을 (를)|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"을 (를)|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"을 (를)|  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|값|  
|-|-|-|  
|`CompareMethod.Binary`|이진 비교를 수행|0|  
|`CompareMethod.Text`|텍스트 비교를 수행합니다.|1|  
  
   
  
## Examples  
 다음 예제에서는 문자열에서 해당 공간 분할 하는 방법을 보여 줍니다.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 다음 예제에서는 행에 여러 개의 구분 기호를 사용 하 여 문자열을 분할 하 고 빈 문자열을 필터링 하는 방법을 보여 줍니다.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. Any valid <see langword="String" /> expression.</param>
        <param name="String2">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns -1, 0, or 1, based on the result of a string comparison.</summary>
        <returns>The <see langword="StrComp" /> function has the following return values.  
  
 <list type="table"><item><term> If  </term><description> StrComp returns  </description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1  </description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0  </description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열의 첫 번째 문자로 시작 하는 영숫자 정렬 값으로 비교 됩니다. 이진 비교, 텍스트 비교 및 정렬 순서 대 한 자세한 내용은 참조 하십시오. [옵션 비교 문](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)합니다.  
  
 `Compare` 인수 설정은 다음과 같습니다.  
  
|상수|설명|  
|-|-|  
|`Binary`|문자의 내부 이진 표현에서 파생 된 정렬 순서에 따라 이진 비교를 수행 합니다.|  
|`Text`|시스템의 지정 된 대/소문자 구분 텍스트 정렬 순서에 따라 텍스트 비교를 수행 `LocaleID` 값입니다.|  
  
   
  
## Examples  
 사용 하 여이 예제는 `StrComp` 문자열 비교 작업의 결과 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> value is not valid.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression to be converted.</param>
        <param name="Conversion">Required. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member. The enumeration value specifying the type of conversion to perform.</param>
        <param name="LocaleID">Optional. The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value. (The system <see langword="LocaleID" /> value is the default.)</param>
        <summary>Returns a string converted as specified.</summary>
        <returns>Returns a string converted as specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상수 `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, 및 `VbStrConv.Hiragana` 에 적용 되지 않으므로, 로캘에서 사용 하는 경우 런타임 오류가 발생할 수 있습니다 항상 그렇지는 않지만: 상수 `VbStrConv.Katakana` 및 `VbStrConv.Hiragana`일본어 언어 팩이 설치 된 일본어가 아닌 시스템에서 사용할 수 있습니다. 또한 상수 중 사용할 `VbStrConv.Wide` 및 `VbStrConv.Narrow` 동아시아 언어로 설치 된 모든 시스템에서 지원 됩니다.  
  
 이 함수는 대/소문자 변경이 응용 프로그램이 사용 되는 로캘에 대 한 적절 한 있도록 문자열을 조작할 때 응용 프로그램의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  응용 프로그램에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야는 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드와 패스 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 참조 [어떻게 Culture에 영향을 줍니다 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
 `Conversion` 인수 설정은 다음과 같습니다.  
  
|열거형 멤버|설명|  
|-|-|  
|`VbStrConv.None`|변환을 수행 하지 않습니다.|  
|`VbStrConv.LinguisticCasing`|파일 시스템 (기본값) 보다는 대/소문자에 대 한 언어 규칙을 사용 합니다. 사용 하 여 유효 `VbStrConv.UpperCase` 및 `VbStrConv.LowerCase` 만 합니다.|  
|`VbStrConv.UpperCase`|지정된 문자열을 대문자로 변환합니다.|  
|`VbStrConv.LowerCase`|문자열을 소문자로 변환합니다.|  
|`VbStrConv.ProperCase`|문자열을 대문자로에서 모든 단어의 첫 번째 문자를 변환 합니다.|  
|`VbStrConv.Wide` <sup>*</sup>|좁은 문자열을 와이드 (전자) 문자 (반자) 문자를로 변환 합니다. [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|좁은 문자 (반자) 문자열 (전자) 와이드 문자로 변환 합니다.|  
|`VbStrConv.Katakana` <sup>**</sup>|문자열의 히라가나 문자를 가타카나 문자로 변환합니다.|  
|`VbStrConv.Hiragana` <sup>**</sup>|문자열의 가타카나 문자를 히라가나 문자로 변환합니다.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|중국어 번체 문자를 간체로 변환합니다.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|중국어 간체 문자를 번체로 변환 합니다.|  
  
 <sup>*</sup> 아시아 언어 로캘을에 적용 됩니다.  
  
 <sup>**</sup> 일본에만 적용 합니다.  
  
> [!NOTE]
>  이러한 상수는.NET Framework 공용 언어 런타임에서 지정 됩니다. 결과적으로, 있습니다 사용할 수 아무 곳 이나 코드에서 실제 값 대신 합니다. 대부분을 결합할 수 있습니다 (예를 들어 `UpperCase + Wide`)를 함께 사용할 수 없는 경우는 제외 하 고 (예를 들어 `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 다음은 적절 한 대/소문자 구분에 대 한 유효한 단어 구분 기호: Null (`Chr$(0)`), 가로 탭 (`Chr$(9)`), 줄 바꿈 (`Chr$(10)`), 세로 탭 (`Chr$(11)`), 폼 피드 (`Chr$(12)`), 캐리지 리턴 (`Chr$(13)`), (공간 단일 바이트 문자 집합) (`Chr$(32)`). 전체 또는 반자 수 있는 공간에 대 한 실제 값 동아시아 문화권에 대 한 국가/지역에 따라 다릅니다.  
  
   
  
## Examples  
 이 예제는 텍스트를 모두 소문자로 변환합니다.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 함수는 반환 된 `String` 반복 되는 문자로 이루어진 합니다. 문자열을 구성 하는 문자는에 있는 첫 번째 문자는 `Character` 인수에 중복 되 `Number` 번입니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `StrDup` 의 문자열을 반환 하는 함수 중복 문자입니다.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 함수는 반환 된 `String` 반복 되는 문자로 이루어진 합니다. 문자열을 구성 하는 문자는에 있는 첫 번째 문자는 `Character` 인수에 중복 되 `Number` 번입니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `StrDup` 의 문자열을 반환 하는 함수 중복 문자입니다.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 함수는 반환 된 `String` 반복 되는 문자로 이루어진 합니다. 문자열을 구성 하는 문자는에 있는 첫 번째 문자는 `Character` 인수에 중복 되 `Number` 번입니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `StrDup` 의 문자열을 반환 하는 함수 중복 문자입니다.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression whose characters are to be reversed. If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</param>
        <summary>Returns a string in which the character order of a specified string is reversed.</summary>
        <returns>Returns a string in which the character order of a specified string is reversed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` 동일한 문자가 포함 된 문자열을 반환 하는 함수 `Expression`, 하지만 그 반대 방향입니다.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `LTrim` 선행 공백을 제거 하는 함수 및 `RTrim` 문자열 변수에서 함수를 후행 공백입니다. 사용 하 여는 `Trim` 후행 공백 모두 제거 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소문자만 변환할지를 대문자로; 모든 대문자 및 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경이 응용 프로그램이 사용 되는 로캘에 대 한 적절 한 있도록 문자열을 조작할 때 응용 프로그램의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  응용 프로그램에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야는 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드와 패스 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 참조 [어떻게 Culture에 영향을 줍니다 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `UCase` 함수는 문자열의 대문자 버전을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소문자만 변환할지를 대문자로; 모든 대문자 및 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경이 응용 프로그램이 사용 되는 로캘에 대 한 적절 한 있도록 문자열을 조작할 때 응용 프로그램의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  응용 프로그램에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야는 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드와 패스 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 참조 [어떻게 Culture에 영향을 줍니다 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `UCase` 함수는 문자열의 대문자 버전을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>