<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="28818091bfa2bd27afdc2ecfcceb158714c2dc63" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9170c-101">Visual Basic <see langword="Collection" />은 하나의 단위로 참조할 수 있는 정렬된 항목 집합입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9170c-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9170c-102">제네릭 컬렉션을 사용 해야 가능 하면 항상는 <xref:System.Collections.Generic?displayProperty=nameWithType> 네임 스페이스 또는 <xref:System.Collections.Concurrent> Visual Basic 대신 네임 스페이스 `Collection`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="9170c-103">자세한 내용은 참조 [컬렉션](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-103">For more information, see [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="9170c-104">Visual Basic `Collection` 개체를 단일 개체로 관련된 그룹 항목을 참조 하는 편리한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="9170c-105">항목을 또는 *요소*의 컬렉션을 컬렉션에 존재 한다는 점에서 관련만 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="9170c-106">컬렉션의 요소는 동일한 데이터 형식을 공유할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="9170c-107">다음 예제와 같이 다른 개체를 만들면 동일한 방식으로 컬렉션을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="9170c-108">컬렉션을 만든 후 다음 중 하나를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="9170c-109">요소를 추가 <xref:Microsoft.VisualBasic.Collection.Add%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9170c-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="9170c-110">요소를 제거는 <xref:Microsoft.VisualBasic.Collection.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9170c-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="9170c-111">모든 요소를 제거는 <xref:Microsoft.VisualBasic.Collection.Clear%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9170c-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="9170c-112">컬렉션에 포함 된 요소 수에 대해 알아봅니다는 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="9170c-113">특정 요소와 있는지 여부를 확인는 <xref:Microsoft.VisualBasic.Collection.Contains%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9170c-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="9170c-114">특정 요소를 사용 하 여 컬렉션에서 반환 된 <xref:Microsoft.VisualBasic.Collection.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="9170c-115">사용 하 여 전체 컬렉션에서 반복 된 [각각에 대해... 다음 문](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9170c-116">하지만 Visual Basic `Collection` 개체와 동일한 기능에는 `Collection` 개체 Visual Basic 6.0에서 COM 환경에서 두 개의 상호 작용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="9170c-117">Visual Basic 반복 `Collection` 은 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="9170c-118">컬렉션을 동기화 하는 경우에 다른 스레드에서 예외를 throw 하면 열거자는 컬렉션을 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="9170c-119">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 컬렉션을 잠글 또는 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="9170c-120">프로그래밍 요소 잠금에 대 한 자세한 내용은 참조 하십시오. [SyncLock 문](~/docs/visual-basic/language-reference/statements/synclock-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-121">다음 예제에서는 `Collection` 개체 `names` 및 대화 상자는 사용자 개체 (이름) 컬렉션에 추가할 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="9170c-122">다음 해당 컬렉션의 이름을 표시 하 고 마지막으로 삭제 하지 않고 컬렉션을 비웁니다는 `Collection` 개체 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="9170c-123">이 과정을 보려면 선택는 **클래스 추가** 명령을 **프로젝트** 메뉴 이라는 공용 변수를 선언 하 고 `instanceName` 의 모듈 수준에서 `nameClass` (형식 `Public instanceName`) 저장할 수 각 인스턴스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="9170c-124">기본 이름으로 `nameClass`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="9170c-125">복사 및 붙여넣기에 다음 코드는 **일반** 다른 모듈의 다음 문을 사용 하 여 시작 `classNamer` 다른 프로시저에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="9170c-126">(이 예제에서는 클래스를 지 원하는 응용 프로그램을 호스트 에서만 실행 됩니다.)</span><span class="sxs-lookup"><span data-stu-id="9170c-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9170c-127">새 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] <see cref="T:Microsoft.VisualBasic.Collection" /> 개체를 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-127">Creates and returns a new [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-128">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] 이 생성자에 의해 반환 된 컬렉션 비어 있고 초기 용량이 할당 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-128">The [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]<span data-ttu-id="9170c-129"> 컬렉션와 호환 되지 않습니다.는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 컬렉션에서 사용할 수는 <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, 및 <xref:System.Collections.Specialized?displayProperty=nameWithType> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-129"> collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-130">다음 예제에서는 새 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] 컬렉션을 변수에 할당 하 고 `coll`:</span><span class="sxs-lookup"><span data-stu-id="9170c-130">The following example creates a new [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] collection and assigns it to the variable `coll`:</span></span>  
  
```  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="9170c-131">이 `Collection` 개체는 1부터 즉, 1의 값을 통해 시작의 인덱스 값은 `Count` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]<span data-ttu-id="9170c-132"> 컬렉션 형식의 요소만 포함 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-132"> collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item">
          <span data-ttu-id="9170c-133">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-133">Required.</span>
          </span>
          <span data-ttu-id="9170c-134">컬렉션에 추가할 요소를 지정하는 형식의 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-134">An object of any type that specifies the element to add to the collection.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="9170c-135">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-135">Optional.</span>
          </span>
          <span data-ttu-id="9170c-136">위치 인덱스 대신 컬렉션의 이 새 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span>
          </span>
        </param>
        <param name="Before">
          <span data-ttu-id="9170c-137">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-137">Optional.</span>
          </span>
          <span data-ttu-id="9170c-138">컬렉션에서 상대적 위치를 지정하는 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-138">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="9170c-139">컬렉션에서 추가되는 요소는 <c>Before</c> 인수에 의해 식별되는 요소 앞에 옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-139">The element to be added is placed in the collection before the element identified by the <c>Before</c> argument.</span>
          </span>
          <span data-ttu-id="9170c-140">
            <c>Before</c>가 숫자 식인 경우 이 인수는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-140">If <c>Before</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="9170c-141">
            <c>Before</c>가 <see langword="String" /> 식인 경우 이 인수는 참조되는 요소가 컬렉션에 추가될 때 지정한 키 문자열과 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-141">If <c>Before</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="9170c-142">
            <c>Before</c>와 <c>After</c>를 둘 다 지정할 수는 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-142">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <param name="After">
          <span data-ttu-id="9170c-143">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-143">Optional.</span>
          </span>
          <span data-ttu-id="9170c-144">컬렉션에서 상대적 위치를 지정하는 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-144">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="9170c-145">컬렉션에서 추가되는 요소는 <c>After</c> 인수에 의해 식별되는 요소 뒤에 옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-145">The element to be added is placed in the collection after the element identified by the <c>After</c> argument.</span>
          </span>
          <span data-ttu-id="9170c-146">
            <c>After</c>가 숫자 식인 경우 이 인수는 1에서 컬렉션의 <see langword="Count" /> 속성 값 사이의 숫자여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-146">If <c>After</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span>
          </span>
          <span data-ttu-id="9170c-147">
            <c>After</c>가 <see langword="String" /> 식인 경우 이 인수는 참조되는 요소가 컬렉션에 추가될 때 지정한 키 문자열과 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-147">If <c>After</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="9170c-148">
            <c>Before</c>와 <c>After</c>를 둘 다 지정할 수는 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-148">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-149">
            <see langword="Collection" /> 개체에 요소를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-149">Adds an element to a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-150">`Before` 또는 `After` 인수 컬렉션의 기존 요소를 참조 해야, 그렇지 않으면, 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="9170c-151">모두는 `Before` 및 `After` 인수가 생략 되는 새 개체가 컬렉션의 끝에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="9170c-152">지정 된 경우에 오류가 발생 `Key` 컬렉션의 기존 요소에 대 한 키와 일치 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-153">다음 예제에서는 `Add` 메서드를 추가 하려면 `child` 개체-클래스의 인스턴스 라는 `child` 포함 하는 `Public` 속성 `name` -라는 컬렉션에 `family`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-153">The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`.</span></span> <span data-ttu-id="9170c-154">이 과정을 보려면 만들기는 <xref:System.Windows.Forms.Form> 두 개의 <xref:System.Windows.Forms.Button> 컨트롤 집합과 해당 <xref:System.Windows.Forms.Control.Text%2A> 속성을 `Add` 및 `List`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="9170c-155">추가 `child` 클래스 정의 및 `family` 폼 코드에 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="9170c-156">수정 된 `_Click` 에 대 한 이벤트 처리기는 **추가** 및 **목록** 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="9170c-157">**추가** 단추 하위 항목을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="9170c-158">**목록** 단추 모든 자식 항목의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9170c-159">Visual Basic <see langword="Collection" /> 개체의 모든 요소를 삭제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-160">`Clear` 메서드는 컬렉션을 비우고 다시 설정 해당 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성을 0입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="9170c-161">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-161">Required.</span>
          </span>
          <span data-ttu-id="9170c-162">컬렉션 요소를 검색할 키를 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-163">Visual Basic <see langword="Boolean" /> 개체에 특정 키를 가진 요소가 포함되어 있는지 여부를 나타내는 <see langword="Collection" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-163">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9170c-164">Visual Basic <see langword="Boolean" /> 개체에 특정 키를 가진 요소가 포함되어 있는지 여부를 나타내는 <see langword="Collection" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-164">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-165">`Contains` 반환 `True` 컬렉션 정확 하 게 일치 하는 키가 있는 요소가 들어 있으면 `Key`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="9170c-166">그렇지 않으면 `Contains` 반환 `False`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="9170c-167">키 값 비교 시 대/소문자는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="9170c-168">Visual Basic `Collection` 일부 키가 있는 요소 및 키가 없는 기타 요소를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="9170c-169">여부에 따라 다릅니다에 대 한 호출에서 <xref:Microsoft.VisualBasic.Collection.Add%2A> 메서드를 제공 하면 선택적 인수 `Key` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="9170c-170">컬렉션에서 해당 키를 사용 하 여 요소에 대 한 검색 하려는 경우를 제공 해야는 `Key` 를 호출할 때마다 인수는 `Add` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9170c-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9170c-171">컬렉션의 요소 수를 포함하는 <see langword="Integer" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-171">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="9170c-172">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-172">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9170c-173">컬렉션의 요소 수를 포함하는 <see langword="Integer" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-173">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="9170c-174">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-174">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-175">사용 하 여는 `Count` 속성에 있는 요소의 수를 확인 하는 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-175">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-176">이 예제에서는 `Count` 속성에 있는 요소의 수를 표시 하는 <xref:Microsoft.VisualBasic.Collection> 변수에 개체 `birthdays`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-176">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9170c-177">`Collection` 개체는 1부터 즉, 1의 값을 통해 시작의 인덱스 값은 `Count` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-177">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9170c-178">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체를 반복하는 데 사용하는 열거자 개체에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-178">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9170c-179">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체를 반복하는 데 사용하는 열거자 개체에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-179">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-180">[각각에 대해... 다음 문](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) 호출 `GetEnumerator` 컬렉션의 요소를 반복 하는 열거자 개체를 가져와야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-180">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="9170c-181">일반적으로 `For Each`... `Next` 컬렉션이 나 배열의 이동 하 고 호출할 필요가 없습니다 `GetEnumerator` 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-181">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="9170c-182">반복 보다 자세히 제어 해야 할 경우는 `For Each`... `Next` 명령문을 사용할 수 있습니다는 `GetEnumerator` 메서드를 사용자 지정된 탐색을 수행 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-182">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="9170c-183">일부 경우가 작업을 수행 해야 하는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-183">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="9170c-184">컬렉션의 시작 부분에 반환 하 고 완료 되기 전에 탐색을 다시 시작을 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-184">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="9170c-185">다양 한 이유 때문에 대 한 하나 이상의 요소를 건너뛰도록 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-185">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="9170c-186">탐색 도중에 컬렉션의 요소를 변경 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-186">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="9170c-187">이 경우 얻어야 새 열거자 개체의 관계를 이전 무효화 되므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-187">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-188">다음 예제에서는 사용 하는 방법을 보여 줍니다. `GetEnumerator` 의 모든 요소를 검색 한 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-188">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="9170c-189">`GetEnumerator` 생성 하 고 구현 하는 열거자 개체를 반환 된 <xref:System.Collections.IEnumerator> 의 인터페이스는 <xref:System.Collections> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-189">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="9170c-190">열거자 개체는 <xref:System.Collections.IEnumerator.Current%2A> 속성 및 <xref:System.Collections.IEnumerator.MoveNext%2A> 및 <xref:System.Collections.IEnumerator.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9170c-190">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="9170c-191">자세한 내용은 참조 [각각에 대해... 다음 문](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-191">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9170c-192">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-192">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-193">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-193">Read-only.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="9170c-194">(A) 컬렉션 요소의 위치를 지정하는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-194">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="9170c-195">
            <c>Index</c>는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-195">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="9170c-196">또는 (B) 컬렉션 요소의 키 문자열이나 위치를 지정하는 <see langword="Object" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-196">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-197">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-197">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-198">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-198">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9170c-199">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-199">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-200">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-200">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-201">경우 `Index` 유형의 `Object`, `Item` 속성으로 처리 하도록 시도 `String`, `Char`, `Char` 배열 또는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-201">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="9170c-202">경우 `Item` 변환할 수 없습니다 `Index` 를 `String` 또는 `Integer`, throw는 <xref:System.ArgumentException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-202">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="9170c-203">`Item` 속성은 컬렉션에 대 한 기본 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-203">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="9170c-204">따라서 다음 코드 줄 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-204">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="9170c-205">다음 예제에서는 `Item` 컬렉션의 개체에 대 한 참조를 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-205">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="9170c-206">만들 `birthdays` 로 `Collection` 개체와 키를 사용 하 여 청구서의 생일을 나타내는 개체를 검색 합니다 `"Bill"` 로 `Index` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-206">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="9170c-207">첫 번째 호출에서 명시적으로 지정 된 `Item` 속성이 아니라 두 번째는 그렇지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-207">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="9170c-208">두 호출이 작동 하기 때문에 `Item` 속성에 대 한 기본 속성은 한 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-208">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="9170c-209">(A) 컬렉션 요소의 위치를 지정하는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-209">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="9170c-210">
            <c>Index</c>는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-210">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="9170c-211">또는 (B) 컬렉션 요소의 키 문자열이나 위치를 지정하는 <see langword="Object" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-211">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-212">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-212">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-213">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-213">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9170c-214">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-214">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-215">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-215">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-216">경우 `Index` 유형의 `Object`, `Item` 속성으로 처리 하도록 시도 `String`, `Char`, `Char` 배열 또는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-216">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="9170c-217">경우 `Item` 변환할 수 없습니다 `Index` 를 `String` 또는 `Integer`, throw는 <xref:System.ArgumentException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-217">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="9170c-218">`Item` 속성은 컬렉션에 대 한 기본 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-218">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="9170c-219">따라서 다음 코드 줄 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-219">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="9170c-220">다음 예제에서는 `Item` 컬렉션의 개체에 대 한 참조를 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-220">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="9170c-221">만들 `birthdays` 로 `Collection` 개체와 키를 사용 하 여 청구서의 생일을 나타내는 개체를 검색 합니다 `"Bill"` 로 `Index` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-221">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="9170c-222">첫 번째 호출에서 명시적으로 지정 된 `Item` 속성이 아니라 두 번째는 그렇지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-222">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="9170c-223">두 호출이 작동 하기 때문에 `Item` 속성에 대 한 기본 속성은 한 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-223">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="9170c-224">위치 인덱스 대신 컬렉션의 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-224">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="9170c-225">
            <c>Key</c>는 요소가 컬렉션에 추가될 때 지정한 <c>Key</c> 인수와 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-225">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-226">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-226">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-227">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-227">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9170c-228">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-228">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="9170c-229">읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-229">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-230">경우 `Index` 유형의 `Object`, `Item` 속성으로 처리 하도록 시도 `String`, `Char`, `Char` 배열 또는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-230">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="9170c-231">경우 `Item` 변환할 수 없습니다 `Index` 를 `String` 또는 `Integer`, throw는 <xref:System.ArgumentException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-231">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="9170c-232">`Item` 속성은 컬렉션에 대 한 기본 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-232">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="9170c-233">따라서 다음 코드 줄 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-233">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="9170c-234">다음 예제에서는 `Item` 컬렉션의 개체에 대 한 참조를 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-234">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="9170c-235">만들 `birthdays` 로 `Collection` 개체와 키를 사용 하 여 청구서의 생일을 나타내는 개체를 검색 합니다 `"Bill"` 로 `Index` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-235">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="9170c-236">첫 번째 호출에서 명시적으로 지정 된 `Item` 속성이 아니라 두 번째는 그렇지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-236">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="9170c-237">두 호출이 작동 하기 때문에 `Item` 속성에 대 한 기본 속성은 한 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-237">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9170c-238">
            <see langword="Collection" /> 개체에서 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-238">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="9170c-239">컬렉션 요소의 위치를 지정하는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-239">A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="9170c-240">
            <c>Index</c>는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-240">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-241">
            <see langword="Collection" /> 개체에서 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-241">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-242">때 `Remove` 컬렉션에서 요소를 삭제 하기 감소 컬렉션의 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성을 1.</span><span class="sxs-lookup"><span data-stu-id="9170c-242">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="9170c-243">것도 감소는 `Index` 컬렉션에서 삭제 된 요소 다음에 있던 모든 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-243">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="9170c-244">요소가 컬렉션에 추가 된 경우는 `Key`, 사용 해야 해당 `Index` 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-244">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-245">이 예제에서는 사용 된 `Remove` 에서 개체를 제거 하는 메서드는 <xref:Microsoft.VisualBasic.Collection> 변수에 개체 `birthdays`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-245">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="9170c-246">네 번 호출 하는 `Add` 메서드는 `Count` 속성 4가 포함 되어 요소 `"Bill"` 인덱스 값 1, 및 요소 `"Pete"` 인덱스 값은 4입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-246">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="9170c-247">호출 하면 첫 번째 `Remove`, `Count` 는 3 요소 `"Bill"` 삭제 되 면 및 요소 `"Pete"` 인덱스 값 3입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-247">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="9170c-248">호출 하면 두 번째 `Remove`, `Count` 가 2 인 요소 `"Mike"` 삭제 되 면 및 요소 `"Pete"` 인덱스 값은 2입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-248">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="9170c-249">위치 인덱스 대신 컬렉션의 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-249">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="9170c-250">
            <c>Key</c>는 요소가 컬렉션에 추가될 때 지정한 <c>Key</c> 인수와 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-250">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-251">
            <see langword="Collection" /> 개체에서 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-251">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-252">때 `Remove` 컬렉션에서 요소를 삭제 하기 감소 컬렉션의 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성을 1.</span><span class="sxs-lookup"><span data-stu-id="9170c-252">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="9170c-253">것도 감소는 `Index` 컬렉션에서 삭제 된 요소 다음에 있던 모든 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-253">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="9170c-254">요소가 컬렉션에 추가 된 경우는 `Key`, 사용 해야 해당 `Index` 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-254">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9170c-255">이 예제에서는 사용 된 `Remove` 에서 개체를 제거 하는 메서드는 <xref:Microsoft.VisualBasic.Collection> 변수에 개체 `birthdays`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-255">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="9170c-256">네 번 호출 하는 `Add` 메서드는 `Count` 속성 4가 포함 되어 요소 `"Bill"` 인덱스 값 1, 및 요소 `"Pete"` 인덱스 값은 4입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-256">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="9170c-257">호출 하면 첫 번째 `Remove`, `Count` 는 3 요소 `"Bill"` 삭제 되 면 및 요소 `"Pete"` 인덱스 값 3입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-257">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="9170c-258">호출 하면 두 번째 `Remove`, `Count` 가 2 인 요소 `"Mike"` 삭제 되 면 및 요소 `"Pete"` 인덱스 값은 2입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-258">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="9170c-259">
            <see cref="T:System.Array" /> 개체에서 복사되는 요소의 대상인 1차원 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-259">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="9170c-260">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-260">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="9170c-261">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-261">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-262">특정 <see cref="T:Microsoft.VisualBasic.Collection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-262">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
          <span data-ttu-id="9170c-263">
            <see cref="T:System.Collections.ICollection" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-263">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-264">요소에 복사 됩니다는 <xref:System.Array> 순서는 열거자를 통해 반복 하는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-264">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="9170c-265">이 메서드는 O는 (`n`) 작업, 여기서 `n` 에서 가져온는 <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-265">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9170c-266">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-266">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9170c-267">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-267">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9170c-268">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-268">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9170c-269">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-269">-or-</span>
          </span>
          <span data-ttu-id="9170c-270">소스 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-270">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="9170c-271">소스 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 형식이 대상 <paramref name="array" />의 형식으로 자동 캐스팅될 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-271">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9170c-272">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-272">Returns an enumerator that iterates through the collection.</span>
          </span>
          <span data-ttu-id="9170c-273">
            <see cref="T:System.Collections.ICollection" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-273">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9170c-274">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-274">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-275">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="9170c-275">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="9170c-276">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-276">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="9170c-277">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-277">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="9170c-278">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-278">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="9170c-279">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-279">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="9170c-280"><xref:System.Collections.IEnumerator.Reset%2A> 메서드도 실행 하면 열거자가이 위치로 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-280">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="9170c-281">이 위치에서의 <xref:System.Collections.IEnumerator.Current%2A> 속성이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-281">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="9170c-282">따라서 호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.IEnumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-282">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="9170c-283"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-283"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="9170c-284"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-284"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="9170c-285">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-285">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="9170c-286">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-286">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="9170c-287">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-287">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="9170c-288"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-288">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="9170c-289">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-289">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="9170c-290">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-290">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="9170c-291">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-291">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="9170c-292">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-292">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="9170c-293">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-293">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9170c-294">
            <see cref="T:System.Object" />에 추가할 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-294">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-295">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 항목을 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-295">Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="9170c-296">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-296">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9170c-297">새 요소가 삽입된 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-297">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-298">사용할 수도 있습니다는 <xref:Microsoft.VisualBasic.Collection.Item%2A> 에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-298">You can also use the <xref:Microsoft.VisualBasic.Collection.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9170c-299">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-299">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="9170c-300">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-300">-or-</span>
          </span>
          <span data-ttu-id="9170c-301">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-301">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9170c-302">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에서 항목을 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-302">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="9170c-303">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-303">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-304">모든 항목을 제거 하는이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-304">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9170c-305">
            <see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-305">The <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9170c-306">
            <see cref="T:System.Object" /> 개체에서 찾을 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-306">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-307">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 특정 값이 들어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-307">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span>
          </span>
          <span data-ttu-id="9170c-308">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-308">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9170c-309">
            <see cref="T:System.Object" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 있으면 <see langword="True" />를 반환하고, 그렇지 않으면 <see langword="False" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-309">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-310">이 메서드는 확인 여부는 <xref:Microsoft.VisualBasic.Collection> 특정 값을 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-310">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9170c-311">
            <see cref="T:System.Object" /> 개체에서 찾을 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-311">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-312">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에서 특정 항목의 인덱스를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-312">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="9170c-313">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-313">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9170c-314">컬렉션에 <paramref name="value" />가 있으면 해당 값의 인덱스이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-314">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-315">특정 항목의 인덱스를 결정 하는이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-315">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9170c-316">
            <c>value</c>를 삽입할 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-316">The zero-based index at which <c>value</c> should be inserted.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9170c-317">
            <see cref="T:System.Object" /> 개체에 삽입할 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-317">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-318">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 지정한 인덱스에 항목을 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-318">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span>
          </span>
          <span data-ttu-id="9170c-319">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-319">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-320">경우 `index` 에 있는 항목의 수와 일치는 <xref:Microsoft.VisualBasic.Collection> 개체 `value` 끝에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-320">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="9170c-321">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-321">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="9170c-322">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-322">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="9170c-323">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-323">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9170c-324">
            <paramref name="index" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-324">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9170c-325">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-325">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="9170c-326">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-326">-or-</span>
          </span>
          <span data-ttu-id="9170c-327">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="9170c-328">
            <paramref name="value" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 null 참조인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-328">
              <paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9170c-329">
            <see cref="T:System.Object" /> 개체에서 제거할 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-329">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-330">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에서 특정 개체가 처음 나타나는 부분을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-330">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="9170c-331">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-331">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-332">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="9170c-333">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="9170c-334">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="9170c-335">경우 `value` 를 찾을 수 없습니다는 <xref:Microsoft.VisualBasic.Collection> 개체는 <xref:Microsoft.VisualBasic.Collection> 개체 그대로 유지 하 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-335">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9170c-336">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="9170c-337">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-337">-or-</span>
          </span>
          <span data-ttu-id="9170c-338">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9170c-339">제거할 항목의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-339">The zero-based index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-340">지정한 인덱스에 있는 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체 항목을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-340">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span>
          </span>
          <span data-ttu-id="9170c-341">
            <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-341">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-342">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-342">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="9170c-343">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-343">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="9170c-344">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-344">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9170c-345">
            <paramref name="index" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-345">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9170c-346">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-346">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="9170c-347">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-347">-or-</span>
          </span>
          <span data-ttu-id="9170c-348">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-348">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="9170c-349">콜백을 시작한 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-349">The object that initiated the callback.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-350">전체 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체 그래프가 deserialize된 후 실행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-350">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span>
          </span>
          <span data-ttu-id="9170c-351">
            <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-351">Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-352">전체 후이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체 그래프가 deserialize 합니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-352">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="9170c-353">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-353">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="9170c-354">
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체와 관련된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-354">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9170c-355">
            <see cref="T:Microsoft.VisualBasic.Collection" /> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-355">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="9170c-356">
            <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9170c-356">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9170c-357">직렬화 하는 데 필요한 데이터를 반환 하는이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9170c-357">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>