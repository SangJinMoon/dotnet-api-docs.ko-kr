<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Collection.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac528818091bfa2bd27afdc2ecfcceb158714c2dc63.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28818091bfa2bd27afdc2ecfcceb158714c2dc63</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>A Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> is an ordered set of items that can be referred to as a unit.</source>
          <target state="translated">Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>은 하나의 단위로 참조할 수 있는 정렬된 항목 집합입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of a Visual Basic <ph id="ph3">`Collection`</ph>.</source>
          <target state="translated">제네릭 컬렉션을 사용 해야 가능 하면 항상는 <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 네임 스페이스 또는 <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> Visual Basic 대신 네임 스페이스 <ph id="ph3">`Collection`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>컬렉션<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The Visual Basic <ph id="ph1">`Collection`</ph> object provides a convenient way to refer to a related group of items as a single object.</source>
          <target state="translated">Visual Basic <ph id="ph1">`Collection`</ph> 개체를 단일 개체로 관련된 그룹 항목을 참조 하는 편리한 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The items, or <bpt id="p1">*</bpt>elements<ept id="p1">*</ept>, in a collection need only be related by the fact that they exist in the collection.</source>
          <target state="translated">항목을 또는 <bpt id="p1">*</bpt>요소<ept id="p1">*</ept>의 컬렉션을 컬렉션에 존재 한다는 점에서 관련만 필요 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Elements of a collection do not have to share the same data type.</source>
          <target state="translated">컬렉션의 요소는 동일한 데이터 형식을 공유할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>You can create a collection the same way you create other objects, as the following example illustrates.</source>
          <target state="translated">다음 예제와 같이 다른 개체를 만들면 동일한 방식으로 컬렉션을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Once you have created a collection, you can do any of the following:</source>
          <target state="translated">컬렉션을 만든 후 다음 중 하나를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Add an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method.</source>
          <target state="translated">요소를 추가 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> method.</source>
          <target state="translated">요소를 제거는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove all elements with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> method.</source>
          <target state="translated">모든 요소를 제거는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Find out how many elements the collection contains with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property.</source>
          <target state="translated">컬렉션에 포함 된 요소 수에 대해 알아봅니다는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Check whether a specific element is present with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> method.</source>
          <target state="translated">특정 요소와 있는지 여부를 확인는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Return a specific element from the collection with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property.</source>
          <target state="translated">특정 요소를 사용 하 여 컬렉션에서 반환 된 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterate through the entire collection with the <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">사용 하 여 전체 컬렉션에서 반복 된 <bpt id="p1">[</bpt>각각에 대해... 다음 문<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Although the Visual Basic <ph id="ph1">`Collection`</ph> object has functionality identical to the <ph id="ph2">`Collection`</ph> object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</source>
          <target state="translated">하지만 Visual Basic <ph id="ph1">`Collection`</ph> 개체와 동일한 기능에는 <ph id="ph2">`Collection`</ph> 개체 Visual Basic 6.0에서 COM 환경에서 두 개의 상호 작용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterating through a Visual Basic <ph id="ph1">`Collection`</ph> is not a thread-safe procedure.</source>
          <target state="translated">Visual Basic 반복 <ph id="ph1">`Collection`</ph> 은 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</source>
          <target state="translated">컬렉션을 동기화 하는 경우에 다른 스레드에서 예외를 throw 하면 열거자는 컬렉션을 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 컬렉션을 잠글 또는 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information on locking a programming element, see <bpt id="p1">[</bpt>SyncLock Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</source>
          <target state="translated">프로그래밍 요소 잠금에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>SyncLock 문<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The following example creates the <ph id="ph1">`Collection`</ph> object <ph id="ph2">`names`</ph> and a dialog box with which a user can add objects (names) to the collection.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Collection`</ph> 개체 <ph id="ph2">`names`</ph> 및 대화 상자는 사용자 개체 (이름) 컬렉션에 추가할 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>It then displays the names in the collection, and finally empties the collection without disposing of the <ph id="ph1">`Collection`</ph> object itself.</source>
          <target state="translated">다음 해당 컬렉션의 이름을 표시 하 고 마지막으로 삭제 하지 않고 컬렉션을 비웁니다는 <ph id="ph1">`Collection`</ph> 개체 자체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To see how this works, choose the <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu and declare a public variable called <ph id="ph1">`instanceName`</ph> at the module level of <ph id="ph2">`nameClass`</ph> (type <ph id="ph3">`Public instanceName`</ph>) to hold the names of each instance.</source>
          <target state="translated">이 과정을 보려면 선택는 <bpt id="p1">**</bpt>클래스 추가<ept id="p1">**</ept> 명령을 <bpt id="p2">**</bpt>프로젝트<ept id="p2">**</ept> 메뉴 이라는 공용 변수를 선언 하 고 <ph id="ph1">`instanceName`</ph> 의 모듈 수준에서 <ph id="ph2">`nameClass`</ph> (형식 <ph id="ph3">`Public instanceName`</ph>) 저장할 수 각 인스턴스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Leave the default name as <ph id="ph1">`nameClass`</ph>.</source>
          <target state="translated">기본 이름으로 <ph id="ph1">`nameClass`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Copy and paste the following code into the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> section of another module, and then start it with the statement <ph id="ph1">`classNamer`</ph> in another procedure.</source>
          <target state="translated">복사 및 붙여넣기에 다음 코드는 <bpt id="p1">**</bpt>일반<ept id="p1">**</ept> 다른 모듈의 다음 문을 사용 하 여 시작 <ph id="ph1">`classNamer`</ph> 다른 프로시저에서 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>(This example works only with host applications that support classes.)</source>
          <target state="translated">(이 예제에서는 클래스를 지 원하는 응용 프로그램을 호스트 에서만 실행 됩니다.)</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Creates and returns a new <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체를 만들어 반환합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collection returned by this constructor is empty and does not have any initial capacity allocated.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> 이 생성자에 의해 반환 된 컬렉션 비어 있고 초기 용량이 할당 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collections are not compatible with the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> collections available in the <ph id="ph3">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> namespaces.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> 컬렉션와 호환 되지 않습니다.는 <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 컬렉션에서 사용할 수는 <ph id="ph3">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The following example creates a new <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collection and assigns it to the variable <ph id="ph2">`coll`</ph>:</source>
          <target state="translated">다음 예제에서는 새 <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> 컬렉션을 변수에 할당 하 고 <ph id="ph2">`coll`</ph>:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>This <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">이 <ph id="ph1">`Collection`</ph> 개체는 1부터 즉, 1의 값을 통해 시작의 인덱스 값은 <ph id="ph2">`Count`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collections hold elements of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> 컬렉션 형식의 요소만 포함 <ph id="ph2">&lt;xref:System.Object&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Required.</source>
          <target state="translated">필수.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An object of any type that specifies the element to add to the collection.</source>
          <target state="translated">컬렉션에 추가할 요소를 지정하는 형식의 개체입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</source>
          <target state="translated">위치 인덱스 대신 컬렉션의 이 새 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <ph id="ph1">&lt;see langword="String" /&gt;</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">컬렉션에서 상대적 위치를 지정하는 식입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection before the element identified by the <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">컬렉션에서 추가되는 요소는 <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> 인수에 의해 식별되는 요소 앞에 옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>가 숫자 식인 경우 이 인수는 1에서 컬렉션의 <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> 속성 값 사이의 숫자여야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see langword="String" /&gt;</ph> 식인 경우 이 인수는 참조되는 요소가 컬렉션에 추가될 때 지정한 키 문자열과 일치해야 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>와 <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>를 둘 다 지정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">컬렉션에서 상대적 위치를 지정하는 식입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection after the element identified by the <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">컬렉션에서 추가되는 요소는 <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> 인수에 의해 식별되는 요소 뒤에 옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see langword="Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept>가 숫자 식인 경우 이 인수는 1에서 컬렉션의 <ph id="ph1">&lt;see langword="Count" /&gt;</ph> 속성 값 사이의 숫자여야 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element referred to was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see langword="String" /&gt;</ph> 식인 경우 이 인수는 참조되는 요소가 컬렉션에 추가될 때 지정한 키 문자열과 일치해야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>와 <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>를 둘 다 지정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Adds an element to a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체에 요소를 추가합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <ph id="ph1">`Before`</ph> or <ph id="ph2">`After`</ph> argument must refer to an existing element of the collection; otherwise, an error occurs.</source>
          <target state="translated"><ph id="ph1">`Before`</ph> 또는 <ph id="ph2">`After`</ph> 인수 컬렉션의 기존 요소를 참조 해야, 그렇지 않으면, 오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If both the <ph id="ph1">`Before`</ph> and <ph id="ph2">`After`</ph> arguments are omitted, the new object is added to the end of the collection.</source>
          <target state="translated">모두는 <ph id="ph1">`Before`</ph> 및 <ph id="ph2">`After`</ph> 인수가 생략 되는 새 개체가 컬렉션의 끝에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An error also occurs if a specified <ph id="ph1">`Key`</ph> value matches the key for an existing element of the collection.</source>
          <target state="translated">지정 된 경우에 오류가 발생 <ph id="ph1">`Key`</ph> 컬렉션의 기존 요소에 대 한 키와 일치 하는 값입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The following example uses the <ph id="ph1">`Add`</ph> method to add <ph id="ph2">`child`</ph> objects — instances of a class called <ph id="ph3">`child`</ph> containing a <ph id="ph4">`Public`</ph> property <ph id="ph5">`name`</ph> — to a collection called <ph id="ph6">`family`</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Add`</ph> 메서드를 추가 하려면 <ph id="ph2">`child`</ph> 개체-클래스의 인스턴스 라는 <ph id="ph3">`child`</ph> 포함 하는 <ph id="ph4">`Public`</ph> 속성 <ph id="ph5">`name`</ph> -라는 컬렉션에 <ph id="ph6">`family`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>To see how this works, create a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls and set their <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> properties to <ph id="ph4">`Add`</ph> and <ph id="ph5">`List`</ph>.</source>
          <target state="translated">이 과정을 보려면 만들기는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 두 개의 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 컨트롤 집합과 해당 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성을 <ph id="ph4">`Add`</ph> 및 <ph id="ph5">`List`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Add the <ph id="ph1">`child`</ph> class definition and the <ph id="ph2">`family`</ph> declaration to the form code.</source>
          <target state="translated">추가 <ph id="ph1">`child`</ph> 클래스 정의 및 <ph id="ph2">`family`</ph> 폼 코드에 선언 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Modify the <ph id="ph1">`_Click`</ph> event handlers for the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and <bpt id="p2">**</bpt>List<ept id="p2">**</ept> buttons as shown.</source>
          <target state="translated">수정 된 <ph id="ph1">`_Click`</ph> 에 대 한 이벤트 처리기는 <bpt id="p1">**</bpt>추가<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>목록<ept id="p2">**</ept> 표시 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button allows you to add children.</source>
          <target state="translated"><bpt id="p1">**</bpt>추가<ept id="p1">**</ept> 단추 하위 항목을 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>List<ept id="p1">**</ept> button displays the names of all the children.</source>
          <target state="translated"><bpt id="p1">**</bpt>목록<ept id="p1">**</ept> 단추 모든 자식 항목의 이름을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>Deletes all elements of a Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 모든 요소를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>The <ph id="ph1">`Clear`</ph> method empties the collection and resets its <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property to 0.</source>
          <target state="translated"><ph id="ph1">`Clear`</ph> 메서드는 컬렉션을 비우고 다시 설정 해당 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> 속성을 0입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Required.</source>
          <target state="translated">필수.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies the key for which to search the elements of the collection.</source>
          <target state="translated">컬렉션 요소를 검색할 키를 지정하는 <ph id="ph1">&lt;see langword="String" /&gt;</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Visual Basic <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 개체에 특정 키를 가진 요소가 포함되어 있는지 여부를 나타내는 <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Visual Basic <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 개체에 특정 키를 가진 요소가 포함되어 있는지 여부를 나타내는 <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source><ph id="ph1">`Contains`</ph> returns <ph id="ph2">`True`</ph> if the collection contains an element with a key exactly matching <ph id="ph3">`Key`</ph>.</source>
          <target state="translated"><ph id="ph1">`Contains`</ph> 반환 <ph id="ph2">`True`</ph> 컬렉션 정확 하 게 일치 하는 키가 있는 요소가 들어 있으면 <ph id="ph3">`Key`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Otherwise, <ph id="ph1">`Contains`</ph> returns <ph id="ph2">`False`</ph>.</source>
          <target state="translated">그렇지 않으면 <ph id="ph1">`Contains`</ph> 반환 <ph id="ph2">`False`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Case is ignored when matching key values.</source>
          <target state="translated">키 값 비교 시 대/소문자는 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A Visual Basic <ph id="ph1">`Collection`</ph> can hold some elements that have keys and other elements without keys.</source>
          <target state="translated">Visual Basic <ph id="ph1">`Collection`</ph> 일부 키가 있는 요소 및 키가 없는 기타 요소를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>This depends on whether the call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method supplies an argument to the optional <ph id="ph2">`Key`</ph> parameter.</source>
          <target state="translated">여부에 따라 다릅니다에 대 한 호출에서 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> 메서드를 제공 하면 선택적 인수 <ph id="ph2">`Key`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>If you intend to search the collection for elements using their keys, remember to supply the <ph id="ph1">`Key`</ph> argument every time you call the <ph id="ph2">`Add`</ph> method.</source>
          <target state="translated">컬렉션에서 해당 키를 사용 하 여 요소에 대 한 검색 하려는 경우를 제공 해야는 <ph id="ph1">`Key`</ph> 를 호출할 때마다 인수는 <ph id="ph2">`Add`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">컬렉션의 요소 수를 포함하는 <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">컬렉션의 요소 수를 포함하는 <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Use the <ph id="ph1">`Count`</ph> property to determine the number of elements in a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`Count`</ph> 속성에 있는 요소의 수를 확인 하는 <ph id="ph2">`Collection`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>This example illustrates the use of the <ph id="ph1">`Count`</ph> property to display the number of elements in a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`Count`</ph> 속성에 있는 요소의 수를 표시 하는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 변수에 개체 <ph id="ph3">`birthdays`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>The <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated"><ph id="ph1">`Collection`</ph> 개체는 1부터 즉, 1의 값을 통해 시작의 인덱스 값은 <ph id="ph2">`Count`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체를 반복하는 데 사용하는 열거자 개체에 대한 참조를 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체를 반복하는 데 사용하는 열거자 개체에 대한 참조를 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> calls <ph id="ph1">`GetEnumerator`</ph> to obtain an enumerator object to support iteration over a collection's elements.</source>
          <target state="translated"><bpt id="p1">[</bpt>각각에 대해... 다음 문<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> 호출 <ph id="ph1">`GetEnumerator`</ph> 컬렉션의 요소를 반복 하는 열거자 개체를 가져와야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Normally, you use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop to traverse a collection or array, and you do not need to call <ph id="ph3">`GetEnumerator`</ph> explicitly.</source>
          <target state="translated">일반적으로 <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> 컬렉션이 나 배열의 이동 하 고 호출할 필요가 없습니다 <ph id="ph3">`GetEnumerator`</ph> 명시적으로 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>If you need closer control over the iteration than the <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> statements provide, you can use the <ph id="ph3">`GetEnumerator`</ph> method to perform a customized traversal.</source>
          <target state="translated">반복 보다 자세히 제어 해야 할 경우는 <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> 명령문을 사용할 수 있습니다는 <ph id="ph3">`GetEnumerator`</ph> 메서드를 사용자 지정된 탐색을 수행 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following are some cases in which you might need to do this.</source>
          <target state="translated">일부 경우가 작업을 수행 해야 하는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to return to the beginning of the collection and start the iteration again before it is finished.</source>
          <target state="translated">컬렉션의 시작 부분에 반환 하 고 완료 되기 전에 탐색을 다시 시작을 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to skip over one or more elements for a variety of reasons.</source>
          <target state="translated">다양 한 이유 때문에 대 한 하나 이상의 요소를 건너뛰도록 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might need to change the elements of the collection in the middle of a traversal.</source>
          <target state="translated">탐색 도중에 컬렉션의 요소를 변경 해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>In this case you must obtain a new enumerator object because the previous one is invalidated.</source>
          <target state="translated">이 경우 얻어야 새 열거자 개체의 관계를 이전 무효화 되므로 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following example shows how to use <ph id="ph1">`GetEnumerator`</ph> to retrieve all the elements of a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 보여 줍니다. <ph id="ph1">`GetEnumerator`</ph> 의 모든 요소를 검색 한 <ph id="ph2">`Collection`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source><ph id="ph1">`GetEnumerator`</ph> constructs and returns an enumerator object, which implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface of the <ph id="ph3">&lt;xref:System.Collections&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">`GetEnumerator`</ph> 생성 하 고 구현 하는 열거자 개체를 반환 된 <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> 의 인터페이스는 <ph id="ph3">&lt;xref:System.Collections&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The enumerator object exposes the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> methods.</source>
          <target state="translated">열거자 개체는 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>각각에 대해... 다음 문<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) 컬렉션 요소의 위치를 지정하는 숫자 식입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept>는 1에서 컬렉션의 <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> 속성 값 사이의 숫자여야 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">또는 (B) 컬렉션 요소의 키 문자열이나 위치를 지정하는 <ph id="ph1">&lt;see langword="Object" /&gt;</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">경우 <ph id="ph1">`Index`</ph> 유형의 <ph id="ph2">`Object`</ph>, <ph id="ph3">`Item`</ph> 속성으로 처리 하도록 시도 <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> 배열 또는 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">경우 <ph id="ph1">`Item`</ph> 변환할 수 없습니다 <ph id="ph2">`Index`</ph> 를 <ph id="ph3">`String`</ph> 또는 <ph id="ph4">`Integer`</ph>, throw는 <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated"><ph id="ph1">`Item`</ph> 속성은 컬렉션에 대 한 기본 속성입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">따라서 다음 코드 줄 동일합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Item`</ph> 컬렉션의 개체에 대 한 참조를 검색 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">만들 <ph id="ph1">`birthdays`</ph> 로 <ph id="ph2">`Collection`</ph> 개체와 키를 사용 하 여 청구서의 생일을 나타내는 개체를 검색 합니다 <ph id="ph3">`"Bill"`</ph> 로 <ph id="ph4">`Index`</ph> 인수입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">첫 번째 호출에서 명시적으로 지정 된 <ph id="ph1">`Item`</ph> 속성이 아니라 두 번째는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">두 호출이 작동 하기 때문에 <ph id="ph1">`Item`</ph> 속성에 대 한 기본 속성은 한 <ph id="ph2">`Collection`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) 컬렉션 요소의 위치를 지정하는 숫자 식입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept>는 1에서 컬렉션의 <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> 속성 값 사이의 숫자여야 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">또는 (B) 컬렉션 요소의 키 문자열이나 위치를 지정하는 <ph id="ph1">&lt;see langword="Object" /&gt;</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">경우 <ph id="ph1">`Index`</ph> 유형의 <ph id="ph2">`Object`</ph>, <ph id="ph3">`Item`</ph> 속성으로 처리 하도록 시도 <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> 배열 또는 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">경우 <ph id="ph1">`Item`</ph> 변환할 수 없습니다 <ph id="ph2">`Index`</ph> 를 <ph id="ph3">`String`</ph> 또는 <ph id="ph4">`Integer`</ph>, throw는 <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated"><ph id="ph1">`Item`</ph> 속성은 컬렉션에 대 한 기본 속성입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">따라서 다음 코드 줄 동일합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Item`</ph> 컬렉션의 개체에 대 한 참조를 검색 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">만들 <ph id="ph1">`birthdays`</ph> 로 <ph id="ph2">`Collection`</ph> 개체와 키를 사용 하 여 청구서의 생일을 나타내는 개체를 검색 합니다 <ph id="ph3">`"Bill"`</ph> 로 <ph id="ph4">`Index`</ph> 인수입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">첫 번째 호출에서 명시적으로 지정 된 <ph id="ph1">`Item`</ph> 속성이 아니라 두 번째는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">두 호출이 작동 하기 때문에 <ph id="ph1">`Item`</ph> 속성에 대 한 기본 속성은 한 <ph id="ph2">`Collection`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">위치 인덱스 대신 컬렉션의 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <ph id="ph1">&lt;see langword="String" /&gt;</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept>는 요소가 컬렉션에 추가될 때 지정한 <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> 인수와 일치해야 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">위치나 키를 기준으로 <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체의 특정 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">경우 <ph id="ph1">`Index`</ph> 유형의 <ph id="ph2">`Object`</ph>, <ph id="ph3">`Item`</ph> 속성으로 처리 하도록 시도 <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> 배열 또는 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">경우 <ph id="ph1">`Item`</ph> 변환할 수 없습니다 <ph id="ph2">`Index`</ph> 를 <ph id="ph3">`String`</ph> 또는 <ph id="ph4">`Integer`</ph>, throw는 <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated"><ph id="ph1">`Item`</ph> 속성은 컬렉션에 대 한 기본 속성입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">따라서 다음 코드 줄 동일합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Item`</ph> 컬렉션의 개체에 대 한 참조를 검색 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">만들 <ph id="ph1">`birthdays`</ph> 로 <ph id="ph2">`Collection`</ph> 개체와 키를 사용 하 여 청구서의 생일을 나타내는 개체를 검색 합니다 <ph id="ph3">`"Bill"`</ph> 로 <ph id="ph4">`Index`</ph> 인수입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">첫 번째 호출에서 명시적으로 지정 된 <ph id="ph1">`Item`</ph> 속성이 아니라 두 번째는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">두 호출이 작동 하기 때문에 <ph id="ph1">`Item`</ph> 속성에 대 한 기본 속성은 한 <ph id="ph2">`Collection`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체에서 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">컬렉션 요소의 위치를 지정하는 숫자 식입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept>는 1에서 컬렉션의 <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> 속성 값 사이의 숫자여야 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체에서 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">때 <ph id="ph1">`Remove`</ph> 컬렉션에서 요소를 삭제 하기 감소 컬렉션의 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> 속성을 1.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">것도 감소는 <ph id="ph1">`Index`</ph> 컬렉션에서 삭제 된 요소 다음에 있던 모든 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">요소가 컬렉션에 추가 된 경우는 <ph id="ph1">`Key`</ph>, 사용 해야 해당 <ph id="ph2">`Index`</ph> 제거 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">`Remove`</ph> 에서 개체를 제거 하는 메서드는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 변수에 개체 <ph id="ph3">`birthdays`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">네 번 호출 하는 <ph id="ph1">`Add`</ph> 메서드는 <ph id="ph2">`Count`</ph> 속성 4가 포함 되어 요소 <ph id="ph3">`"Bill"`</ph> 인덱스 값 1, 및 요소 <ph id="ph4">`"Pete"`</ph> 인덱스 값은 4입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">호출 하면 첫 번째 <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> 는 3 요소 <ph id="ph3">`"Bill"`</ph> 삭제 되 면 및 요소 <ph id="ph4">`"Pete"`</ph> 인덱스 값 3입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">호출 하면 두 번째 <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> 가 2 인 요소 <ph id="ph3">`"Mike"`</ph> 삭제 되 면 및 요소 <ph id="ph4">`"Pete"`</ph> 인덱스 값은 2입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">위치 인덱스 대신 컬렉션의 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <ph id="ph1">&lt;see langword="String" /&gt;</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept>는 요소가 컬렉션에 추가될 때 지정한 <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> 인수와 일치해야 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Collection" /&gt;</ph> 개체에서 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">때 <ph id="ph1">`Remove`</ph> 컬렉션에서 요소를 삭제 하기 감소 컬렉션의 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> 속성을 1.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">것도 감소는 <ph id="ph1">`Index`</ph> 컬렉션에서 삭제 된 요소 다음에 있던 모든 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">요소가 컬렉션에 추가 된 경우는 <ph id="ph1">`Key`</ph>, 사용 해야 해당 <ph id="ph2">`Index`</ph> 제거 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">`Remove`</ph> 에서 개체를 제거 하는 메서드는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 변수에 개체 <ph id="ph3">`birthdays`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">네 번 호출 하는 <ph id="ph1">`Add`</ph> 메서드는 <ph id="ph2">`Count`</ph> 속성 4가 포함 되어 요소 <ph id="ph3">`"Bill"`</ph> 인덱스 값 1, 및 요소 <ph id="ph4">`"Pete"`</ph> 인덱스 값은 4입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">호출 하면 첫 번째 <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> 는 3 요소 <ph id="ph3">`"Bill"`</ph> 삭제 되 면 및 요소 <ph id="ph4">`"Pete"`</ph> 인덱스 값 3입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">호출 하면 두 번째 <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> 가 2 인 요소 <ph id="ph3">`"Mike"`</ph> 삭제 되 면 및 요소 <ph id="ph4">`"Pete"`</ph> 인덱스 값은 2입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 개체에서 복사되는 요소의 대상인 1차원 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에는 0부터 시작하는 인덱스가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>배열<ept id="p1">&lt;/c&gt;</ept>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">특정 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 인덱스부터 시작하여 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>의 요소를 <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>에 복사합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">요소에 복사 됩니다는 <ph id="ph1">&lt;xref:System.Array&gt;</ph> 순서는 열거자를 통해 반복 하는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is obtained from the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 에서 가져온는 <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 요소 수가 <ph id="ph2">&lt;paramref name="index" /&gt;</ph>에서 대상 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> 끝까지 사용 가능한 공간보다 큰 경우</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 형식이 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 형식으로 자동 캐스팅될 수 없는 경우</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">컬렉션을 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션을 반복하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">[Visual Basic, C#]</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">@FSHO1@C# 언어의 <ph id="ph1">`foreach`</ph> 문(Visual Basic의 경우 <ph id="ph2">`for each`</ph>)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">그러므로 열거자를 직접 조작하는 대신 <ph id="ph1">`foreach`</ph>를 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 메서드도 실행 하면 열거자가이 위치로 복원 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">이 위치에서의 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 속성이 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서 호출 해야 합니다는 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환할 수도 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 컬렉션의 첫째 요소에 다시 설정하려면 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 호출한 뒤 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에 추가할 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체에 항목을 추가합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">새 요소가 삽입된 위치입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> 에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체가 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 크기가 고정된 경우</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Removes all items from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체에서 항목을 모두 제거합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>This method removes all items from the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">모든 항목을 제거 하는이 메서드는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 개체에서 찾을 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object contains a specific value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체에 특정 값이 들어 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Returns <ph id="ph1">&lt;see langword="True" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체에 있으면 <ph id="ph1">&lt;see langword="True" /&gt;</ph>를 반환하고, 그렇지 않으면 <ph id="ph4">&lt;see langword="False" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>This method determines whether the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object contains a specific value.</source>
          <target state="translated">이 메서드는 확인 여부는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 특정 값을 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 개체에서 찾을 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체에서 특정 항목의 인덱스를 확인합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if found in the collection; otherwise, -1.</source>
          <target state="translated">컬렉션에 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 있으면 해당 값의 인덱스이고, 그렇지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>This method determines the index of a specific item in the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">특정 항목의 인덱스를 결정 하는이 메서드는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>를 삽입할 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to insert into the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 개체에 삽입할 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 지정한 인덱스에 항목을 삽입합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, then <ph id="ph3">`value`</ph> is appended to the end.</source>
          <target state="translated">경우 <ph id="ph1">`index`</ph> 에 있는 항목의 수와 일치는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체 <ph id="ph3">`value`</ph> 끝에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 유효한 인덱스가 아닌 경우</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체가 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 크기가 고정된 경우</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is null reference in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 null 참조인 경우</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 개체에서 제거할 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체에서 특정 개체가 처음 나타나는 부분을 제거합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not found in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object remains unchanged and no exception is thrown.</source>
          <target state="translated">경우 <ph id="ph1">`value`</ph> 를 찾을 수 없습니다는 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체는 <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체 그대로 유지 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체가 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 크기가 고정된 경우</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The zero-based index of the item to remove.</source>
          <target state="translated">제거할 항목의 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Removes the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object item at the specified index.</source>
          <target state="translated">지정한 인덱스에 있는 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체 항목을 제거합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 유효한 인덱스가 아닌 경우</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체가 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체의 크기가 고정된 경우</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>The object that initiated the callback.</source>
          <target state="translated">콜백을 시작한 개체입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Runs after the entire <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">전체 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체 그래프가 deserialize된 후 실행됩니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>This method is called after the entire <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">전체 후이 메서드는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체 그래프가 deserialize 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체를 serialize하는 데 필요한 정보가 들어 있는 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 개체와 관련된 serialize된 스트림의 소스와 대상이 들어 있는 <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Returns the data needed to serialize the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method returns the data needed to serialize the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">직렬화 하는 데 필요한 데이터를 반환 하는이 메서드는 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>