<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57baf5640b5568751b33197c31abe05cf23b1641" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351317" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ca191-101">
        <see langword="Conversion" /> 모듈에는 다양한 변환 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ca191-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-102">이 모듈은 Visual Basic 언어 키워드 및 다른 밑으로 10 진수 변환 하는 런타임 라이브러리 멤버 숫자를 문자열, 문자열을 숫자로, 하나의 데이터 형식을 다른 형식으로.</span><span class="sxs-lookup"><span data-stu-id="ca191-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-103">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ca191-104">변환할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="ca191-105">개체를 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-106">개체를 지정된 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-107">런타임에서의 형식이 요청된 대상 형식인 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-108">`CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 로 지정 된 형식에 매개 변수는 `TargetType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="ca191-109">개체가 동적 개체인 경우에 `CTypeDynamic` 메서드 사용할 수 있는 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="ca191-110">`CTypeDynamic` 메서드는 개체 자체에 의해 정의 된 변환 의미에 따라 동적 변환을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="ca191-111">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="ca191-112">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="ca191-113">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드, 정적 사용자 정의 변환을 통해 동적 변환 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-114">다음 예제에서는 `CTypeDynamic` 동적 개체에 의해 정의 된 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="ca191-115">개체를 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="ca191-116">변환할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-117">개체를 지정된 제네릭 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-118">요청된 제네릭 형식으로 정적 형식이 지정된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-119">`CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 제네릭 매개 변수의 형식에 지정 된 형식에 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="ca191-120">개체가 동적 개체인 경우에 `CTypeDynamic` 메서드 사용할 수 있는 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="ca191-121">`CTypeDynamic` 메서드는 개체 자체에 의해 정의 된 변환 의미에 따라 동적 변환을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="ca191-122">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="ca191-123">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="ca191-124">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드, 정적 사용자 정의 변환을 통해 동적 변환 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-125">다음 예제에서는 `CTypeDynamic` 동적 개체에 의해 정의 된 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ca191-126">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ca191-127">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-128">최근 런타임 오류에 해당하는 오류 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-129">`ErrorToString` 함수의 속성 설정을 검사 하는 `Err` 가장 최근 실행 시간 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="ca191-130">반환 값은 `ErrorToString` 에 해당 하는 함수는 `Description` 속성의는 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="ca191-131">런타임 오류가 발생 한 경우 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="ca191-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="ca191-132">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-133">다음 코드에서는 `ErrorToString` 함수를 지정된 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-134">
            <paramref name="ErrorNumber" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="ca191-135">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-135">Optional.</span>
          </span>
          <span data-ttu-id="ca191-136">유효한 임의의 오류 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-137">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-138">지정한 오류 번호에 해당하는 오류 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-139">`ErrorToString` 함수의 속성 설정을 검사 하는 `Err` 가장 최근 실행 시간 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="ca191-140">반환 값은 `ErrorToString` 에 해당 하는 함수는 `Description` 속성의는 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="ca191-141">경우 `ErrorNumber` 알맞은 오류 번호를 정의 하지 않은 이지만 `ErrorToString` 문자열을 반환 `"Application-defined or object-defined error."` 경우 `ErrorNumber` 유효 하지 않을 경우 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="ca191-142">경우 `ErrorNumber` 를 생략 하면 해당 가장 최근의 하는 메시지 실행 시 오류가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="ca191-143">런타임 오류가 발생 하지 않은 경우 또는 `ErrorNumber` 은 0으로, `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="ca191-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="ca191-144">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-145">다음 코드에서는 `ErrorToString` 함수를 지정된 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-146">
            <paramref name="ErrorNumber" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ca191-147">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-148">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-148">Required.</span>
          </span>
          <span data-ttu-id="ca191-149">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-150">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-151">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-152">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-153">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-154">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-155">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-156">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-157">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-158">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-159">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-160">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-161">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-162">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-163">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-164">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-165">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-166">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-167">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-168">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-168">Required.</span>
          </span>
          <span data-ttu-id="ca191-169">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-170">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-171">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-172">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-173">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-174">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-175">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-176">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-177">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-178">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-179">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-180">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-181">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-182">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-183">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-184">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-185">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-186">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-187">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-188">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-188">Required.</span>
          </span>
          <span data-ttu-id="ca191-189">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-190">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-191">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-192">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-193">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-194">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-195">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-196">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-197">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-198">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-199">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-200">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-201">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-202">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-203">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-204">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-205">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-206">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-207">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-208">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-208">Required.</span>
          </span>
          <span data-ttu-id="ca191-209">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-210">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-211">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-212">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-213">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-214">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-215">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-216">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-217">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-218">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-219">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-220">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-221">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-222">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-223">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-224">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-225">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-226">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-227">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-228">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-228">Required.</span>
          </span>
          <span data-ttu-id="ca191-229">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-230">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-231">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-232">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-233">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-234">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-235">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-236">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-237">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-238">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-239">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-240">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-241">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-242">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-243">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-244">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-245">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-246">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-247">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-248">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-248">Required.</span>
          </span>
          <span data-ttu-id="ca191-249">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-250">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-251">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-252">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-253">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-254">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-255">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-256">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-257">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-258">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-259">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-260">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-261">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-262">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-263">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-264">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-265">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-266">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-267">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-268">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-268">Required.</span>
          </span>
          <span data-ttu-id="ca191-269">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-270">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-271">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-272">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-273">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-274">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-275">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-276">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-277">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-278">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-279">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-280">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-281">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-282">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-283">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-284">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-285">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-286">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-287">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ca191-288">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-289">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-289">Required.</span>
          </span>
          <span data-ttu-id="ca191-290">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-291">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-292">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-293">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-294">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-294">If `Number` is</span></span>|<span data-ttu-id="ca191-295">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-296">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-296">Empty</span></span>|<span data-ttu-id="ca191-297">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-297">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-298">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-298">Any numeric value</span></span>|<span data-ttu-id="ca191-299">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-300">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-301">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-302">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-303">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-304">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-305">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-305">Required.</span>
          </span>
          <span data-ttu-id="ca191-306">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-307">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-308">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-309">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-310">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-310">If `Number` is</span></span>|<span data-ttu-id="ca191-311">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-312">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-312">Empty</span></span>|<span data-ttu-id="ca191-313">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-313">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-314">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-314">Any numeric value</span></span>|<span data-ttu-id="ca191-315">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-316">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-317">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-318">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-319">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-320">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-321">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-321">Required.</span>
          </span>
          <span data-ttu-id="ca191-322">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-323">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-324">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-325">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-326">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-326">If `Number` is</span></span>|<span data-ttu-id="ca191-327">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-328">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-328">Empty</span></span>|<span data-ttu-id="ca191-329">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-329">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-330">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-330">Any numeric value</span></span>|<span data-ttu-id="ca191-331">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-332">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-333">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-334">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-335">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-336">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-337">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-337">Required.</span>
          </span>
          <span data-ttu-id="ca191-338">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-339">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-340">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-341">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-342">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-342">If `Number` is</span></span>|<span data-ttu-id="ca191-343">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-344">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-344">Empty</span></span>|<span data-ttu-id="ca191-345">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-345">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-346">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-346">Any numeric value</span></span>|<span data-ttu-id="ca191-347">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-348">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-349">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-350">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-351">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-352">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-353">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-353">Required.</span>
          </span>
          <span data-ttu-id="ca191-354">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-355">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-356">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-357">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-358">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-358">If `Number` is</span></span>|<span data-ttu-id="ca191-359">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-360">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-360">Empty</span></span>|<span data-ttu-id="ca191-361">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-361">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-362">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-362">Any numeric value</span></span>|<span data-ttu-id="ca191-363">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-364">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-365">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-366">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-367">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-368">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-369">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-369">Required.</span>
          </span>
          <span data-ttu-id="ca191-370">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-371">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-372">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-373">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-374">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-374">If `Number` is</span></span>|<span data-ttu-id="ca191-375">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-376">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-376">Empty</span></span>|<span data-ttu-id="ca191-377">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-377">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-378">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-378">Any numeric value</span></span>|<span data-ttu-id="ca191-379">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-380">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-381">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-382">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-383">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-384">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-385">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-385">Required.</span>
          </span>
          <span data-ttu-id="ca191-386">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-387">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-388">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-389">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-390">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-390">If `Number` is</span></span>|<span data-ttu-id="ca191-391">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-392">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-392">Empty</span></span>|<span data-ttu-id="ca191-393">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-393">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-394">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-394">Any numeric value</span></span>|<span data-ttu-id="ca191-395">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-396">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-397">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-398">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-399">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-400">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-401">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-401">Required.</span>
          </span>
          <span data-ttu-id="ca191-402">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-403">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-404">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-405">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-406">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-406">If `Number` is</span></span>|<span data-ttu-id="ca191-407">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-408">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-408">Empty</span></span>|<span data-ttu-id="ca191-409">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-409">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-410">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-410">Any numeric value</span></span>|<span data-ttu-id="ca191-411">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-412">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-413">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-414">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-415">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-416">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-417">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-417">Required.</span>
          </span>
          <span data-ttu-id="ca191-418">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-419">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-420">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-421">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-422">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="ca191-422">If `Number` is</span></span>|<span data-ttu-id="ca191-423">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-424">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-424">Empty</span></span>|<span data-ttu-id="ca191-425">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-425">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-426">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="ca191-426">Any numeric value</span></span>|<span data-ttu-id="ca191-427">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ca191-428">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ca191-429">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-430">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-431">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-432">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ca191-433">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-434">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-434">Required.</span>
          </span>
          <span data-ttu-id="ca191-435">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-436">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-437">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-438">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-439">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-440">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-441">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-442">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-443">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-444">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-445">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-446">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-447">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-448">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-449">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-450">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-451">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-452">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-453">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-454">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-454">Required.</span>
          </span>
          <span data-ttu-id="ca191-455">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-456">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-457">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-458">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-459">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-460">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-461">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-462">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-463">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-464">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-465">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-466">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-467">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-468">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-469">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-470">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-471">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-472">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-473">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-474">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-474">Required.</span>
          </span>
          <span data-ttu-id="ca191-475">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-476">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-477">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-478">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-479">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-480">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-481">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-482">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-483">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-484">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-485">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-486">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-487">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-488">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-489">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-490">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-491">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-492">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-493">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-494">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-494">Required.</span>
          </span>
          <span data-ttu-id="ca191-495">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-496">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-497">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-498">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-499">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-500">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-501">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-502">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-503">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-504">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-505">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-506">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-507">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-508">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-509">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-510">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-511">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-512">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-513">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-514">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-514">Required.</span>
          </span>
          <span data-ttu-id="ca191-515">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-516">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-517">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-518">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-519">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-520">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-521">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-522">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-523">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-524">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-525">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-526">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-527">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-528">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-529">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-530">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-531">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-532">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-533">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-534">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-534">Required.</span>
          </span>
          <span data-ttu-id="ca191-535">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-536">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-537">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-538">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-539">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-540">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-541">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-542">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-543">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-544">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-545">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-546">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-547">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-548">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-549">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-550">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-551">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-552">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-553">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-554">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-554">Required.</span>
          </span>
          <span data-ttu-id="ca191-555">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ca191-556">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-557">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-558">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-559">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ca191-560">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ca191-561">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ca191-562">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ca191-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-563">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ca191-564">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ca191-565">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ca191-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ca191-566">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ca191-567">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ca191-568">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ca191-569">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ca191-570">예:</span><span class="sxs-lookup"><span data-stu-id="ca191-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ca191-571">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-572">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-573">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ca191-574">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-575">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-575">Required.</span>
          </span>
          <span data-ttu-id="ca191-576">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-577">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-578">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-579">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-580">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-580">If Number is</span></span>|<span data-ttu-id="ca191-581">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-582">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-582">Empty</span></span>|<span data-ttu-id="ca191-583">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-583">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-584">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-584">Any other number</span></span>|<span data-ttu-id="ca191-585">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-586">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-587">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-588">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-589">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-590">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-591">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-591">Required.</span>
          </span>
          <span data-ttu-id="ca191-592">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-593">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-594">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-595">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-596">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-596">If Number is</span></span>|<span data-ttu-id="ca191-597">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-598">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-598">Empty</span></span>|<span data-ttu-id="ca191-599">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-599">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-600">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-600">Any other number</span></span>|<span data-ttu-id="ca191-601">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-602">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-603">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-604">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-605">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-606">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-607">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-607">Required.</span>
          </span>
          <span data-ttu-id="ca191-608">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-609">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-610">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-611">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-612">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-612">If Number is</span></span>|<span data-ttu-id="ca191-613">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-614">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-614">Empty</span></span>|<span data-ttu-id="ca191-615">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-615">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-616">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-616">Any other number</span></span>|<span data-ttu-id="ca191-617">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-618">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-619">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-620">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-621">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-622">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-623">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-623">Required.</span>
          </span>
          <span data-ttu-id="ca191-624">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-625">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-626">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-627">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-628">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-628">If Number is</span></span>|<span data-ttu-id="ca191-629">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-630">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-630">Empty</span></span>|<span data-ttu-id="ca191-631">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-631">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-632">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-632">Any other number</span></span>|<span data-ttu-id="ca191-633">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-634">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-635">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-636">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-637">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-638">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-639">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-639">Required.</span>
          </span>
          <span data-ttu-id="ca191-640">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-641">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-642">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-643">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-644">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-644">If Number is</span></span>|<span data-ttu-id="ca191-645">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-646">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-646">Empty</span></span>|<span data-ttu-id="ca191-647">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-647">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-648">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-648">Any other number</span></span>|<span data-ttu-id="ca191-649">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-650">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-651">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-652">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-653">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-654">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-655">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-655">Required.</span>
          </span>
          <span data-ttu-id="ca191-656">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-657">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-658">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-659">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-660">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-660">If Number is</span></span>|<span data-ttu-id="ca191-661">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-662">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-662">Empty</span></span>|<span data-ttu-id="ca191-663">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-663">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-664">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-664">Any other number</span></span>|<span data-ttu-id="ca191-665">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-666">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-667">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-668">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-669">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-670">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-671">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-671">Required.</span>
          </span>
          <span data-ttu-id="ca191-672">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-673">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-674">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-675">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-676">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-676">If Number is</span></span>|<span data-ttu-id="ca191-677">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-678">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-678">Empty</span></span>|<span data-ttu-id="ca191-679">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-679">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-680">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-680">Any other number</span></span>|<span data-ttu-id="ca191-681">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-682">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-683">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-684">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-685">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-686">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-687">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-687">Required.</span>
          </span>
          <span data-ttu-id="ca191-688">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-689">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-690">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-691">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-692">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-692">If Number is</span></span>|<span data-ttu-id="ca191-693">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-694">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-694">Empty</span></span>|<span data-ttu-id="ca191-695">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-695">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-696">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-696">Any other number</span></span>|<span data-ttu-id="ca191-697">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-698">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-699">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-700">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-701">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-702">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-703">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-703">Required.</span>
          </span>
          <span data-ttu-id="ca191-704">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-705">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-706">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-707">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ca191-708">Number가</span><span class="sxs-lookup"><span data-stu-id="ca191-708">If Number is</span></span>|<span data-ttu-id="ca191-709">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="ca191-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ca191-710">Empty</span><span class="sxs-lookup"><span data-stu-id="ca191-710">Empty</span></span>|<span data-ttu-id="ca191-711">영 (0)</span><span class="sxs-lookup"><span data-stu-id="ca191-711">Zero (0)</span></span>|  
|<span data-ttu-id="ca191-712">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="ca191-712">Any other number</span></span>|<span data-ttu-id="ca191-713">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="ca191-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ca191-714">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ca191-715">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-716">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-717">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-718">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ca191-719">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-719">Required.</span>
          </span>
          <span data-ttu-id="ca191-720">임의의 유효한 숫자 식을 포함하는 <see langword="Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-721">숫자를 나타내는 <see langword="String" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-722">숫자를 나타내는 <see langword="String" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-723">부호에 대 한 선행 공백은 항상 예약 숫자를 문자열로 변환 하면 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="ca191-724">경우 `Number` 가 양수 이면 반환 된 문자열에 선행 공백이 포함 되 고 더하기 기호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="ca191-725">음수 빼기 기호 (-) 및 선행 공백이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="ca191-726">사용 하 여는 `Format` 함수 또는 다른 사용자 정의 형식으로 날짜, 시간 또는 통화 형식이 지정 된 원하는 숫자 값으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="ca191-727">와 달리는 `Str` 함수는 `Format` 함수의 부호에 대 한 선행 공백을 포함 하지 않는 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ca191-728">`Str` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ca191-729">사용 하 여 (예를 들어 국가별 응용 프로그램)에서 다른 소수 구분 기호를 사용 하면는 `CStr` 또는 `Format` 숫자를 문자열로 변환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="ca191-730">숫자의를 사용 하 여 숫자의 문자열 표현을 특정 문화권을 가져오려면 `ToString(IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca191-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="ca191-731">사용 예를 들어 <xref:System.Double.ToString%2A> 형식의 값을 변환할 때 `Double` 문자열로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca191-732">사용 하 여이 예제는 `Str` 함수를 반환 하는 `String` 숫자의 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="ca191-733">양의 숫자를 문자열로 변환 되 면 선행 공백이 항상 부호가 예약 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ca191-734">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="ca191-735">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ca191-736">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ca191-737">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-737">Required.</span>
          </span>
          <span data-ttu-id="ca191-738">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ca191-739">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-740">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-741">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-742">`Val` 함수는 숫자 부분으로 인식할 수 없는 첫 번째 문자에서 문자열 읽기를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ca191-743">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ca191-744">하지만 함수 인식 기 수 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ca191-745">공백, 탭 및 줄 바꿈 문자는 인수에서 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="ca191-746">다음 호출 값 1615198이 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="ca191-747">다음 호출은 10 진수 값-1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ca191-748">`Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ca191-749">소수 구분 하는 경우 사용 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ca191-750">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca191-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ca191-751">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ca191-752"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ca191-753">예를 들어 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ca191-754">수 사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 형식 문자 찾아낼 수 컴파일러에서 문자열에 포함 되지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="ca191-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ca191-755">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ca191-756">`Val` 숫자, 숫자 한정자, 숫자의 문장 부호 또는 공백 해석 될 수 없는 첫 번째 문자에서 변환을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ca191-757">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-758">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ca191-759">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-759">Required.</span>
          </span>
          <span data-ttu-id="ca191-760">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ca191-761">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-762">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-763">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-764">`Val` 함수는 숫자 부분으로 인식할 수 없는 첫 번째 문자에서 문자열 읽기를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ca191-765">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ca191-766">하지만 함수 인식 기 수 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ca191-767">공백, 탭 및 줄 바꿈 문자는 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="ca191-768">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="ca191-769">다음 호출은 10 진수 값-1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ca191-770">`Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ca191-771">국가별 응용 프로그램 처럼 다른 소수 구분 기호를 사용할 때 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ca191-772">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca191-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ca191-773">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ca191-774"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ca191-775">예를 들어 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ca191-776">수 사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 형식 문자 찾아낼 수 컴파일러에 의해 충돌 문자열에 포함 되지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="ca191-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ca191-777">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ca191-778">`Val` 숫자, 숫자 한정자, 숫자의 문장 부호 또는 공백 해석 될 수 없는 첫 번째 문자에서 변환을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ca191-779">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-780">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="ca191-781">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-781">Required.</span>
          </span>
          <span data-ttu-id="ca191-782">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ca191-783">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ca191-784">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ca191-785">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca191-786">`Val` 함수는 숫자 부분으로 인식할 수 없는 첫 번째 문자에서 문자열 읽기를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ca191-787">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ca191-788">하지만 함수 인식 기 수 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ca191-789">공백, 탭 및 줄 바꿈 문자는 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="ca191-790">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="ca191-791">다음 호출은 10 진수 값-1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ca191-792">`Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ca191-793">국가별 응용 프로그램 처럼 다른 소수 구분 기호를 사용할 때 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ca191-794">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca191-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ca191-795">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ca191-796"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ca191-797">예를 들어 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ca191-798">수 사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 형식 문자 찾아낼 수 컴파일러에 의해 충돌 문자열에 포함 되지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="ca191-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ca191-799">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ca191-800">`Val` 숫자, 숫자 한정자, 숫자의 문장 부호 또는 공백 해석 될 수 없는 첫 번째 문자에서 변환을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca191-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ca191-801">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ca191-802">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ca191-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>