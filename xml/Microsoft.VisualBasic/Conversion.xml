<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8e0e14960480e0249f53d698cc92d75e8301b99" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659023" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7f8aa-101">
        <see langword="Conversion" /> 모듈에는 다양한 변환 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f8aa-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-102">이 모듈은 Visual Basic 언어 키워드 및 다른 밑으로 10 진수 변환 하는 런타임 라이브러리 멤버 숫자를 문자열, 문자열을 숫자로, 하나의 데이터 형식을 다른 형식으로.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-103">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7f8aa-104">변환할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="7f8aa-105">개체를 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-106">개체를 지정된 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-107">런타임에서의 형식이 요청된 대상 형식인 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-108">`CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 로 지정 된 형식에 매개 변수는 `TargetType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="7f8aa-109">개체가 동적 개체인 경우에 `CTypeDynamic` 메서드 사용할 수 있는 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="7f8aa-110">`CTypeDynamic` 메서드는 개체 자체에 의해 정의 된 변환 의미에 따라 동적 변환을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="7f8aa-111">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="7f8aa-112">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="7f8aa-113">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드, 정적 사용자 정의 변환을 통해 동적 변환 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-114">다음 예제에서는 `CTypeDynamic` 동적 개체에 의해 정의 된 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="7f8aa-115">개체를 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="7f8aa-116">변환할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-117">개체를 지정된 제네릭 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-118">요청된 제네릭 형식으로 정적 형식이 지정된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-119">`CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 제네릭 매개 변수의 형식에 지정 된 형식에 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="7f8aa-120">개체가 동적 개체인 경우에 `CTypeDynamic` 메서드 사용할 수 있는 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="7f8aa-121">`CTypeDynamic` 메서드는 개체 자체에 의해 정의 된 변환 의미에 따라 동적 변환을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="7f8aa-122">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="7f8aa-123">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="7f8aa-124">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드, 정적 사용자 정의 변환을 통해 동적 변환 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-125">다음 예제에서는 `CTypeDynamic` 동적 개체에 의해 정의 된 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-126">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-127">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-128">최근 런타임 오류에 해당하는 오류 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-129">`ErrorToString` 함수의 속성 설정을 검사 하는 `Err` 가장 최근 실행 시간 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="7f8aa-130">반환 값은 `ErrorToString` 에 해당 하는 함수는 `Description` 속성의는 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="7f8aa-131">런타임 오류가 발생 한 경우 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="7f8aa-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="7f8aa-132">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-133">다음 코드에서는 `ErrorToString` 함수를 지정된 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-134">
            <paramref name="ErrorNumber" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="7f8aa-135">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-135">Optional.</span>
          </span>
          <span data-ttu-id="7f8aa-136">유효한 임의의 오류 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-137">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-138">지정한 오류 번호에 해당하는 오류 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-139">`ErrorToString` 함수의 속성 설정을 검사 하는 `Err` 가장 최근 실행 시간 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="7f8aa-140">반환 값은 `ErrorToString` 에 해당 하는 함수는 `Description` 속성의는 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="7f8aa-141">경우 `ErrorNumber` 알맞은 오류 번호를 정의 하지 않은 이지만 `ErrorToString` 문자열을 반환 `"Application-defined or object-defined error."` 경우 `ErrorNumber` 유효 하지 않을 경우 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="7f8aa-142">경우 `ErrorNumber` 를 생략 하면 해당 가장 최근의 하는 메시지 실행 시 오류가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="7f8aa-143">런타임 오류가 발생 하지 않은 경우 또는 `ErrorNumber` 은 0으로, `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="7f8aa-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="7f8aa-144">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-145">다음 코드에서는 `ErrorToString` 함수를 지정된 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-146">
            <paramref name="ErrorNumber" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-147">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-148">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-148">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-149">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-150">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-151">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-152">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-153">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-154">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-155">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-156">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-157">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-158">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-159">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-160">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-161">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-162">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-163">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-164">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-165">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-166">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-167">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-168">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-168">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-169">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-170">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-171">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-172">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-173">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-174">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-175">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-176">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-177">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-178">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-179">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-180">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-181">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-182">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-183">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-184">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-185">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-186">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-187">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-188">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-188">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-189">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-190">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-191">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-192">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-193">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-194">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-195">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-196">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-197">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-198">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-199">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-200">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-201">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-202">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-203">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-204">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-205">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-206">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-207">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-208">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-208">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-209">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-210">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-211">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-212">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-213">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-214">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-215">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-216">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-217">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-218">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-219">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-220">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-221">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-222">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-223">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-224">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-225">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-226">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-227">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-228">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-228">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-229">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-230">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-231">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-232">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-233">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-234">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-235">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-236">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-237">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-238">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-239">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-240">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-241">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-242">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-243">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-244">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-245">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-246">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-247">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-248">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-248">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-249">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-250">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-251">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-252">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-253">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-254">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-255">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-256">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-257">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-258">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-259">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-260">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-261">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-262">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-263">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-264">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-265">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-266">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-267">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-268">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-268">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-269">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-270">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-271">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-272">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-273">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-274">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-275">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-276">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-277">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-278">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-279">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-280">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-281">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-282">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-283">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-284">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-285">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-286">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-287">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-288">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-289">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-289">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-290">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-291">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-292">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-293">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-294">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-294">If `Number` is</span></span>|<span data-ttu-id="7f8aa-295">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-296">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-296">Empty</span></span>|<span data-ttu-id="7f8aa-297">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-297">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-298">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-298">Any numeric value</span></span>|<span data-ttu-id="7f8aa-299">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-300">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-301">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-302">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-303">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-304">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-305">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-305">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-306">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-307">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-308">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-309">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-310">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-310">If `Number` is</span></span>|<span data-ttu-id="7f8aa-311">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-312">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-312">Empty</span></span>|<span data-ttu-id="7f8aa-313">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-313">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-314">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-314">Any numeric value</span></span>|<span data-ttu-id="7f8aa-315">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-316">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-317">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-318">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-319">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-320">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-321">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-321">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-322">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-323">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-324">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-325">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-326">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-326">If `Number` is</span></span>|<span data-ttu-id="7f8aa-327">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-328">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-328">Empty</span></span>|<span data-ttu-id="7f8aa-329">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-329">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-330">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-330">Any numeric value</span></span>|<span data-ttu-id="7f8aa-331">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-332">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-333">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-334">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-335">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-336">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-337">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-337">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-338">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-339">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-340">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-341">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-342">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-342">If `Number` is</span></span>|<span data-ttu-id="7f8aa-343">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-344">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-344">Empty</span></span>|<span data-ttu-id="7f8aa-345">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-345">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-346">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-346">Any numeric value</span></span>|<span data-ttu-id="7f8aa-347">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-348">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-349">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-350">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-351">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-352">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-353">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-353">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-354">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-355">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-356">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-357">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-358">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-358">If `Number` is</span></span>|<span data-ttu-id="7f8aa-359">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-360">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-360">Empty</span></span>|<span data-ttu-id="7f8aa-361">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-361">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-362">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-362">Any numeric value</span></span>|<span data-ttu-id="7f8aa-363">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-364">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-365">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-366">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-367">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-368">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-369">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-369">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-370">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-371">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-372">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-373">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-374">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-374">If `Number` is</span></span>|<span data-ttu-id="7f8aa-375">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-376">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-376">Empty</span></span>|<span data-ttu-id="7f8aa-377">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-377">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-378">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-378">Any numeric value</span></span>|<span data-ttu-id="7f8aa-379">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-380">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-381">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-382">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-383">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-384">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-385">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-385">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-386">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-387">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-388">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-389">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-390">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-390">If `Number` is</span></span>|<span data-ttu-id="7f8aa-391">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-392">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-392">Empty</span></span>|<span data-ttu-id="7f8aa-393">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-393">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-394">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-394">Any numeric value</span></span>|<span data-ttu-id="7f8aa-395">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-396">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-397">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-398">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-399">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-400">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-401">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-401">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-402">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-403">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-404">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-405">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-406">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-406">If `Number` is</span></span>|<span data-ttu-id="7f8aa-407">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-408">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-408">Empty</span></span>|<span data-ttu-id="7f8aa-409">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-409">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-410">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-410">Any numeric value</span></span>|<span data-ttu-id="7f8aa-411">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-412">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-413">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-414">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-415">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-416">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-417">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-417">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-418">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-419">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-420">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-421">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-422">경우 `Number` 은</span><span class="sxs-lookup"><span data-stu-id="7f8aa-422">If `Number` is</span></span>|<span data-ttu-id="7f8aa-423">16 진수 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-424">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-424">Empty</span></span>|<span data-ttu-id="7f8aa-425">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-425">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-426">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="7f8aa-426">Any numeric value</span></span>|<span data-ttu-id="7f8aa-427">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-428">숫자 앞에 적절 한 범위의가 직접 진수를 나타낼 수 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7f8aa-429">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-430">사용 하 여이 예제는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-431">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-432">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-433">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-434">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-434">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-435">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-436">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-437">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-438">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-439">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-440">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-441">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-442">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-443">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-444">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-445">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-446">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-447">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-448">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-449">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-450">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-451">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-452">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-453">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-454">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-454">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-455">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-456">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-457">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-458">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-459">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-460">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-461">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-462">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-463">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-464">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-465">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-466">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-467">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-468">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-469">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-470">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-471">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-472">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-473">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-474">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-474">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-475">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-476">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-477">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-478">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-479">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-480">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-481">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-482">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-483">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-484">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-485">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-486">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-487">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-488">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-489">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-490">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-491">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-492">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-493">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-494">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-494">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-495">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-496">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-497">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-498">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-499">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-500">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-501">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-502">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-503">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-504">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-505">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-506">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-507">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-508">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-509">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-510">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-511">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-512">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-513">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-514">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-514">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-515">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-516">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-517">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-518">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-519">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-520">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-521">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-522">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-523">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-524">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-525">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-526">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-527">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-528">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-529">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-530">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-531">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-532">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-533">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-534">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-534">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-535">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-536">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-537">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-538">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-539">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-540">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-541">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-542">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-543">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-544">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-545">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-546">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-547">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-548">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-549">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-550">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-551">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-552">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-553">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-554">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-554">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-555">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7f8aa-556">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-557">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-558">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-559">둘 다는 `Int` 및 `Fix` 함수가의 소수 부분을 제거할 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7f8aa-560">간의 차이 `Int` 및 `Fix` 함수는 경우는 `Number` 가 음수 이면 `Int` 보다 크거나 작은 첫 번째 음의 정수를 반환 `Number`반면, `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7f8aa-561">예를 들어 `Int` 를-9-8.4로 변환 하 고 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7f8aa-562">`Fix(number)` 가 같음 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7f8aa-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-563">다음이 예에서는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7f8aa-564">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 된 소수점 숫자 보다 작거나 같은 `Fix` 함수 보다 크거나 수와 동일한 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7f8aa-565">다음 예제에서는 사용 하면를 지정 해야 `Option Strict Off` 로 암시적으로 변환할 입력 하기 때문에 `Double` 입력 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7f8aa-566">사용할 수는 `CInt` 유형 다른 데이터 형식을 명시적으로 변환 하는 함수 `Integer` 와 `Option Strict Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7f8aa-567">그러나 `CInt` 숫자의 소수 부분을 잘라내는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7f8aa-568">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7f8aa-569">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7f8aa-570">예:</span><span class="sxs-lookup"><span data-stu-id="7f8aa-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7f8aa-571">대 한 자세한 내용은 `CInt`, 참조 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-572">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-573">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-574">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-575">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-575">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-576">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-577">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-578">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-579">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-580">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-580">If Number is</span></span>|<span data-ttu-id="7f8aa-581">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-582">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-582">Empty</span></span>|<span data-ttu-id="7f8aa-583">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-583">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-584">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-584">Any other number</span></span>|<span data-ttu-id="7f8aa-585">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-586">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-587">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-588">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-589">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-590">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-591">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-591">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-592">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-593">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-594">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-595">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-596">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-596">If Number is</span></span>|<span data-ttu-id="7f8aa-597">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-598">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-598">Empty</span></span>|<span data-ttu-id="7f8aa-599">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-599">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-600">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-600">Any other number</span></span>|<span data-ttu-id="7f8aa-601">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-602">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-603">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-604">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-605">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-606">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-607">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-607">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-608">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-609">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-610">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-611">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-612">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-612">If Number is</span></span>|<span data-ttu-id="7f8aa-613">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-614">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-614">Empty</span></span>|<span data-ttu-id="7f8aa-615">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-615">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-616">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-616">Any other number</span></span>|<span data-ttu-id="7f8aa-617">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-618">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-619">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-620">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-621">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-622">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-623">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-623">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-624">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-625">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-626">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-627">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-628">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-628">If Number is</span></span>|<span data-ttu-id="7f8aa-629">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-630">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-630">Empty</span></span>|<span data-ttu-id="7f8aa-631">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-631">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-632">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-632">Any other number</span></span>|<span data-ttu-id="7f8aa-633">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-634">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-635">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-636">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-637">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-638">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-639">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-639">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-640">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-641">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-642">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-643">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-644">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-644">If Number is</span></span>|<span data-ttu-id="7f8aa-645">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-646">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-646">Empty</span></span>|<span data-ttu-id="7f8aa-647">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-647">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-648">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-648">Any other number</span></span>|<span data-ttu-id="7f8aa-649">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-650">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-651">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-652">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-653">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-654">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-655">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-655">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-656">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-657">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-658">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-659">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-660">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-660">If Number is</span></span>|<span data-ttu-id="7f8aa-661">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-662">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-662">Empty</span></span>|<span data-ttu-id="7f8aa-663">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-663">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-664">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-664">Any other number</span></span>|<span data-ttu-id="7f8aa-665">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-666">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-667">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-668">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-669">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-670">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-671">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-671">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-672">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-673">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-674">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-675">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-676">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-676">If Number is</span></span>|<span data-ttu-id="7f8aa-677">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-678">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-678">Empty</span></span>|<span data-ttu-id="7f8aa-679">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-679">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-680">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-680">Any other number</span></span>|<span data-ttu-id="7f8aa-681">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-682">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-683">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-684">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-685">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-686">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-687">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-687">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-688">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-689">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-690">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-691">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-692">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-692">If Number is</span></span>|<span data-ttu-id="7f8aa-693">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-694">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-694">Empty</span></span>|<span data-ttu-id="7f8aa-695">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-695">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-696">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-696">Any other number</span></span>|<span data-ttu-id="7f8aa-697">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-698">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-699">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-700">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-701">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-702">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-703">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-703">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-704">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-705">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-706">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-707">경우 `Number` 는 정수, 이미 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7f8aa-708">Number가</span><span class="sxs-lookup"><span data-stu-id="7f8aa-708">If Number is</span></span>|<span data-ttu-id="7f8aa-709">Oct 반환</span><span class="sxs-lookup"><span data-stu-id="7f8aa-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7f8aa-710">Empty</span><span class="sxs-lookup"><span data-stu-id="7f8aa-710">Empty</span></span>|<span data-ttu-id="7f8aa-711">영 (0)</span><span class="sxs-lookup"><span data-stu-id="7f8aa-711">Zero (0)</span></span>|  
|<span data-ttu-id="7f8aa-712">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-712">Any other number</span></span>|<span data-ttu-id="7f8aa-713">최대 22 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="7f8aa-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7f8aa-714">숫자 앞에 적절 한 범위의가 직접 8 진수 값을 나타낼 수 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7f8aa-715">예를 들어 `&O10` 10 진수 8에 대 한 8 진수 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-716">사용 하 여이 예제는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-717">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-718">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7f8aa-719">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-719">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-720">임의의 유효한 숫자 식을 포함하는 <see langword="Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-721">숫자를 나타내는 <see langword="String" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-722">숫자를 나타내는 <see langword="String" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-723">부호에 대 한 선행 공백은 항상 예약 숫자를 문자열로 변환 하면 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="7f8aa-724">경우 `Number` 가 양수 이면 반환 된 문자열에 선행 공백이 포함 되 고 더하기 기호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="7f8aa-725">음수 빼기 기호 (-) 및 선행 공백이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="7f8aa-726">사용 하 여는 `Format` 함수 또는 다른 사용자 정의 형식으로 날짜, 시간 또는 통화 형식이 지정 된 원하는 숫자 값으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="7f8aa-727">와 달리는 `Str` 함수는 `Format` 함수의 부호에 대 한 선행 공백을 포함 하지 않는 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-728">`Str` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7f8aa-729">사용 하 여 (예를 들어 국가별 응용 프로그램)에서 다른 소수 구분 기호를 사용 하면는 `CStr` 또는 `Format` 숫자를 문자열로 변환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="7f8aa-730">숫자의를 사용 하 여 숫자의 문자열 표현을 특정 문화권을 가져오려면 `ToString(IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="7f8aa-731">사용 예를 들어 <xref:System.Double.ToString%2A> 형식의 값을 변환할 때 `Double` 문자열로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-732">사용 하 여이 예제는 `Str` 함수를 반환 하는 `String` 숫자의 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="7f8aa-733">양의 숫자를 문자열로 변환 되 면 선행 공백이 항상 부호가 예약 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8aa-734">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="7f8aa-735">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7f8aa-736">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7f8aa-737">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-737">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-738">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7f8aa-739">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-740">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-741">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-742">`Val` 함수는 숫자 부분으로 인식할 수 없는 첫 번째 문자에서 문자열 읽기를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7f8aa-743">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7f8aa-744">하지만 함수 인식 기 수 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7f8aa-745">공백, 탭 및 줄 바꿈 문자는 인수에서 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="7f8aa-746">다음 호출 값 1615198이 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="7f8aa-747">다음 호출은 10 진수 값-1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-748">`Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7f8aa-749">소수 구분 하는 경우 사용 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7f8aa-750">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7f8aa-751">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-752"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7f8aa-753">예를 들어 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7f8aa-754">수 사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 형식 문자 찾아낼 수 컴파일러에서 문자열에 포함 되지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-755">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7f8aa-756">`Val` 숫자, 숫자 한정자, 숫자의 문장 부호 또는 공백 해석 될 수 없는 첫 번째 문자에서 변환을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7f8aa-757">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-758">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7f8aa-759">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-759">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-760">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7f8aa-761">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-762">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-763">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-764">`Val` 함수는 숫자 부분으로 인식할 수 없는 첫 번째 문자에서 문자열 읽기를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7f8aa-765">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7f8aa-766">하지만 함수 인식 기 수 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7f8aa-767">공백, 탭 및 줄 바꿈 문자는 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="7f8aa-768">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="7f8aa-769">다음 호출은 10 진수 값-1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-770">`Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7f8aa-771">국가별 응용 프로그램 처럼 다른 소수 구분 기호를 사용할 때 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7f8aa-772">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7f8aa-773">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-774"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7f8aa-775">예를 들어 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7f8aa-776">수 사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 형식 문자 찾아낼 수 컴파일러에 의해 충돌 문자열에 포함 되지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-777">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7f8aa-778">`Val` 숫자, 숫자 한정자, 숫자의 문장 부호 또는 공백 해석 될 수 없는 첫 번째 문자에서 변환을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7f8aa-779">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-780">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="7f8aa-781">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-781">Required.</span>
          </span>
          <span data-ttu-id="7f8aa-782">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7f8aa-783">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8aa-784">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8aa-785">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8aa-786">`Val` 함수는 숫자 부분으로 인식할 수 없는 첫 번째 문자에서 문자열 읽기를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7f8aa-787">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7f8aa-788">하지만 함수 인식 기 수 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7f8aa-789">공백, 탭 및 줄 바꿈 문자는 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="7f8aa-790">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="7f8aa-791">다음 호출은 10 진수 값-1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-792">`Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7f8aa-793">국가별 응용 프로그램 처럼 다른 소수 구분 기호를 사용할 때 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7f8aa-794">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7f8aa-795">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8aa-796"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7f8aa-797">예를 들어 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7f8aa-798">수 사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 형식 문자 찾아낼 수 컴파일러에 의해 충돌 문자열에 포함 되지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7f8aa-799">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7f8aa-800">`Val` 숫자, 숫자 한정자, 숫자의 문장 부호 또는 공백 해석 될 수 없는 첫 번째 문자에서 변환을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f8aa-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7f8aa-801">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8aa-802">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8aa-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>