<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7407bb75d7178168919956d2b89f54e76db62e99" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1a926-101">
        <see langword="Conversion" /> 모듈에는 다양한 변환 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1a926-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-102">이 모듈에서는 Visual Basic 언어 키워드 및 10 진수를 다른 진수로 변환 하는 런타임 라이브러리 멤버를 다른 숫자 문자열, 숫자, 문자열 및 데이터를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-103">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1a926-104">변환할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="1a926-105">개체를 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-106">개체를 지정된 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-107">런타임에서의 형식이 요청된 대상 형식인 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-108">`CTypeDynamic` 메서드 변환으로 전달 되는 개체를 `Expression` 에 지정 된 형식 매개 변수는 `TargetType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="1a926-109">개체가 동적 개체를 하는 경우는 `CTypeDynamic` 메서드 사용 가능한 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="1a926-110">`CTypeDynamic` 메서드 개체 자체에 의해 정의 된 변환 의미 체계에 따라 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="1a926-111">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="1a926-112">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="1a926-113">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드는 정적 사용자 정의 변환을 통해 동적 변환 우선 순위를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-114">다음 예제에서는 `CTypeDynamic` 동적 개체에서 정의한 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="1a926-115">개체를 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="1a926-116">변환할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-117">개체를 지정된 제네릭 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-118">요청된 제네릭 형식으로 정적 형식이 지정된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-119">합니다 `CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 제네릭 매개 변수의 형식으로 지정 된 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="1a926-120">개체가 동적 개체를 하는 경우는 `CTypeDynamic` 메서드 사용 가능한 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="1a926-121">`CTypeDynamic` 메서드 개체 자체에 의해 정의 된 변환 의미 체계에 따라 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="1a926-122">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="1a926-123">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="1a926-124">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드는 정적 사용자 정의 변환을 통해 동적 변환 우선 순위를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-125">다음 예제에서는 `CTypeDynamic` 동적 개체에서 정의한 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a926-126">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1a926-127">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-128">최근 런타임 오류에 해당하는 오류 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-129">합니다 `ErrorToString` 의 속성 설정을 검사 하는 함수는 `Err` 최근 런타임 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="1a926-130">반환 값을 `ErrorToString` 에 해당 하는 함수를 `Description` 의 속성은 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="1a926-131">런타임 오류가 발생 하지 않은, 경우 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="1a926-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="1a926-132">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-133">다음 코드에서는 `ErrorToString` 함수를 지정 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-134">
            <paramref name="ErrorNumber" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="1a926-135">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-135">Optional.</span>
          </span>
          <span data-ttu-id="1a926-136">유효한 임의의 오류 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-137">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-138">지정한 오류 번호에 해당하는 오류 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-139">합니다 `ErrorToString` 의 속성 설정을 검사 하는 함수는 `Err` 최근 런타임 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="1a926-140">반환 값을 `ErrorToString` 에 해당 하는 함수를 `Description` 의 속성은 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="1a926-141">하는 경우 `ErrorNumber` 알맞은 오류 번호를 되었지만 정의 되어 있지 `ErrorToString` 문자열을 반환 합니다 `"Application-defined or object-defined error."` 경우 `ErrorNumber` 유효 하지 않은 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="1a926-142">경우 `ErrorNumber` 를 생략 하면 가장 최근의 해당 메시지에서 런타임 오류가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="1a926-143">런타임 오류가 발생 하지 않은 경우 또는 `ErrorNumber` 가 0 이면 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="1a926-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="1a926-144">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-145">다음 코드에서는 `ErrorToString` 함수를 지정 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-146">
            <paramref name="ErrorNumber" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a926-147">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-148">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-148">Required.</span>
          </span>
          <span data-ttu-id="1a926-149">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-150">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-151">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-152">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-153">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-154">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-155">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-156">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-157">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-158">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-159">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-160">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-161">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-162">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-163">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-164">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-165">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-166">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-167">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-168">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-168">Required.</span>
          </span>
          <span data-ttu-id="1a926-169">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-170">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-171">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-172">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-173">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-174">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-175">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-176">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-177">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-178">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-179">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-180">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-181">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-182">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-183">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-184">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-185">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-186">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-187">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-188">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-188">Required.</span>
          </span>
          <span data-ttu-id="1a926-189">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-190">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-191">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-192">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-193">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-194">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-195">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-196">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-197">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-198">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-199">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-200">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-201">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-202">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-203">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-204">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-205">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-206">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-207">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-208">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-208">Required.</span>
          </span>
          <span data-ttu-id="1a926-209">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-210">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-211">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-212">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-213">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-214">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-215">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-216">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-217">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-218">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-219">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-220">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-221">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-222">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-223">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-224">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-225">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-226">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-227">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-228">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-228">Required.</span>
          </span>
          <span data-ttu-id="1a926-229">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-230">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-231">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-232">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-233">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-234">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-235">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-236">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-237">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-238">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-239">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-240">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-241">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-242">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-243">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-244">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-245">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-246">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-247">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-248">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-248">Required.</span>
          </span>
          <span data-ttu-id="1a926-249">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-250">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-251">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-252">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-253">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-254">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-255">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-256">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-257">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-258">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-259">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-260">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-261">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-262">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-263">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-264">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-265">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-266">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-267">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-268">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-268">Required.</span>
          </span>
          <span data-ttu-id="1a926-269">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-270">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-271">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-272">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-273">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-274">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-275">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-276">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-277">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-278">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-279">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-280">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-281">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-282">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-283">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-284">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-285">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-286">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-287">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a926-288">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-289">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-289">Required.</span>
          </span>
          <span data-ttu-id="1a926-290">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-291">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-292">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-293">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-294">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-294">If `Number` is</span></span>|<span data-ttu-id="1a926-295">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-296">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-296">Empty</span></span>|<span data-ttu-id="1a926-297">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-297">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-298">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-298">Any numeric value</span></span>|<span data-ttu-id="1a926-299">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-300">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-301">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-302">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-303">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-304">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-305">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-305">Required.</span>
          </span>
          <span data-ttu-id="1a926-306">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-307">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-308">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-309">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-310">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-310">If `Number` is</span></span>|<span data-ttu-id="1a926-311">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-312">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-312">Empty</span></span>|<span data-ttu-id="1a926-313">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-313">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-314">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-314">Any numeric value</span></span>|<span data-ttu-id="1a926-315">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-316">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-317">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-318">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-319">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-320">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-321">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-321">Required.</span>
          </span>
          <span data-ttu-id="1a926-322">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-323">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-324">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-325">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-326">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-326">If `Number` is</span></span>|<span data-ttu-id="1a926-327">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-328">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-328">Empty</span></span>|<span data-ttu-id="1a926-329">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-329">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-330">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-330">Any numeric value</span></span>|<span data-ttu-id="1a926-331">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-332">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-333">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-334">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-335">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-336">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-337">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-337">Required.</span>
          </span>
          <span data-ttu-id="1a926-338">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-339">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-340">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-341">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-342">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-342">If `Number` is</span></span>|<span data-ttu-id="1a926-343">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-344">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-344">Empty</span></span>|<span data-ttu-id="1a926-345">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-345">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-346">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-346">Any numeric value</span></span>|<span data-ttu-id="1a926-347">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-348">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-349">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-350">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-351">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-352">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-353">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-353">Required.</span>
          </span>
          <span data-ttu-id="1a926-354">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-355">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-356">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-357">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-358">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-358">If `Number` is</span></span>|<span data-ttu-id="1a926-359">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-360">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-360">Empty</span></span>|<span data-ttu-id="1a926-361">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-361">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-362">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-362">Any numeric value</span></span>|<span data-ttu-id="1a926-363">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-364">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-365">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-366">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-367">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-368">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-369">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-369">Required.</span>
          </span>
          <span data-ttu-id="1a926-370">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-371">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-372">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-373">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-374">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-374">If `Number` is</span></span>|<span data-ttu-id="1a926-375">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-376">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-376">Empty</span></span>|<span data-ttu-id="1a926-377">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-377">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-378">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-378">Any numeric value</span></span>|<span data-ttu-id="1a926-379">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-380">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-381">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-382">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-383">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-384">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-385">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-385">Required.</span>
          </span>
          <span data-ttu-id="1a926-386">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-387">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-388">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-389">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-390">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-390">If `Number` is</span></span>|<span data-ttu-id="1a926-391">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-392">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-392">Empty</span></span>|<span data-ttu-id="1a926-393">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-393">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-394">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-394">Any numeric value</span></span>|<span data-ttu-id="1a926-395">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-396">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-397">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-398">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-399">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-400">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-401">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-401">Required.</span>
          </span>
          <span data-ttu-id="1a926-402">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-403">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-404">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-405">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-406">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-406">If `Number` is</span></span>|<span data-ttu-id="1a926-407">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-408">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-408">Empty</span></span>|<span data-ttu-id="1a926-409">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-409">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-410">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-410">Any numeric value</span></span>|<span data-ttu-id="1a926-411">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-412">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-413">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-414">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-415">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-416">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-417">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-417">Required.</span>
          </span>
          <span data-ttu-id="1a926-418">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-419">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-420">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-421">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-422">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="1a926-422">If `Number` is</span></span>|<span data-ttu-id="1a926-423">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-424">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-424">Empty</span></span>|<span data-ttu-id="1a926-425">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-425">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-426">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="1a926-426">Any numeric value</span></span>|<span data-ttu-id="1a926-427">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1a926-428">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1a926-429">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-430">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-431">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-432">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a926-433">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-434">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-434">Required.</span>
          </span>
          <span data-ttu-id="1a926-435">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-436">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-437">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-438">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-439">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-440">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-441">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-442">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-443">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-444">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-445">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-446">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-447">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-448">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-449">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-450">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-451">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-452">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-453">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-454">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-454">Required.</span>
          </span>
          <span data-ttu-id="1a926-455">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-456">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-457">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-458">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-459">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-460">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-461">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-462">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-463">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-464">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-465">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-466">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-467">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-468">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-469">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-470">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-471">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-472">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-473">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-474">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-474">Required.</span>
          </span>
          <span data-ttu-id="1a926-475">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-476">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-477">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-478">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-479">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-480">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-481">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-482">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-483">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-484">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-485">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-486">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-487">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-488">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-489">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-490">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-491">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-492">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-493">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-494">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-494">Required.</span>
          </span>
          <span data-ttu-id="1a926-495">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-496">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-497">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-498">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-499">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-500">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-501">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-502">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-503">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-504">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-505">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-506">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-507">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-508">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-509">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-510">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-511">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-512">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-513">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-514">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-514">Required.</span>
          </span>
          <span data-ttu-id="1a926-515">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-516">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-517">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-518">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-519">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-520">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-521">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-522">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-523">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-524">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-525">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-526">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-527">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-528">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-529">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-530">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-531">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-532">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-533">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-534">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-534">Required.</span>
          </span>
          <span data-ttu-id="1a926-535">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-536">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-537">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-538">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-539">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-540">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-541">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-542">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-543">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-544">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-545">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-546">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-547">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-548">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-549">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-550">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-551">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-552">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-553">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-554">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-554">Required.</span>
          </span>
          <span data-ttu-id="1a926-555">
            <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1a926-556">
            <c>Number</c>에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-557">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-558">숫자의 정수 부분을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-559">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1a926-560">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1a926-561">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1a926-562">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1a926-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-563">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1a926-564">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1a926-565">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1a926-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1a926-566">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1a926-567">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1a926-568">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a926-569">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1a926-570">예:</span><span class="sxs-lookup"><span data-stu-id="1a926-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a926-571">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-572">Number를 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-573">Number가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a926-574">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-575">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-575">Required.</span>
          </span>
          <span data-ttu-id="1a926-576">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-577">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-578">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-579">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-580">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-580">If Number is</span></span>|<span data-ttu-id="1a926-581">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-582">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-582">Empty</span></span>|<span data-ttu-id="1a926-583">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-583">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-584">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-584">Any other number</span></span>|<span data-ttu-id="1a926-585">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-586">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-587">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-588">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-589">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-590">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-591">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-591">Required.</span>
          </span>
          <span data-ttu-id="1a926-592">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-593">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-594">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-595">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-596">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-596">If Number is</span></span>|<span data-ttu-id="1a926-597">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-598">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-598">Empty</span></span>|<span data-ttu-id="1a926-599">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-599">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-600">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-600">Any other number</span></span>|<span data-ttu-id="1a926-601">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-602">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-603">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-604">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-605">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-606">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-607">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-607">Required.</span>
          </span>
          <span data-ttu-id="1a926-608">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-609">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-610">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-611">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-612">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-612">If Number is</span></span>|<span data-ttu-id="1a926-613">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-614">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-614">Empty</span></span>|<span data-ttu-id="1a926-615">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-615">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-616">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-616">Any other number</span></span>|<span data-ttu-id="1a926-617">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-618">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-619">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-620">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-621">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-622">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-623">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-623">Required.</span>
          </span>
          <span data-ttu-id="1a926-624">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-625">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-626">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-627">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-628">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-628">If Number is</span></span>|<span data-ttu-id="1a926-629">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-630">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-630">Empty</span></span>|<span data-ttu-id="1a926-631">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-631">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-632">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-632">Any other number</span></span>|<span data-ttu-id="1a926-633">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-634">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-635">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-636">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-637">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-638">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-639">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-639">Required.</span>
          </span>
          <span data-ttu-id="1a926-640">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-641">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-642">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-643">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-644">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-644">If Number is</span></span>|<span data-ttu-id="1a926-645">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-646">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-646">Empty</span></span>|<span data-ttu-id="1a926-647">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-647">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-648">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-648">Any other number</span></span>|<span data-ttu-id="1a926-649">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-650">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-651">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-652">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-653">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-654">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-655">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-655">Required.</span>
          </span>
          <span data-ttu-id="1a926-656">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-657">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-658">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-659">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-660">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-660">If Number is</span></span>|<span data-ttu-id="1a926-661">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-662">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-662">Empty</span></span>|<span data-ttu-id="1a926-663">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-663">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-664">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-664">Any other number</span></span>|<span data-ttu-id="1a926-665">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-666">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-667">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-668">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-669">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-670">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-671">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-671">Required.</span>
          </span>
          <span data-ttu-id="1a926-672">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-673">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-674">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-675">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-676">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-676">If Number is</span></span>|<span data-ttu-id="1a926-677">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-678">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-678">Empty</span></span>|<span data-ttu-id="1a926-679">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-679">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-680">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-680">Any other number</span></span>|<span data-ttu-id="1a926-681">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-682">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-683">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-684">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-685">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-686">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-687">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-687">Required.</span>
          </span>
          <span data-ttu-id="1a926-688">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-689">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-690">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-691">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-692">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-692">If Number is</span></span>|<span data-ttu-id="1a926-693">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-694">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-694">Empty</span></span>|<span data-ttu-id="1a926-695">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-695">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-696">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-696">Any other number</span></span>|<span data-ttu-id="1a926-697">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-698">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-699">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-700">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-701">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-702">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-703">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-703">Required.</span>
          </span>
          <span data-ttu-id="1a926-704">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-705">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-706">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-707">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1a926-708">Number가</span><span class="sxs-lookup"><span data-stu-id="1a926-708">If Number is</span></span>|<span data-ttu-id="1a926-709">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="1a926-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1a926-710">Empty</span><span class="sxs-lookup"><span data-stu-id="1a926-710">Empty</span></span>|<span data-ttu-id="1a926-711">영 (0)</span><span class="sxs-lookup"><span data-stu-id="1a926-711">Zero (0)</span></span>|  
|<span data-ttu-id="1a926-712">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="1a926-712">Any other number</span></span>|<span data-ttu-id="1a926-713">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="1a926-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1a926-714">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1a926-715">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-716">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-717">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-718">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1a926-719">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-719">Required.</span>
          </span>
          <span data-ttu-id="1a926-720">임의의 유효한 숫자 식을 포함하는 <see langword="Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-721">숫자를 나타내는 <see langword="String" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-722">숫자를 나타내는 <see langword="String" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-723">부호에 대 한 숫자를 문자열로 변환 되 면 선행 공백이 항상 예약 됩니다 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="1a926-724">경우 `Number` 이 양수인 경우 반환 되는 문자열 앞에 공백이 있고 더하기 인 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="1a926-725">음수는 빼기 기호 (-) 및 선행 공백 없이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="1a926-726">사용 된 `Format` 숫자 값을 형식이 지정 된 날짜, 시간 또는 통화 또는 다른 사용자 정의 형식으로 변환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="1a926-727">와 달리 합니다 `Str` 함수는 `Format` 함수의 부호에 대 한 선행 공백을 포함 하지 않습니다 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a926-728">합니다 `Str` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1a926-729">다른 소수 구분 기호 (예를 들어 국가별 응용 프로그램)에서 사용 하는 경우 사용 합니다 `CStr` 또는 `Format` 숫자를 문자열로 변환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="1a926-730">숫자의 문자열 표현을 특정 문화권에서을 사용 수의 `ToString(IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="1a926-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="1a926-731">사용 예를 들어 <xref:System.Double.ToString%2A> 형식의 값을 변환할 때는 `Double` 문자열로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a926-732">이 예제에서는 합니다 `Str` 함수를 반환 하는 `String` 숫자로 표현 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="1a926-733">양수 값을 문자열로 변환할 때, 해당 로그인에 대 한 선행 공백이 항상 예약 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1a926-734">
            <paramref name="Number" />을(를) 지정하지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="1a926-735">
            <paramref name="Number" />가 숫자 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a926-736">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1a926-737">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-737">Required.</span>
          </span>
          <span data-ttu-id="1a926-738">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1a926-739">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-740">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-741">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-742">`Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1a926-743">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1a926-744">그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1a926-745">공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="1a926-746">다음 호출에서는 값 1615198이 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="1a926-747">다음 호출 10 진수 값-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1a926-748">합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1a926-749">10 진수 구분 하는 경우 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1a926-750">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="1a926-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1a926-751">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a926-752"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1a926-753">예를 들어, 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1a926-754">사이 충돌이 형식으로 지정는 `Double` 하며 `Integer` 및 `Long` 형식 문자는 문자열에 포함 되지 않은 경우 컴파일러에서 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1a926-755">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1a926-756">`Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1a926-757">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-758">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1a926-759">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-759">Required.</span>
          </span>
          <span data-ttu-id="1a926-760">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1a926-761">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-762">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-763">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-764">`Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1a926-765">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1a926-766">그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1a926-767">공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="1a926-768">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="1a926-769">다음 호출 10 진수 값-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1a926-770">합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1a926-771">국가별 응용 프로그램, 다른 소수 구분 기호를 사용 하는 경우 사용할 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1a926-772">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="1a926-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1a926-773">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a926-774"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1a926-775">예를 들어, 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1a926-776">사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 충돌 문자열에 포함 되지 않은 경우 컴파일러에서 형식 문자를 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1a926-777">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1a926-778">`Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1a926-779">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-780">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="1a926-781">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-781">Required.</span>
          </span>
          <span data-ttu-id="1a926-782">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1a926-783">
            <c>Expression</c>이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a926-784">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a926-785">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a926-786">`Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1a926-787">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1a926-788">그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1a926-789">공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="1a926-790">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="1a926-791">다음 호출 10 진수 값-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1a926-792">합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1a926-793">국가별 응용 프로그램, 다른 소수 구분 기호를 사용 하는 경우 사용할 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1a926-794">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="1a926-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1a926-795">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a926-796"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1a926-797">예를 들어, 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1a926-798">사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 충돌 문자열에 포함 되지 않은 경우 컴파일러에서 형식 문자를 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1a926-799">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1a926-800">`Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1a926-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1a926-801">
            <paramref name="InputStr" />이 너무 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a926-802">
            <paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a926-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>