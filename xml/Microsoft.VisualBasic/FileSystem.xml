<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95f9f47a0d0070dcb3b41ee3101d2d89375de7bf" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51319805" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="49898-101">
        <see langword="FileSystem" /> 모듈에는 파일, 디렉터리 또는 폴더 및 시스템 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="49898-102">
        <see langword="My" /> 기능을 사용하면 <see langword="FileSystem" /> 모듈을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="49898-103">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-104">이 모듈에는 Visual Basic 언어 키워드 및 파일 및 폴더에 액세스 하는 런타임 라이브러리 멤버를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-105">이 예제에서는 `GetAttr` 파일 및 디렉터리 또는 폴더의 특성을 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md">
      <span data-ttu-id="49898-106">디렉터리 및 파일 요약</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-106">Directories and Files Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md">
      <span data-ttu-id="49898-107">입력 및 출력 요약</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-107">Input and Output Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="49898-108">키워드(Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-108">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="49898-109">Visual Basic 런타임 라이브러리 멤버</span>
      <span class="sxs-lookup">
        <span data-stu-id="49898-109">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="49898-110">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-110">Required.</span>
          </span>
          <span data-ttu-id="49898-111">새 기본 디렉터리 또는 폴더가 될 대상을 식별하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="49898-112">
            <c>Path</c>에는 드라이브가 포함될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-112">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="49898-113">드라이브를 지정하지 않은 경우 <see langword="ChDir" />을 사용하면 현재 드라이브의 기본 디렉터리나 폴더를 변경할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-114">현재 디렉터리나 폴더를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-114">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="49898-115">
            <see langword="My" /> 기능을 사용하면 <see langword="ChDir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="49898-116">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-117">`ChDir` 함수의 기본 드라이브는 기본 디렉터리를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="49898-118">예를 들어 기본 드라이브는 C 이며, 다음 문을 D 드라이브의 기본 디렉터리 변경 되지만 C의 기본 드라이브 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="49898-119">상대 가능 마침표 두 개를 다음과 같이 입력 하 여 디렉터리 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-120">`ChDir` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="49898-121">자세한 내용은 참조 하세요. <xref:System.Security.Permissions.SecurityPermission> 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-122">이 예제에서는 `ChDir` 함수는 현재 디렉터리 또는 폴더를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-123">
            <paramref name="Path" />가 비어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-123">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-124">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-124">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">
          <span data-ttu-id="49898-125">방법: Visual Basic에서 파일 경로의 구문 분석</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-125">How to: Parse File Paths in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">
          <span data-ttu-id="49898-126">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-127">현재 드라이브를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-127">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="49898-128">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-128">Required.</span>
          </span>
          <span data-ttu-id="49898-129">기존 드라이브를 지정하는 문자열 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-129">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="49898-130">길이가 0인 문자열("")을 지정하면 현재 드라이브가 변경되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-130">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="49898-131">
            <c>Drive</c> 인수가 여러 문자로 된 문자열인 경우 <see langword="ChDrive" />는 첫 글자만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-131">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-132">현재 드라이브를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-132">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-133">`ChDrive` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="49898-134">자세한 내용은 <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-135">이 예제에서는 `ChDrive` 함수가 현재 드라이브를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="49898-136">드라이브가 없는 경우 예외를 throw 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-137">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-137">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-138">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-138">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="49898-139">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-139">Required.</span>
          </span>
          <span data-ttu-id="49898-140">기존 드라이브를 지정하는 문자열 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-140">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="49898-141">길이가 0인 문자열("")을 지정하면 현재 드라이브가 변경되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-141">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="49898-142">
            <c>Drive</c> 인수가 여러 문자로 된 문자열인 경우 <see langword="ChDrive" />는 첫 글자만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-142">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-143">현재 드라이브를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-143">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-144">`ChDrive` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="49898-145">자세한 내용은 <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-146">이 예제에서는 `ChDrive` 함수가 현재 드라이브를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="49898-147">드라이브가 없는 경우 예외를 throw 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-148">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-148">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-149">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-149">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-150">현재 경로를 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-150">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="49898-151">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="49898-152">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49898-153">현재 경로를 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="49898-154">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="49898-155">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-156">현재 경로를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="49898-157">이 예제에서는 `CurDir` 현재 경로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="49898-158">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-158">Optional.</span>
          </span>
          <span data-ttu-id="49898-159">기존 드라이브를 지정하는 <see langword="Char" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-159">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="49898-160">드라이브를 지정하지 않거나 <c>Drive</c>가 길이가 0인 문자열("")인 경우 <see langword="CurDir" />은 현재 드라이브에 대한 경로를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-160">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-161">현재 경로를 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-161">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="49898-162">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="49898-163">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-164">현재 경로를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-164">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="49898-165">이 예제에서는 `CurDir` 현재 경로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-166">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="49898-167">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="49898-168">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49898-169">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="49898-170">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="49898-171">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-172">지정된 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-173">합니다 `Dir` 함수에서 여러 문자를 사용할 수 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="49898-174">`VbVolume` 특정 파일 이름 대신 드라이브 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="49898-175">제공 해야 합니다는 `PathName` 호출 하는 처음으로 `Dir` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="49898-176">다음 항목을 검색 하려면 후속 호출을 수행할 수는 `Dir` 함수 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-177">올바르게 실행 하려면를 `Dir` 함수에 필요 합니다 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 및 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여할.</span><span class="sxs-lookup"><span data-stu-id="49898-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="49898-178">자세한 내용은 <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, 및 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="49898-179">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="49898-180">값</span><span class="sxs-lookup"><span data-stu-id="49898-180">Value</span></span>|<span data-ttu-id="49898-181">상수</span><span class="sxs-lookup"><span data-stu-id="49898-181">Constant</span></span>|<span data-ttu-id="49898-182">설명</span><span class="sxs-lookup"><span data-stu-id="49898-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="49898-183">기본.</span><span class="sxs-lookup"><span data-stu-id="49898-183">Default.</span></span> <span data-ttu-id="49898-184">특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="49898-185">읽기 전용 파일, 그리고 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="49898-186">숨겨진된 파일 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="49898-187">시스템 파일 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="49898-188">볼륨 레이블이 지정 다른 특성을 지정 하는 경우 `vbVolume` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="49898-189">디렉터리 또는 폴더 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="49898-190">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="49898-191">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="49898-192">이러한 열거형은 Visual Basic 언어로 지정 되며 실제 값 대신 코드에서 어디서 나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-193">이 예제에서는 `Dir` 특정 파일 및 디렉터리가 존재 하는지 확인 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="49898-194">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-194">Optional.</span>
          </span>
          <span data-ttu-id="49898-195">파일 이름, 디렉터리나 폴더 이름 또는 드라이브 볼륨 레이블을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-195">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="49898-196">
            <c>PathName</c>이 없으면 길이가 0인 문자열(<see langword="&quot;&quot;" />)이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="49898-197">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-197">Optional.</span>
          </span>
          <span data-ttu-id="49898-198">파일 특성을 지정하는 값을 가진 열거형 또는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-198">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="49898-199">이 매개 변수를 생략하면 <see langword="Dir" />은 <c>PathName</c>과 일치하지만 특성이 없는 파일을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-199">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-200">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="49898-201">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="49898-202">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-203">지정된 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-204">합니다 `Dir` 함수에서 여러 문자를 사용할 수 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="49898-205">`VbVolume` 특정 파일 이름 대신 드라이브 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="49898-206">제공 해야 합니다는 `PathName` 호출 하는 처음으로 `Dir` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="49898-207">다음 항목을 검색 하려면 후속 호출을 수행할 수는 `Dir` 함수 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-208">올바르게 실행 하려면를 `Dir` 함수에 필요 합니다 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 및 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여할.</span><span class="sxs-lookup"><span data-stu-id="49898-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="49898-209">자세한 내용은 <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, 및 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="49898-210">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="49898-211">값</span><span class="sxs-lookup"><span data-stu-id="49898-211">Value</span></span>|<span data-ttu-id="49898-212">상수</span><span class="sxs-lookup"><span data-stu-id="49898-212">Constant</span></span>|<span data-ttu-id="49898-213">설명</span><span class="sxs-lookup"><span data-stu-id="49898-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="49898-214">기본.</span><span class="sxs-lookup"><span data-stu-id="49898-214">Default.</span></span> <span data-ttu-id="49898-215">특성이 없는 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="49898-216">특성이 없는 파일 외에도 읽기 전용 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="49898-217">특성이 없는 파일 외에도 숨겨진된 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="49898-218">특성이 없는 파일 외에도 시스템 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="49898-219">볼륨 레이블이 지정 다른 특성을 지정 하는 경우 `vbVolume` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="49898-220">디렉터리 또는 특성이 없는 파일 뿐 아니라 폴더를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="49898-221">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="49898-222">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="49898-223">이러한 열거형은 Visual Basic 언어로 지정 되며 실제 값 대신 코드에서 어디서 나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-224">이 예제에서는 `Dir` 특정 파일 및 디렉터리가 존재 하는지 확인 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-225">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-225">Required.</span>
          </span>
          <span data-ttu-id="49898-226">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-226">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-227">
            <see langword="True" /> 또는 순차적인 <see langword="Random" />용으로 연 파일의 끝에 도달하면 부울 값 <see langword="Input" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-228">
            <see langword="True" /> 또는 순차적인 <see langword="Random" />용으로 연 파일의 끝에 도달하면 부울 값 <see langword="Input" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-229">사용 하 여 `EOF` 파일의 끝을 지난 위치 입력 하 여 생성 된 오류를 방지 하려면.</span><span class="sxs-lookup"><span data-stu-id="49898-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="49898-230">합니다 `EOF` 함수에서 반환 `False` 파일의 끝에 도달할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="49898-231">열려 있는 파일을 사용 하 여 `Random` 또는 `Binary` 액세스 `EOF` 반환 `False` 마지막으로 실행 될 때까지 `FileGet` 함수는 전체 레코드를 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="49898-232">열려 있는 파일을 사용 하 여 `Binary` 를 사용 하 여 파일을 통해 읽으려는 시도가 액세스 합니다 `Input` 될 때까지 함수 `EOF` 반환 `True` 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="49898-233">사용 합니다 `LOF` 및 `Loc` 대신 함수 `EOF` 사용 하 여 이진 파일을 읽을 때 `Input`, 사용할지 `Get` 사용 하는 경우는 `EOF` 함수.</span><span class="sxs-lookup"><span data-stu-id="49898-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="49898-234">열려 있는 파일을 사용 하 여 `Output`하십시오 `EOF` 항상 반환 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-235">이 예제에서는 `EOF` 함수는 파일의 끝을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="49898-236">이 예에서는 가정 `Testfile` 은 여러 줄의 텍스트를 포함 하는 텍스트 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-237">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-237">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-238">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-238">Required.</span>
          </span>
          <span data-ttu-id="49898-239">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-239">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="49898-240">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-240">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-241">
            <see langword="FileOpen" /> 함수를 사용하여 연 파일의 파일 모드를 나타내는 열거형을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-242">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="FileAttr" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="49898-243">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-244">다음 열거형 값은 파일 액세스 모드를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-244">The following enumeration values indicate the file access mode:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="49898-245">값</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-245">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="49898-246">모드</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-246">Mode</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="49898-247">1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-247">1</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Input" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="49898-248">2</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-248">2</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Output" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="49898-249">4</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-249">4</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Random" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="49898-250">8</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-250">8</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Append" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="49898-251">32</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-251">32</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Binary" />
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-252">이 함수를 사용 하 여 연 파일의 파일 모드를 나타내는 열거형을 반환 합니다 `FileOpen` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-253">이 예제에서는 `FileAttr` 함수는 열려 있는 파일의 파일 모드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-254">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-254">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="49898-255">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-255">Optional.</span>
          </span>
          <span data-ttu-id="49898-256">닫을 0개 이상의 채널에 대한 매개 변수 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-256">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-257">
            <see langword="FileOpen" /> 함수를 사용하여 연 파일에 대한 입출력(I/O)을 끝냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-258">
            <see langword="My" />를 사용하면 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-258">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="49898-259">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-260">`FileClose` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-261">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-262">자세한 내용은 [방법: StreamReader 사용 하 여 파일에서 텍스트 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [방법: StreamWriter 사용 하 여 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), 및 [연습: 파일과 디렉터리 조작 Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="49898-263">생략 하면 `FileNumbers`, 모든 활성 파일을 열어는 `FileOpen` 함수 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="49898-264">에 대해 시작 된 파일을 닫으면 `Output` 또는 `Append`, 출력의 마지막 버퍼 해당 파일에 대 한 운영 체제 버퍼에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="49898-265">닫힌와 연결 된 공간 버퍼 모든 파일을 배포 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="49898-266">경우는 `FileClose` 함수 실행 되 고, 해당 파일을 사용 하 여 파일의 연결 끝 번호.</span><span class="sxs-lookup"><span data-stu-id="49898-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-267">이 예제에서는 합니다 `FileClose` 파일을 닫으려면 함수에 대 한 열 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-268">
            <paramref name="FileNumber" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-268">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="49898-269">End 문</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-269">End Statement</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md">
          <span data-ttu-id="49898-270">Stop 문(Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-270">Stop Statement (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-271">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-271">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="49898-272">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-272">Required.</span>
          </span>
          <span data-ttu-id="49898-273">복사할 파일의 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-273">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="49898-274">
            <c>Source</c>에는 소스 파일의 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-274">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="49898-275">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-275">Required.</span>
          </span>
          <span data-ttu-id="49898-276">대상 파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-276">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="49898-277">
            <c>Destination</c>에는 대상 파일의 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-277">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-278">파일을 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-278">Copies a file.</span>
          </span>
          <span data-ttu-id="49898-279">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="FileCopy" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="49898-280">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-281">사용 하려는 경우는 `FileCopy` 오류가 발생 하는 현재 열려 있는 파일에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="49898-282">`FileCopy` 로컬 드라이브에서 작동 하려면 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-283">이 예제에서는 `FileCopy` 다른 하나의 파일을 복사 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="49898-284">이 예제의 목적에 대 한 가정 `SrcFile` 는 데이터가 포함 된 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-285">
            <paramref name="Source" /> 또는 <paramref name="Destination" />이 잘못되었거나 지정되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-285">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-286">파일이 이미 열려 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-286">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-287">파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-287">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md">
          <span data-ttu-id="49898-288">방법: Visual Basic에서 다른 디렉터리에 파일의 복사본 만들기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">
          <span data-ttu-id="49898-289">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">
          <span data-ttu-id="49898-290">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-290">How to: Copy a Directory to Another Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="49898-291">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-291">Required.</span>
          </span>
          <span data-ttu-id="49898-292">파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-292">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="49898-293">
            <c>PathName</c>은 디렉터리 또는 폴더와 드라이브를 포함할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-293">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-294">파일을 기록한 날짜와 시간을 나타내는 <see langword="Date" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="49898-295">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileDateTime" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="49898-296">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-297">파일을 만들거나 마지막으로 수정한 날짜와 시간을 나타내는 <see langword="Date" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-297">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="49898-298">이 예제에서는 `FileDateTime` 함수는 날짜를 확인 하 고 파일 시간를 만들었거나 마지막으로 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="49898-299">형식의 날짜 및 시간 표시는 시스템의 로캘 설정을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-300">
            <paramref name="PathName" />이 잘못되었거나 와일드카드를 포함하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-300">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-301">대상 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-301">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-302">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-302">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-303">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-303">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-304">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-305">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-306">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-306">Required.</span>
          </span>
          <span data-ttu-id="49898-307">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-307">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-308">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-308">Required.</span>
          </span>
          <span data-ttu-id="49898-309">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-309">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-310">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-310">Optional.</span>
          </span>
          <span data-ttu-id="49898-311">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-312">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-312">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-313">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-314">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-315">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-316">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-317">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-318">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-319">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-320">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-321">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-321">Random Mode</span></span>  
 <span data-ttu-id="49898-322">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-323">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-324">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-325">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-326">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-327">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-328">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-329">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-330">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-331">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-332">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-333">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-334">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-335">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-336">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-337">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-338">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-339">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-340">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-341">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-342">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-343">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-344">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-345">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-346">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-347">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-348">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-349">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-349">Binary Mode</span></span>  
 <span data-ttu-id="49898-350">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-351">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-352">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-353">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-354">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-355">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-356">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-357">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-358">사용 하 여 파일에서 읽기를`FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-359">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-359">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-360">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-360">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-361">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-361">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-362">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-362">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-363">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-363">Required.</span>
          </span>
          <span data-ttu-id="49898-364">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-364">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-365">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-365">Required.</span>
          </span>
          <span data-ttu-id="49898-366">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-366">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-367">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-367">Optional.</span>
          </span>
          <span data-ttu-id="49898-368">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-369">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-369">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-370">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-371">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-372">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-373">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-374">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-375">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-376">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-377">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-378">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-378">Random Mode</span></span>  
 <span data-ttu-id="49898-379">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-380">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-381">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-382">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-383">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-384">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-385">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-386">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-387">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-388">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-389">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-390">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-391">설명자를 사용 하지 않으면.</span><span class="sxs-lookup"><span data-stu-id="49898-391">If the descriptor is not used.</span></span> <span data-ttu-id="49898-392">에 전달 된 크기와 배열 범위를 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-393">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-394">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-395">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-396">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-397">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-398">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-399">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-400">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-401">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-402">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-403">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-404">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-405">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-406">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-407">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-407">Binary Mode</span></span>  
 <span data-ttu-id="49898-408">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-409">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-410">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-411">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-412">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-413">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-414">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-415">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-416">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-417">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-417">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-418">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-419">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-419">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-420">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-420">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-421">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-421">Required.</span>
          </span>
          <span data-ttu-id="49898-422">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-422">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-423">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-423">Required.</span>
          </span>
          <span data-ttu-id="49898-424">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-424">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-425">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-425">Optional.</span>
          </span>
          <span data-ttu-id="49898-426">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-427">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-427">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-428">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-429">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-430">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-431">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-432">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-433">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-434">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-435">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-436">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-436">Random Mode</span></span>  
 <span data-ttu-id="49898-437">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-438">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-439">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-440">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-441">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-442">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-443">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-444">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-445">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-446">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-447">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-448">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-449">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-450">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-451">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-452">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-453">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-454">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-455">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-456">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-457">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-458">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-459">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-460">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-461">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-462">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-463">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-464">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-464">Binary Mode</span></span>  
 <span data-ttu-id="49898-465">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-466">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-467">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-468">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-469">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-470">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-471">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-472">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-473">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-474">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-474">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-475">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-475">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-476">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-476">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-477">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-477">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-478">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-478">Required.</span>
          </span>
          <span data-ttu-id="49898-479">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-479">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-480">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-480">Required.</span>
          </span>
          <span data-ttu-id="49898-481">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-481">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-482">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-482">Optional.</span>
          </span>
          <span data-ttu-id="49898-483">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-484">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-484">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-485">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-486">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-487">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-488">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-489">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-490">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-491">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-492">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-493">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-493">Random Mode</span></span>  
 <span data-ttu-id="49898-494">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-495">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를`FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-496">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-497">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-498">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-499">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-500">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-501">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-502">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-503">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-504">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-505">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-506">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-507">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-508">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-509">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-510">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-511">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-512">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-513">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-514">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-515">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-516">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-517">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-518">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-519">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-520">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-521">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-521">Binary Mode</span></span>  
 <span data-ttu-id="49898-522">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-523">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-524">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-525">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-526">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-527">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-528">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-529">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-530">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-531">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-531">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-532">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-532">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-533">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-533">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-534">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-534">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-535">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-535">Required.</span>
          </span>
          <span data-ttu-id="49898-536">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-536">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-537">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-537">Required.</span>
          </span>
          <span data-ttu-id="49898-538">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-538">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-539">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-539">Optional.</span>
          </span>
          <span data-ttu-id="49898-540">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-541">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-541">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-542">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-543">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-544">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-545">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-546">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-547">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-548">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-549">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-550">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-550">Random Mode</span></span>  
 <span data-ttu-id="49898-551">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-552">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-553">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-554">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-555">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-556">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-557">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-558">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-559">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-560">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-561">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-562">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-563">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-564">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-565">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-566">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-567">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-568">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-569">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-570">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-571">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-572">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-573">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-574">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-575">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-576">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-577">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-578">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-578">Binary Mode</span></span>  
 <span data-ttu-id="49898-579">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-580">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-581">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-582">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-583">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-584">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-585">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-586">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-587">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-588">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-588">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-589">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-589">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-590">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-590">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-591">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-591">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-592">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-592">Required.</span>
          </span>
          <span data-ttu-id="49898-593">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-593">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-594">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-594">Required.</span>
          </span>
          <span data-ttu-id="49898-595">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-595">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-596">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-596">Optional.</span>
          </span>
          <span data-ttu-id="49898-597">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-598">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-598">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-599">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-600">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-601">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-602">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-603">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-604">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-605">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-606">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-607">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-607">Random Mode</span></span>  
 <span data-ttu-id="49898-608">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-609">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-610">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-611">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-612">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-613">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-614">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-615">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-616">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-617">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-618">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-619">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-620">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-621">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-622">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-623">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-624">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-625">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-626">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-627">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-628">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-629">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-630">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-631">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-632">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-633">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-634">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-635">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-635">Binary Mode</span></span>  
 <span data-ttu-id="49898-636">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-637">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-638">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-639">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-640">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-641">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-642">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-643">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-644">사용 하 여 파일에서 읽기를`FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-645">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-646">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-647">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-647">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-648">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-649">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-649">Required.</span>
          </span>
          <span data-ttu-id="49898-650">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-651">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-651">Required.</span>
          </span>
          <span data-ttu-id="49898-652">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-652">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-653">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-653">Optional.</span>
          </span>
          <span data-ttu-id="49898-654">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-655">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-655">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-656">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-657">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-658">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-659">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-660">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-661">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-662">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-663">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-664">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-664">Random Mode</span></span>  
 <span data-ttu-id="49898-665">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-666">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-667">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-668">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-669">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-670">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-671">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-672">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-673">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-674">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-675">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-676">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-677">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-678">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-679">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-680">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-681">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-682">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-683">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-684">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-685">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-686">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-687">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-688">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-689">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-690">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-691">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-692">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-692">Binary Mode</span></span>  
 <span data-ttu-id="49898-693">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-694">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-695">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-696">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-697">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-698">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-699">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-700">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-701">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-702">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-702">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-703">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-703">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-704">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-704">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-705">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-705">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-706">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-706">Required.</span>
          </span>
          <span data-ttu-id="49898-707">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-708">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-708">Required.</span>
          </span>
          <span data-ttu-id="49898-709">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-709">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-710">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-710">Optional.</span>
          </span>
          <span data-ttu-id="49898-711">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-712">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-712">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-713">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-714">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-715">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-716">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-717">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-718">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-719">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-720">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-721">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-721">Random Mode</span></span>  
 <span data-ttu-id="49898-722">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-723">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-724">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-725">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-726">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-727">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-728">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-729">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-730">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-731">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-732">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-733">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-734">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-735">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-736">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-737">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-738">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-739">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-740">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-741">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-742">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-743">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-744">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-745">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-746">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-747">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-748">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-749">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-749">Binary Mode</span></span>  
 <span data-ttu-id="49898-750">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-751">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-752">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-753">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-754">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-755">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-756">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-757">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-758">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-759">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-759">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-760">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-760">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-761">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-761">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-762">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-762">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-763">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-763">Required.</span>
          </span>
          <span data-ttu-id="49898-764">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-764">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-765">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-765">Required.</span>
          </span>
          <span data-ttu-id="49898-766">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-766">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-767">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-767">Optional.</span>
          </span>
          <span data-ttu-id="49898-768">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-769">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-769">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-770">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-771">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-772">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-773">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-774">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-775">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-776">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-777">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-778">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-778">Random Mode</span></span>  
 <span data-ttu-id="49898-779">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-780">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-781">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-782">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-783">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-784">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-785">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-786">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-787">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-788">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-789">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-790">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-791">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-792">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-793">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-794">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-795">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-796">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-797">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-798">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-799">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-800">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-801">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-802">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-803">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-804">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-805">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-806">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-806">Binary Mode</span></span>  
 <span data-ttu-id="49898-807">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-808">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-809">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-810">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-811">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-812">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-813">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-814">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-815">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-816">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-816">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-817">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-818">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-819">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-820">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-820">Required.</span>
          </span>
          <span data-ttu-id="49898-821">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-821">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-822">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-822">Required.</span>
          </span>
          <span data-ttu-id="49898-823">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-823">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-824">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-824">Optional.</span>
          </span>
          <span data-ttu-id="49898-825">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-826">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-826">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-827">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-828">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-829">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-830">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-831">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-832">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-833">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-834">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-835">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-835">Random Mode</span></span>  
 <span data-ttu-id="49898-836">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-837">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-838">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-839">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-840">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-841">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-842">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-843">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-844">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-845">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-846">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-847">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-848">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-849">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-850">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-851">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-852">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-853">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-854">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-855">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-856">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-857">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-858">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-859">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-860">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-861">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-862">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-863">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-863">Binary Mode</span></span>  
 <span data-ttu-id="49898-864">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-865">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-866">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-867">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-868">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-869">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-870">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-871">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-872">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-873">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-873">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-874">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-874">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-875">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-875">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-876">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-876">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-877">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-877">Required.</span>
          </span>
          <span data-ttu-id="49898-878">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-878">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-879">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-879">Required.</span>
          </span>
          <span data-ttu-id="49898-880">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-880">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-881">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-881">Optional.</span>
          </span>
          <span data-ttu-id="49898-882">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-883">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-883">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-884">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-885">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-886">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-887">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-888">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-889">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-890">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-891">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-892">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-892">Random Mode</span></span>  
 <span data-ttu-id="49898-893">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-894">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-895">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-896">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-897">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-898">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-899">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-900">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-901">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-902">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-903">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-904">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-905">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-906">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-907">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-908">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-909">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-910">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-911">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-912">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-913">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-914">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-915">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-916">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-917">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-918">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-919">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-920">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-920">Binary Mode</span></span>  
 <span data-ttu-id="49898-921">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-922">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-923">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-924">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-925">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-926">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-927">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-928">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-929">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-930">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-930">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-931">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-931">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-932">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-932">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-933">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-933">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-934">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-934">Required.</span>
          </span>
          <span data-ttu-id="49898-935">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-935">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-936">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-936">Required.</span>
          </span>
          <span data-ttu-id="49898-937">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-937">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-938">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-938">Optional.</span>
          </span>
          <span data-ttu-id="49898-939">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="49898-940">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-940">Optional.</span>
          </span>
          <span data-ttu-id="49898-941">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-941">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="49898-942">길이를 설명하는 문자열에 대해 2바이트 설명자를 쓸 것인지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="49898-943">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-943">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-944">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-944">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-945">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-946">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-947">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-948">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-949">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-950">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-951">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-952">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-953">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-953">Random Mode</span></span>  
 <span data-ttu-id="49898-954">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-955">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-956">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-957">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-958">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-959">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-960">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-961">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-962">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-963">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-964">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-965">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-966">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-967">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-968">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-969">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-970">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-971">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-972">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-973">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-974">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-975">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-976">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-977">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-978">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-979">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-980">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-981">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-981">Binary Mode</span></span>  
 <span data-ttu-id="49898-982">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-983">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-984">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-985">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-986">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-987">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-988">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-989">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-990">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-991">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-991">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-992">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-992">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-993">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-993">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-994">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-994">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-995">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-995">Required.</span>
          </span>
          <span data-ttu-id="49898-996">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-996">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-997">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-997">Required.</span>
          </span>
          <span data-ttu-id="49898-998">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-998">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-999">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-999">Optional.</span>
          </span>
          <span data-ttu-id="49898-1000">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="49898-1001">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1001">Optional.</span>
          </span>
          <span data-ttu-id="49898-1002">배열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1002">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="49898-1003">배열을 동적으로 처리할 것인지의 여부와 배열의 크기와 범위를 설명하는 배열 설명자가 필요한지의 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="49898-1004">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1004">Optional.</span>
          </span>
          <span data-ttu-id="49898-1005">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1005">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="49898-1006">길이를 설명하는 문자열에 대해 2바이트 설명자를 쓸 것인지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="49898-1007">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1007">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1008">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1008">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-1009">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="49898-1010">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1011">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1012">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="49898-1013">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1014">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-1015">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-1016">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1017">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1017">Random Mode</span></span>  
 <span data-ttu-id="49898-1018">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1019">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1020">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1021">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-1022">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-1023">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1024">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-1025">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1026">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="49898-1027">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1028">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="49898-1029">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="49898-1030">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="49898-1031">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1032">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1033">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1034">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="49898-1035">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="49898-1036">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="49898-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="49898-1037">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="49898-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-1038">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="49898-1039">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-1040">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-1041">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1042">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="49898-1043">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="49898-1044">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1045">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1045">Binary Mode</span></span>  
 <span data-ttu-id="49898-1046">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1047">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1048">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1049">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1050">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="49898-1051">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="49898-1052">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1053">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="49898-1054">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1055">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1055">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1056">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1056">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-1057">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1057">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1058">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1058">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1059">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1059">Required.</span>
          </span>
          <span data-ttu-id="49898-1060">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1060">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1061">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1061">Required.</span>
          </span>
          <span data-ttu-id="49898-1062">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1062">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1063">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1063">Optional.</span>
          </span>
          <span data-ttu-id="49898-1064">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1065">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1065">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="49898-1066">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGetObject" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="49898-1067">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1068">합니다 `FileGetObject` 함수 대신 사용 됩니다 `FileGet` 경우 컴파일할 때 모호성을 피할 수 형식 `Object` 와 같은 다른 형식 대신 반환 됩니다 `Integer`를 `Long`, `Short`등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="49898-1069">작성 하려는 경우는 `Variant` 형식 `FileGetObject` 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="49898-1070">의문이 있으면 두 번째 매개 변수에 대 한 개체를 사용 하는 경우에 것이 항상 좋습니다를 사용 하는 `FilePutObject` 고 `FileGetObject`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="49898-1071">`FileGetObject` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1072">데이터를 읽을 `FileGetObject` 일반적으로 작성 된 `FilePutObject`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="49898-1073">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1074">생략 하면 `RecordNumber`, `FileGetObject` 마지막 레코드 또는 바이트를 읽고 `FileGetObject` 또는 `FilePutObject` 함수 (또는 마지막 가리키는 `Seek` 함수).</span><span class="sxs-lookup"><span data-stu-id="49898-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1075">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1075">Random Mode</span></span>  
 <span data-ttu-id="49898-1076">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1077">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGetObject` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1078">끝 하나의 레코드와 다음 레코드의 시작 부분 사이의 공간 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1079">데이터의 안쪽 여백을 정확 하 게 확인할 수 없으므로 레코드 길이 읽을 데이터의 길이 일치 하도록 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="49898-1080">읽어 들일 변수가 기본적으로 문자열 인지 `FileGetObject` 문자열 길이 포함 하는 2 바이트 설명자를 읽고 다음 변수에 전달 되는 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="49898-1081">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1082">Visual Basic 6.0 및 이전 버전에는 고정 길이 문자열 및 파일을 읽을 때, 길이 설명자를 쓰지을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="49898-1083">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="49898-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1084">읽어 들일 변수의 배열을 인 레코드 길이으로 지정 하는 경우는 `RecordLength` 의 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1085">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1086">길이 2 + 8 시간 차원 수: 2 + 8 \* 더한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="49898-1087">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어 디스크:</span><span class="sxs-lookup"><span data-stu-id="49898-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="49898-1088">218 바이트 같이 배포 됩니다. (2 + 8 \* 2), 설명자에 대 한 18 바이트 및 (4 \* 5 \* 10) 데이터에 대 한 100 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="49898-1089">`FileGetObject` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="49898-1090">사용자 정의 형식에서 디스크를 동적 배열 (로 작성 된 `FilePutObject`)는 설명자가 2 + 8 시간 차원 수가 옵니다: 2 + 8 \* 더한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="49898-1091">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 모든 배열 및 해당 설명자를 포함 하 여 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="49898-1092"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> 클래스를 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1093">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1093">Binary Mode</span></span>  
 <span data-ttu-id="49898-1094">파일에서 열에 대 한 `Binary` 모드의 모든는 `Random` 이러한 예외를 사용 하 여 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="49898-1095">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1096">`FileGetObject` 변수를 읽고 모든 디스크에서 연속적으로 즉, 레코드 간에 패딩 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1097">구조에 포함 되지 않은 모든 배열에 대 한 `FileGetObject` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="49898-1098">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="49898-1099">`FileGetObject` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1100">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-1101">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-1102">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1103">다음 예제에서는 레코드를 읽고 테스트 파일에 다음이 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-1104">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1104">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1105">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1105">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="49898-1106">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1106">Required.</span>
          </span>
          <span data-ttu-id="49898-1107">파일을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1107">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="49898-1108">
            <c>PathName</c>은 디렉터리 또는 폴더와 드라이브를 포함할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1108">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1109">파일 길이를 바이트로 지정하는 <see langword="Long" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="49898-1110">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileLen" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="49898-1111">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-1112">파일 길이를 바이트 단위로 지정하는 <see langword="Long" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1112">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1113">지정한 파일이 열려 있으면 시기는 `FileLen` 함수 호출 되 면 반환 된 값으로 열었을 때 파일의 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-1114">열려 있는 파일의 현재 길이 가져오려면는 `LOF` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1115">이 예제에서는 `FileLen` 파일의 길이 바이트 단위로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="49898-1116">이 예제의 목적에 대 한 가정 `TestFile` 은 일부 데이터를 포함 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-1117">파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1117">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-1118">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1118">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1119">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1119">Required.</span>
          </span>
          <span data-ttu-id="49898-1120">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1120">Any valid file number.</span>
          </span>
          <span data-ttu-id="49898-1121">다음으로 사용 가능한 파일 번호를 가져오려면 <see langword="FreeFile" /> 함수를 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="49898-1122">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1122">Required.</span>
          </span>
          <span data-ttu-id="49898-1123">파일 이름을 지정하는 <see langword="String" /> 식으로, 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1123">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="49898-1124">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1124">Required.</span>
          </span>
          <span data-ttu-id="49898-1125">
            <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, <see langword="Random" /> 등의 파일 모드를 지정하는 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="49898-1126">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenMode" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="49898-1127">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1127">Optional.</span>
          </span>
          <span data-ttu-id="49898-1128">
            <see langword="Read" />, <see langword="Write" />, <see langword="ReadWrite" /> 등 열려 있는 파일에 허용되는 작업을 지정하는 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="49898-1129">기본값은 <see langword="ReadWrite" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1129">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="49898-1130">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenAccess" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="49898-1131">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1131">Optional.</span>
          </span>
          <span data-ttu-id="49898-1132">
            <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, <see langword="Lock Read Write" /> 등 열려 있는 파일에 대해 다른 프로세스에 허용되지 않는 작업을 지정하는 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="49898-1133">기본값은 <see langword="Lock Read Write" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1133">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="49898-1134">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenShare" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="49898-1135">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1135">Optional.</span>
          </span>
          <span data-ttu-id="49898-1136">32,767(바이트)보다 작거나 같은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1136">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="49898-1137">임의 액세스용으로 연 파일의 경우 이 값은 레코드 길이가 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1137">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="49898-1138">순차 파일의 경우 이 값은 버퍼링된 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1138">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1139">입력 또는 출력할 파일을 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1139">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="49898-1140">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileOpen" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="49898-1141">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1142">`FileOpen` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-1143">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-1144">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-1145">모든 I/O 작업을 수행 하려면 파일을 열어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="49898-1146">`FileOpen` 파일 I/O에 대 한 버퍼를 할당 하 고 버퍼를 사용 하는 액세스 모드를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-1147">파일에 쓸 때 응용 프로그램 할 파일을 만듭니다. 작성 하려는 파일에 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="49898-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="49898-1148">이렇게 하려면 파일을 만들 디렉터리에 대 한 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="49898-1149">그러나 파일을 지정 하 여 `FileName` 존재 하면 응용 프로그램 `Write` 파일 자체에 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="49898-1150">보안을 강화 하려면 가능한 한, 배포 및 권한 부여 하는 동안 파일을 만들고 하는 아무 곳에 나 `Write` 해당 파일에 대 한 전체 디렉터리 대신만 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="49898-1151">보안을 강화 하려면 대신 루트 디렉터리 또는 Program Files 디렉터리에 사용자를 디렉터리에 데이터를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="49898-1152">열에 대 한 채널을 사용 하 여 찾을 수 있습니다는 `FreeFile()` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-1153">`FileOpen` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형 부분 신뢰 상황에서는 해당 실행에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="49898-1154">자세한 내용은 참조 하세요. <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1155">다양 한 용도 보여 주는이 예제는 `FileOpen` 함수 입력 및 출력 파일을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="49898-1156">다음 코드 파일을 엽니다 `TestFile` 에서 `Input` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="49898-1157">이 예제에서 파일을 엽니다 `Binary` 쓰기 작업용 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="49898-1158">다음 예제에서 파일을 엽니다 `Random` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="49898-1159">구조체의 레코드를 포함 하는 파일 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="49898-1160">이 코드 예제에서 파일을 엽니다 `Output` 모드; 읽거나 파일에 쓸 모든 프로세스 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="49898-1161">이 코드 예제에서 파일을 엽니다 `Binary` 읽기에 대 한 모드 다른 프로세스가 파일을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1162">레코드 길이가 음수입니다(–1은 아님).</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1162">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1163">
            <paramref name="FileName" />이 이미 열려 있거나 <paramref name="FileName" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1163">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-1164">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1164">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1165">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1165">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-1166">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1166">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1167">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1168">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1169">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1169">Required.</span>
          </span>
          <span data-ttu-id="49898-1170">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1170">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1171">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1171">Required.</span>
          </span>
          <span data-ttu-id="49898-1172">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1172">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1173">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1173">Optional.</span>
          </span>
          <span data-ttu-id="49898-1174">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1175">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1175">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1176">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1177">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1178">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1179">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1180">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1181">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1182">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1183">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1184">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1185">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1185">Random Mode</span></span>  
 <span data-ttu-id="49898-1186">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1187">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1188">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1189">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1190">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1191">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1192">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1193">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1194">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1195">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1196">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1197">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1198">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1199">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1200">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1201">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1202">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1203">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1204">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1205">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1206">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1207">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1208">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1209">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1210">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1211">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1212">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1213">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1213">Binary Mode</span></span>  
 <span data-ttu-id="49898-1214">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1215">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1216">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1217">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1218">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1219">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1220">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1221">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1222">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1223">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1224">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1225">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1226">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1226">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1227">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1227">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1228">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1228">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1229">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1229">Required.</span>
          </span>
          <span data-ttu-id="49898-1230">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1230">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1231">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1231">Required.</span>
          </span>
          <span data-ttu-id="49898-1232">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1232">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1233">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1233">Optional.</span>
          </span>
          <span data-ttu-id="49898-1234">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1235">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1235">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1236">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1237">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1238">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1239">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1240">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1241">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1242">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1243">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1244">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1245">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1245">Random Mode</span></span>  
 <span data-ttu-id="49898-1246">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1247">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1248">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1249">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1250">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1251">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1252">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1253">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1254">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1255">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1256">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1257">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1258">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1259">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1260">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1261">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1262">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1263">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1264">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1265">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1266">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1267">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1268">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1269">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1270">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1271">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1272">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1273">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1273">Binary Mode</span></span>  
 <span data-ttu-id="49898-1274">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1275">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1276">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1277">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1278">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1279">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1280">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1281">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1282">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1283">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1284">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1285">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1286">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1286">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1287">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1287">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1288">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1288">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1289">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1289">Required.</span>
          </span>
          <span data-ttu-id="49898-1290">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1290">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1291">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1291">Required.</span>
          </span>
          <span data-ttu-id="49898-1292">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1292">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1293">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1293">Optional.</span>
          </span>
          <span data-ttu-id="49898-1294">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1295">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1295">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1296">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1297">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1298">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1299">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1300">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1301">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1302">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1303">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1304">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1305">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1305">Random Mode</span></span>  
 <span data-ttu-id="49898-1306">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1307">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1308">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1309">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1310">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1311">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1312">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1313">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1314">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1315">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1316">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1317">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1318">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1319">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1320">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1321">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1322">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1323">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1324">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1325">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1326">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1327">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1328">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1329">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1330">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1331">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1332">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1333">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1333">Binary Mode</span></span>  
 <span data-ttu-id="49898-1334">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1335">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1336">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1337">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1338">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1339">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1340">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1341">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1342">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1343">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1344">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1345">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1346">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1346">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1347">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1347">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1348">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1348">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1349">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1349">Required.</span>
          </span>
          <span data-ttu-id="49898-1350">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1350">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1351">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1351">Required.</span>
          </span>
          <span data-ttu-id="49898-1352">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1352">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1353">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1353">Optional.</span>
          </span>
          <span data-ttu-id="49898-1354">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1355">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1355">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1356">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1357">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1358">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1359">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1360">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1361">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1362">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1363">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1364">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1365">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1365">Random Mode</span></span>  
 <span data-ttu-id="49898-1366">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1367">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1368">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1369">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1370">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1371">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1372">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1373">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1374">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1375">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1376">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1377">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1378">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1379">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1380">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1381">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1382">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1383">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1384">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1385">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1386">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1387">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1388">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1389">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1390">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1391">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1392">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1393">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1393">Binary Mode</span></span>  
 <span data-ttu-id="49898-1394">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1395">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1396">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1397">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1398">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1399">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1400">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1401">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1402">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1403">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1404">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1405">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1406">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1406">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1407">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1408">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1408">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1409">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1409">Required.</span>
          </span>
          <span data-ttu-id="49898-1410">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1410">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1411">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1411">Required.</span>
          </span>
          <span data-ttu-id="49898-1412">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1412">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1413">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1413">Optional.</span>
          </span>
          <span data-ttu-id="49898-1414">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1415">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1415">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1416">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1417">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1418">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1419">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1420">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1421">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1422">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1423">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1424">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1425">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1425">Random Mode</span></span>  
 <span data-ttu-id="49898-1426">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1427">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1428">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1429">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1430">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1431">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1432">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1433">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1434">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1435">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1436">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1437">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1438">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1439">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1440">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1441">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1442">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1443">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1444">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1445">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1446">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1447">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1448">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1449">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1450">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1451">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1452">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1453">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1453">Binary Mode</span></span>  
 <span data-ttu-id="49898-1454">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1455">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1456">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1457">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1458">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1459">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1460">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1461">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1462">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1463">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1464">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1465">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1466">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1466">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1467">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1467">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1468">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1468">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1469">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1469">Required.</span>
          </span>
          <span data-ttu-id="49898-1470">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1471">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1471">Required.</span>
          </span>
          <span data-ttu-id="49898-1472">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1473">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1473">Optional.</span>
          </span>
          <span data-ttu-id="49898-1474">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1475">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1476">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1477">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1478">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1479">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1480">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1481">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1482">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1483">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1484">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1485">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1485">Random Mode</span></span>  
 <span data-ttu-id="49898-1486">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1487">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1488">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1489">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1490">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1491">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1492">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1493">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1494">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1495">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1496">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1497">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1498">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1499">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1500">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1501">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1502">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1503">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1504">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1505">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1506">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1507">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1508">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1509">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1510">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1511">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1512">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1513">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1513">Binary Mode</span></span>  
 <span data-ttu-id="49898-1514">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1515">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1516">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1517">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1518">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1519">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1520">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1521">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1522">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1523">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1524">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1525">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1526">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1527">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1528">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1528">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1529">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1529">Required.</span>
          </span>
          <span data-ttu-id="49898-1530">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1531">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1531">Required.</span>
          </span>
          <span data-ttu-id="49898-1532">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1533">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1533">Optional.</span>
          </span>
          <span data-ttu-id="49898-1534">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1535">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1536">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1537">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1538">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1539">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1540">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1541">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1542">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1543">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1544">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1545">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1545">Random Mode</span></span>  
 <span data-ttu-id="49898-1546">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1547">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1548">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1549">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1550">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1551">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1552">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1553">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1554">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1555">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1556">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를`VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1557">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1558">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1559">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1560">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1561">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1562">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1563">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1564">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1565">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1566">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1567">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1568">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1569">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1570">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1571">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1572">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1573">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1573">Binary Mode</span></span>  
 <span data-ttu-id="49898-1574">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1575">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1576">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1577">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1578">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1579">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1580">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1581">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1582">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1583">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1584">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1585">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1586">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1587">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1588">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1588">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1589">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1589">Required.</span>
          </span>
          <span data-ttu-id="49898-1590">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1590">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1591">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1591">Required.</span>
          </span>
          <span data-ttu-id="49898-1592">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1592">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1593">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1593">Optional.</span>
          </span>
          <span data-ttu-id="49898-1594">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1595">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1595">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1596">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1597">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1598">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1599">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1600">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1601">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1602">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1603">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1604">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1605">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1605">Random Mode</span></span>  
 <span data-ttu-id="49898-1606">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1607">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1608">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1609">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1610">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1611">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1612">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1613">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1614">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1615">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1616">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1617">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1618">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1619">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1620">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1621">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1622">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1623">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1624">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1625">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1626">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1627">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1628">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1629">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1630">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1631">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1632">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1633">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1633">Binary Mode</span></span>  
 <span data-ttu-id="49898-1634">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1635">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1636">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1637">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1638">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1639">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1640">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1641">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1642">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1643">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1644">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1645">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1646">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1646">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1647">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1647">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1648">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1649">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1649">Required.</span>
          </span>
          <span data-ttu-id="49898-1650">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1651">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1651">Required.</span>
          </span>
          <span data-ttu-id="49898-1652">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1652">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1653">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1653">Optional.</span>
          </span>
          <span data-ttu-id="49898-1654">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1655">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1655">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1656">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1657">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1658">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1659">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1660">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1661">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1662">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1663">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1664">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1665">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1665">Random Mode</span></span>  
 <span data-ttu-id="49898-1666">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1667">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1668">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1669">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1670">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1671">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1672">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1673">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1674">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1675">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1676">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1677">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1678">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1679">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1680">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1681">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1682">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1683">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1684">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1685">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1686">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1687">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1688">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1689">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1690">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1691">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1692">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1693">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1693">Binary Mode</span></span>  
 <span data-ttu-id="49898-1694">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1695">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1696">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1697">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1698">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1699">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1700">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1701">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1702">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1703">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1704">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1705">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1706">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1706">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1707">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1707">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1708">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1708">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1709">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1709">Required.</span>
          </span>
          <span data-ttu-id="49898-1710">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1710">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1711">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1711">Required.</span>
          </span>
          <span data-ttu-id="49898-1712">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1712">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1713">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1713">Optional.</span>
          </span>
          <span data-ttu-id="49898-1714">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1715">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1715">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1716">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1717">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1718">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1719">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1720">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1721">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1722">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1723">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1724">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1725">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1725">Random Mode</span></span>  
 <span data-ttu-id="49898-1726">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1727">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1728">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1729">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1730">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1731">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1732">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1733">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1734">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1735">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1736">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1737">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1738">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1739">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1740">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1741">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1742">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1743">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1744">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1745">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1746">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1747">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1748">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1749">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1750">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1751">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1752">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1753">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1753">Binary Mode</span></span>  
 <span data-ttu-id="49898-1754">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1755">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1756">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1757">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1758">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1759">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1760">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1761">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1762">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1763">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1764">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1765">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1766">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1766">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1767">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1767">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1768">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1768">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1769">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1769">Required.</span>
          </span>
          <span data-ttu-id="49898-1770">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1770">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1771">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1771">Required.</span>
          </span>
          <span data-ttu-id="49898-1772">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1772">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1773">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1773">Optional.</span>
          </span>
          <span data-ttu-id="49898-1774">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1775">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1775">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1776">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1777">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1778">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1779">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1780">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1781">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1782">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1783">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1784">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1785">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1785">Random Mode</span></span>  
 <span data-ttu-id="49898-1786">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1787">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를`RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1788">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1789">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1790">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1791">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1792">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1793">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1794">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1795">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1796">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1797">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1798">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1799">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1800">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1801">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1802">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1803">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1804">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1805">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1806">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1807">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1808">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1809">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1810">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1811">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1812">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1813">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1813">Binary Mode</span></span>  
 <span data-ttu-id="49898-1814">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1815">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1816">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1817">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1818">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1819">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1820">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1821">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1822">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1823">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1824">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1825">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1826">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1826">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1827">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1827">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1828">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1828">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1829">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1829">Required.</span>
          </span>
          <span data-ttu-id="49898-1830">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1830">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1831">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1831">Required.</span>
          </span>
          <span data-ttu-id="49898-1832">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1832">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1833">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1833">Optional.</span>
          </span>
          <span data-ttu-id="49898-1834">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1835">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1835">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1836">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1837">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1838">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1839">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1840">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1841">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1842">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1843">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1844">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1845">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1845">Random Mode</span></span>  
 <span data-ttu-id="49898-1846">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1847">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1848">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1849">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1850">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1851">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1852">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1853">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1854">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1855">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1856">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1857">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1858">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1859">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1860">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1861">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1862">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1863">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1864">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1865">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1866">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1867">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1868">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1869">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1870">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1871">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1872">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1873">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1873">Binary Mode</span></span>  
 <span data-ttu-id="49898-1874">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1875">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1876">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1877">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1878">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1879">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1880">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1881">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1882">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1883">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1884">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1885">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1886">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1886">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1887">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1887">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1888">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1888">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1889">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1889">Required.</span>
          </span>
          <span data-ttu-id="49898-1890">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1891">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1891">Required.</span>
          </span>
          <span data-ttu-id="49898-1892">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1892">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1893">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1893">Optional.</span>
          </span>
          <span data-ttu-id="49898-1894">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="49898-1895">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1895">Optional.</span>
          </span>
          <span data-ttu-id="49898-1896">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="49898-1897">문자열에 대한 2바이트의 문자열 길이 설명자를 파일에 쓸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="49898-1898">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1899">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1900">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1901">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1902">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1903">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1904">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1905">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1906">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1907">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1908">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1909">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1909">Random Mode</span></span>  
 <span data-ttu-id="49898-1910">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1911">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1912">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1913">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1914">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1915">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1916">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1917">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1918">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1919">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1920">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1921">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1922">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1923">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1924">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1925">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1926">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1927">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1928">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1929">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1930">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1931">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1932">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-1933">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-1934">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-1935">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-1936">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-1937">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1937">Binary Mode</span></span>  
 <span data-ttu-id="49898-1938">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-1939">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-1940">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-1941">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-1942">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-1943">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-1944">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-1945">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-1946">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-1947">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-1948">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-1949">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-1950">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-1951">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-1952">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1952">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-1953">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1953">Required.</span>
          </span>
          <span data-ttu-id="49898-1954">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-1955">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1955">Required.</span>
          </span>
          <span data-ttu-id="49898-1956">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-1957">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1957">Optional.</span>
          </span>
          <span data-ttu-id="49898-1958">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="49898-1959">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1959">Optional.</span>
          </span>
          <span data-ttu-id="49898-1960">배열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1960">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="49898-1961">배열을 동적으로 처리할 것인지의 여부와 길이를 설명하는 문자열에 대한 배열 설명자를 쓸 것인지의 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="49898-1962">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1962">Optional.</span>
          </span>
          <span data-ttu-id="49898-1963">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1963">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="49898-1964">문자열에 대한 2바이트의 문자열 길이 설명자를 파일에 쓸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="49898-1965">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1965">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-1966">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1966">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-1967">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="49898-1968">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-1969">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-1970">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="49898-1971">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-1972">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="49898-1973">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-1974">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-1975">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-1976">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-1976">Random Mode</span></span>  
 <span data-ttu-id="49898-1977">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-1978">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-1979">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-1980">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-1981">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="49898-1982">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="49898-1983">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="49898-1984">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-1985">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-1986">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-1987">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-1988">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-1989">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-1990">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="49898-1991">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="49898-1992">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="49898-1993">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="49898-1994">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="49898-1995">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-1996">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="49898-1997">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-1998">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="49898-1999">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="49898-2000">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="49898-2001">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="49898-2002">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="49898-2003">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="49898-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-2004">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-2004">Binary Mode</span></span>  
 <span data-ttu-id="49898-2005">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="49898-2006">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="49898-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="49898-2007">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-2008">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="49898-2009">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="49898-2010">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="49898-2011">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="49898-2012">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="49898-2013">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="49898-2014">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2015">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="49898-2016">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-2017">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2017">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2018">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2018">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-2019">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2019">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2020">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2020">Required.</span>
          </span>
          <span data-ttu-id="49898-2021">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2021">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2022">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2022">Required.</span>
          </span>
          <span data-ttu-id="49898-2023">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2023">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="49898-2024">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2024">Optional.</span>
          </span>
          <span data-ttu-id="49898-2025">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2026">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2026">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="49898-2027">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePutObject" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="49898-2028">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2029">합니다 `FilePutObject` 함수 대신 사용 됩니다 `FilePut` 경우 컴파일할 때 모호성을 피할 수 형식 `Object` 와 같은 다른 형식 대신 전달 됩니다 `Integer`를 `Long`, `Short`등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="49898-2030">`FilePutObject` 개체를 설명 하는 설명자를 읽고 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="49898-2031">작성 하려는 경우는 `Variant` 형식 `FilePutObject` 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="49898-2032">의문이 있으면 두 번째 매개 변수에 대 한 개체를 사용 하는 경우, 항상 사용 하는 권장 `FilePutObject` 고 `FileGetObject`입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="49898-2033">`FilePutObject` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-2034">`FilePutObject`로 작성된 데이터는 일반적으로 `FileGetObject`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="49898-2035">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="49898-2036">생략 하면 `RecordNumber`, `FilePutObject` 마지막 뒤에 다음 레코드 또는 바이트를 씁니다 `FileGetObject` 하거나 `FilePutObject` 함수 (마지막 가리키는 레코드 또는 바이트 또는 `Seek` 함수).</span><span class="sxs-lookup"><span data-stu-id="49898-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="49898-2037">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="49898-2038">`FilePutObject` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="49898-2039">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePutObject`를 사용 하 여 동일한 작업을 수행 해야 `FileGetObject`, 예상 길이 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="49898-2040">임의 모드</span><span class="sxs-lookup"><span data-stu-id="49898-2040">Random Mode</span></span>  
 <span data-ttu-id="49898-2041">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="49898-2042">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePutObject` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="49898-2043">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="49898-2044">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="49898-2045">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="49898-2046">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePutObject` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="49898-2047">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePutObject` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="49898-2048">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="49898-2049">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePutObject` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="49898-2050">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="49898-2051">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="49898-2052">경우 변수를 쓰는 배열에서 지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="49898-2053">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="49898-2054">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="49898-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="49898-2055">이진 모드</span><span class="sxs-lookup"><span data-stu-id="49898-2055">Binary Mode</span></span>  
 <span data-ttu-id="49898-2056">파일에서 열에 대 한 `Binary` 모드에서는 모든를 `Random` 모드 규칙 적용을 제외 하 고:</span><span class="sxs-lookup"><span data-stu-id="49898-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="49898-2057">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="49898-2058">`FilePutObject` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2059">이 예제에서는 `FilePutObject` 함수 파일에 쓸 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-2060">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2060">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2061">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2061">Required.</span>
          </span>
          <span data-ttu-id="49898-2062">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2062">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="49898-2063">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2063">Required.</span>
          </span>
          <span data-ttu-id="49898-2064">0에서 255 사이의 숫자 식으로 새 줄이 시작되기 전에 줄에 표시되는 문자의 수를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2064">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="49898-2065">
            <c>RecordWidth</c>가 0이면 줄 길이에 제한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2065">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="49898-2066">
            <c>RecordWidth</c>의 기본값은 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2066">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2067">
            <see langword="FileOpen" /> 함수를 사용하여 연 파일에 출력 줄 너비를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="49898-2068">이 예제에서는 `FileWidth` 파일에 대 한 출력 줄 너비를 설정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2069">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2069">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2070">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2070">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49898-2071">
            <see langword="Integer" /> 함수에서 사용할 수 있는 다음 파일 번호를 나타내는 <see langword="FileOpen" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2072">
            <see langword="Integer" /> 함수에서 사용할 수 있는 다음 파일 번호를 나타내는 <see langword="FileOpen" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2073">사용 하 여 `FreeFile` 이미 사용 되지 않는 파일 번호를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2074">이 예제에서는 `FreeFile` 다음 사용 가능한 파일 수를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="49898-2075">루프 내에서 출력에 대 한 5 개의 파일이 열리고 몇 가지 샘플 데이터는 각각에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2076">사용 중인 파일 수가 255개를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2076">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-2077">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2077">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="49898-2078">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2078">Required.</span>
          </span>
          <span data-ttu-id="49898-2079">파일, 디렉터리 또는 폴더 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2079">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="49898-2080">
            <c>PathName</c>에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2080">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2081">파일, 디렉터리 또는 폴더의 특성을 나타내는 <see langword="FileAttribute" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="49898-2082">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileAttribute" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="49898-2083">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2084">
            <see langword="GetAttr" /> 함수에서 반환되는 값은 다음 열거형 값의 합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="49898-2085">값</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2085">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="49898-2086">상수</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2086">Constant</span>
                </span>
              </description>
              <description>
                <span data-ttu-id="49898-2087">설명</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2087">Description</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Normal" />
              </term>
              <description>
                <see langword="vbNormal" />
              </description>
              <description>
                <span data-ttu-id="49898-2088">일반 파일입니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2088">Normal.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ReadOnly" />
              </term>
              <description>
                <see langword="vbReadOnly" />
              </description>
              <description>
                <span data-ttu-id="49898-2089">읽기 전용입니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2089">Read-only.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Hidden" />
              </term>
              <description>
                <see langword="vbHidden" />
              </description>
              <description>
                <span data-ttu-id="49898-2090">숨겨져 있습니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2090">Hidden.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="System" />
              </term>
              <description>
                <see langword="vbSystem" />
              </description>
              <description>
                <span data-ttu-id="49898-2091">시스템 파일입니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2091">System file.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Directory" />
              </term>
              <description>
                <see langword="vbDirectory" />
              </description>
              <description>
                <span data-ttu-id="49898-2092">디렉터리 또는 폴더입니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2092">Directory or folder.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Archive" />
              </term>
              <description>
                <see langword="vbArchive" />
              </description>
              <description>
                <span data-ttu-id="49898-2093">마지막 백업 이후에 파일이 변경되었습니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2093">File has changed since last backup.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Alias" />
              </term>
              <description>
                <see langword="vbAlias" />
              </description>
              <description>
                <span data-ttu-id="49898-2094">파일에 다른 이름이 있습니다.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="49898-2094">File has a different name.</span>
                </span>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="49898-2095">이러한 열거형은 Visual Basic 언어로 지정되며</span>
              <span class="sxs-lookup">
                <span data-stu-id="49898-2095">These enumerations are specified by the Visual Basic language.</span>
              </span>
              <span data-ttu-id="49898-2096">코드의 모든 위치에서 실제 값 대신 사용될 수 있습니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="49898-2096">The names can be used anywhere in your code in place of the actual values.</span>
              </span>
            </para>
          </block>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2097">설정 된 특성을 확인 하려면 사용 합니다 `And` 반환한 값의 비트 비교를 수행 하는 연산자를 `GetAttr` 함수 및 개별 파일 특성의 값.</span><span class="sxs-lookup"><span data-stu-id="49898-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="49898-2098">결과 0이 없는 경우 해당 특성은 명명된 된 파일에 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="49898-2099">예를 들어, 다음의 반환 값 `And` 식은 0 인 경우에는 `Archive` 특성이 설정 되지 않은:</span><span class="sxs-lookup"><span data-stu-id="49898-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="49898-2100">0이 아닌 값을 반환 합니다 `Archive` 특성이 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2101">이 예제에서는 `GetAttr` 파일 및 디렉터리 또는 폴더의 특성을 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2102">
            <paramref name="Pathname" />이 잘못되었거나 와일드카드를 포함하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2102">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-2103">대상 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2103">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md">
          <span data-ttu-id="49898-2104">And 연산자(Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2104">And Operator (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2105">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2105">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-2106">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2106">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2107">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2107">Required.</span>
          </span>
          <span data-ttu-id="49898-2108">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2108">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2109">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2109">Required.</span>
          </span>
          <span data-ttu-id="49898-2110">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2110">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2111">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2111">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2112">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2113">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2114">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2115">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2116">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2117">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2118">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2119">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2120">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2121">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2121">Data</span></span>|<span data-ttu-id="49898-2122">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2123">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2124">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2124">Empty</span></span>|  
|<span data-ttu-id="49898-2125">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2126"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2127">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2128">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2130">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2131">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2132">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2133">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2134">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2135">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2136">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2137">이 예에서는 가정 `TestFile` 파일을 사용 하 여 기록 된 데이터의 일부 줄은는 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2138">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2138">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2139">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2139">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2140">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2140">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2141">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2142">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2142">Required.</span>
          </span>
          <span data-ttu-id="49898-2143">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2143">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2144">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2144">Required.</span>
          </span>
          <span data-ttu-id="49898-2145">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2145">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2146">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2146">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2147">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2148">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2149">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2150">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2151">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2152">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2153">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2154">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2155">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2156">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2156">Data</span></span>|<span data-ttu-id="49898-2157">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2158">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2159">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2159">Empty</span></span>|  
|<span data-ttu-id="49898-2160">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2161"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2162">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2163">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2165">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2166">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2167">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2168">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2169">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2170">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2171">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2172">이 예에서는 가정 `TestFile` 파일을 사용 하 여 기록 된 데이터의 일부 줄은는 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2173">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2174">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2174">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2175">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2175">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2176">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2177">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2177">Required.</span>
          </span>
          <span data-ttu-id="49898-2178">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2178">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2179">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2179">Required.</span>
          </span>
          <span data-ttu-id="49898-2180">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2180">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2181">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2181">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2182">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2183">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2184">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2185">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2186">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2187">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2188">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2189">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2190">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2191">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2191">Data</span></span>|<span data-ttu-id="49898-2192">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2193">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2194">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2194">Empty</span></span>|  
|<span data-ttu-id="49898-2195">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2196"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2197">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2198">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2200">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2201">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2202">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2203">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2204">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2205">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2206">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2207">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2208">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2208">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2209">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2209">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2210">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2210">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2211">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2212">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2212">Required.</span>
          </span>
          <span data-ttu-id="49898-2213">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2213">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2214">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2214">Required.</span>
          </span>
          <span data-ttu-id="49898-2215">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2215">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2216">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2216">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2217">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2218">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2219">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2220">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2221">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2222">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2223">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2224">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2225">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2226">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2226">Data</span></span>|<span data-ttu-id="49898-2227">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2228">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2229">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2229">Empty</span></span>|  
|<span data-ttu-id="49898-2230">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2231"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2232">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2233">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2235">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2236">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2237">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2238">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2239">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2240">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2241">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2242">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2243">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2243">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2244">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2244">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2245">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2245">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2246">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2247">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2247">Required.</span>
          </span>
          <span data-ttu-id="49898-2248">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2248">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2249">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2249">Required.</span>
          </span>
          <span data-ttu-id="49898-2250">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2250">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2251">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2251">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2252">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2253">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2254">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2255">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2256">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2257">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2258">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2259">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2260">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2261">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2261">Data</span></span>|<span data-ttu-id="49898-2262">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2263">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2264">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2264">Empty</span></span>|  
|<span data-ttu-id="49898-2265">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2266"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2267">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2268">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2270">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2271">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2272">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2273">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2274">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2275">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2276">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2277">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2278">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2278">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2279">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2279">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2280">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2280">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2281">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2282">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2282">Required.</span>
          </span>
          <span data-ttu-id="49898-2283">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2283">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2284">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2284">Required.</span>
          </span>
          <span data-ttu-id="49898-2285">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2285">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2286">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2286">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2287">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2288">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2289">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2290">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2291">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2292">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2293">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2294">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2295">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2296">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2296">Data</span></span>|<span data-ttu-id="49898-2297">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2298">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2299">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2299">Empty</span></span>|  
|<span data-ttu-id="49898-2300">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2301"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2302">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2303">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2305">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2306">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2307">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2308">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2309">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2310">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2311">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2312">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2313">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2313">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2314">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2314">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2315">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2315">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2316">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2317">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2317">Required.</span>
          </span>
          <span data-ttu-id="49898-2318">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2318">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2319">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2319">Required.</span>
          </span>
          <span data-ttu-id="49898-2320">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2320">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2321">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2321">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2322">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2323">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2324">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2325">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2326">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2327">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2328">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2329">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2330">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2331">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2331">Data</span></span>|<span data-ttu-id="49898-2332">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2333">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2334">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2334">Empty</span></span>|  
|<span data-ttu-id="49898-2335">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2336"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2337">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2338">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2340">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2341">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2342">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2343">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2344">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2345">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2346">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2347">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2348">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2348">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2349">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2349">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2350">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2350">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2351">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2352">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2352">Required.</span>
          </span>
          <span data-ttu-id="49898-2353">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2354">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2354">Required.</span>
          </span>
          <span data-ttu-id="49898-2355">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2355">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2356">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2356">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2357">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2358">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2359">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2360">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2361">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2362">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2363">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2364">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2365">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2366">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2366">Data</span></span>|<span data-ttu-id="49898-2367">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2368">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2369">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2369">Empty</span></span>|  
|<span data-ttu-id="49898-2370">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2371"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2372">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2373">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2375">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2376">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2377">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2378">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2379">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2380">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2381">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2382">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2383">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2383">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2384">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2384">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2385">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2385">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2386">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2387">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2387">Required.</span>
          </span>
          <span data-ttu-id="49898-2388">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2388">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2389">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2389">Required.</span>
          </span>
          <span data-ttu-id="49898-2390">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2390">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2391">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2391">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2392">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2393">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2394">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2395">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2396">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2397">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2398">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2399">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2400">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2401">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2401">Data</span></span>|<span data-ttu-id="49898-2402">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2403">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2404">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2404">Empty</span></span>|  
|<span data-ttu-id="49898-2405">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2406"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2407">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2408">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2410">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2411">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2412">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2413">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2414">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2415">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2416">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2417">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2418">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2419">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2419">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2420">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2420">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2421">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2422">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2422">Required.</span>
          </span>
          <span data-ttu-id="49898-2423">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2423">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2424">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2424">Required.</span>
          </span>
          <span data-ttu-id="49898-2425">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2425">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2426">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2426">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2427">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2428">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2429">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2430">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2431">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2432">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2433">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2434">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2435">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2436">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2436">Data</span></span>|<span data-ttu-id="49898-2437">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2438">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2439">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2439">Empty</span></span>|  
|<span data-ttu-id="49898-2440">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2441"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2442">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2443">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2445">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2446">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2447">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2448">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2449">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2450">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2451">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2452">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2453">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2453">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2454">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2454">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2455">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2455">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2456">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2457">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2457">Required.</span>
          </span>
          <span data-ttu-id="49898-2458">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2458">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2459">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2459">Required.</span>
          </span>
          <span data-ttu-id="49898-2460">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2460">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2461">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2461">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2462">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2463">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2464">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2465">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2466">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2467">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2468">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2469">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2470">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2471">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2471">Data</span></span>|<span data-ttu-id="49898-2472">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2473">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2474">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2474">Empty</span></span>|  
|<span data-ttu-id="49898-2475">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2476"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2477">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2478">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2480">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2481">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2482">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2483">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2484">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2485">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2486">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2487">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2488">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2488">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2489">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2489">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2490">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2490">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2491">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2492">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2492">Required.</span>
          </span>
          <span data-ttu-id="49898-2493">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2493">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="49898-2494">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2494">Required.</span>
          </span>
          <span data-ttu-id="49898-2495">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2495">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2496">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2496">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2497">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2498">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2499">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2500">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="49898-2501">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2502">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2503">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="49898-2504">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="49898-2505">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="49898-2506">데이터</span><span class="sxs-lookup"><span data-stu-id="49898-2506">Data</span></span>|<span data-ttu-id="49898-2507">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="49898-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="49898-2508">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="49898-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="49898-2509">Empty</span><span class="sxs-lookup"><span data-stu-id="49898-2509">Empty</span></span>|  
|<span data-ttu-id="49898-2510">#NULL#</span><span class="sxs-lookup"><span data-stu-id="49898-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="49898-2511"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="49898-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="49898-2512">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="49898-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="49898-2513">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="49898-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="49898-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="49898-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="49898-2515">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="49898-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="49898-2516">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2517">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="49898-2518">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2519">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2520">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="49898-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2521">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="49898-2522">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="49898-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2523">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2523">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2524">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2524">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2525">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2525">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2526">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2527">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2527">Required.</span>
          </span>
          <span data-ttu-id="49898-2528">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2528">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="49898-2529">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2529">Required.</span>
          </span>
          <span data-ttu-id="49898-2530">읽을 문자의 수를 지정하는 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2530">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2531">
            <see langword="String" /> 또는 <see langword="Input" /> 모드로 연 파일의 문자가 포함된 <see langword="Binary" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="49898-2532">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="InputString" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="49898-2533">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2534">
            <see langword="String" /> 또는 <see langword="Input" /> 모드로 연 파일의 문자가 포함된 <see langword="Binary" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="49898-2535">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="InputString" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2536">`InputString` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2537">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2538">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2539">읽을 데이터를 `InputString` 함수는 일반적으로 사용 하 여 파일에 기록 됩니다 `Print` 또는 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="49898-2540">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="49898-2541">달리 합니다 `Input` 함수는 `InputString` 읽은 모든 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="49898-2542">쉼표, 캐리지 리턴, 줄 바꿈, 인용 부호 및 선행 공백을 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="49898-2543">열려 있는 파일을 사용 하 여 `Binary` 에 액세스를 사용 하 여 파일을 통해 읽으려는 시도가 합니다 `InputString` 까지 함수 `EOF` 반환 `True` 오류를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="49898-2544">사용 하 여는 `LOF` 및 `Loc` 대신 함수 `EOF` 사용 하 여 이진 파일을 읽을 때 `InputString`, 사용할지 `FileGet` 사용 하는 경우는 `EOF` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2545">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 보안 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="49898-2546">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2547">이 예제에서는 합니다 `InputString` 파일에서 한 번에 하나의 문자를 읽고 인쇄 하는 함수는 `Output` 창입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="49898-2548">이 예에서는 가정 `MyFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2549">
            <paramref name="FileNumber" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2549">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-2550">
            <paramref name="CharCount" /> &lt; 0 또는 &gt; 214입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2550">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2551">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2551">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2552">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2553">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2553">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="49898-2554">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2554">Required.</span>
          </span>
          <span data-ttu-id="49898-2555">삭제할 하나 이상의 파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2555">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="49898-2556">
            <c>PathName</c>에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2556">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2557">디스크에서 파일을 삭제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2557">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="49898-2558">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Kill" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="49898-2559">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2560">`Kill` 여러 문자 사용을 지원 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="49898-2561">**보안 정보** 를 실행 하려면 합니다 `Kill` 함수에는 필요 `Read` 및 `PathDiscovery` 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여 될 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="49898-2562">자세한 내용은 <xref:System.Security.SecurityException> [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="49898-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2563">이 예제에서는 `Kill` 디스크에서 파일을 삭제 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2564">대상 파일이 열려 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2564">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-2565">대상 파일을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2565">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="49898-2566">사용 권한이 거부되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2566">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2567">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2567">Required.</span>
          </span>
          <span data-ttu-id="49898-2568">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2568">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2569">열려 있는 순차 파일에서 한 줄을 읽은 다음 <see langword="String" /> 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2570">열려 있는 순차 파일에서 한 줄을 읽은 다음 <see langword="String" /> 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2571">`LineInput` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2572">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2573">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2574">데이터를 읽을 `LineInput` 일반적으로 사용 하 여 파일에 기록 됩니다 `Print`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2575">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="49898-2576">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="49898-2577">합니다 `LineInput` 캐리지 리턴를 발견할 때까지 한 번에 파일 하나 문자에서 함수를 읽습니다 (`Chr(13)`) 또는 캐리지 리턴/줄 바꿈 (`Chr(13) + Chr(10)`) 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="49898-2578">캐리지 리턴/줄 바꿈된 시퀀스 문자 문자열에 추가 하는 대신 생략 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2579">사용 하 여 파일에서 읽기를 `LineInput` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2580">이 예제에서는 `LineInput` 함수 순차 파일에서 줄을 읽고 변수에 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="49898-2581">이 예에서는 가정 `TestFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="49898-2582">파일의 끝에 도달했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2582">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2583">
            <paramref name="FileNumber" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2583">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2584">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2584">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2585">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2586">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2586">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2587">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2587">Required.</span>
          </span>
          <span data-ttu-id="49898-2588">임의의 유효한 <see langword="Integer" /> 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2588">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2589">열려 있는 파일에서 현재의 읽기/쓰기 위치를 지정하는 <see langword="Long" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2590">열려 있는 파일에서 현재의 읽기/쓰기 위치를 지정하는 <see langword="Long" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2591">`Loc` 함수는 0, 0을 반환 하는 사용 하 여 파일의 첫 번째 바이트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="49898-2592">`Loc` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2593">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2594">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2595">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="49898-2596">모드</span><span class="sxs-lookup"><span data-stu-id="49898-2596">Mode</span></span>|<span data-ttu-id="49898-2597">반환 값</span><span class="sxs-lookup"><span data-stu-id="49898-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="49898-2598">읽거나 파일에 쓴 마지막 레코드의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="49898-2599">128로 구분 된 파일로 현재 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="49898-2600">그러나 정보를 반환할 `Loc` 순차 파일 사용 아니고 필요에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="49898-2601">마지막 바이트를 읽거나 쓸 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49898-2602">이 예제에서는 `Loc` 열려 있는 파일에서 현재 읽기/쓰기 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="49898-2603">이 예에서는 가정 `MyFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2604">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2604">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-2605">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2606">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2607">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2608">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2608">Required.</span>
          </span>
          <span data-ttu-id="49898-2609">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2609">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2610">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2611">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2612">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2613">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="49898-2614">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="49898-2615">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="49898-2616">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="49898-2617">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="49898-2618">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2619">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="49898-2620">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2621">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2621">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2622">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2622">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2623">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2623">Required.</span>
          </span>
          <span data-ttu-id="49898-2624">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2624">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="49898-2625">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2625">Optional.</span>
          </span>
          <span data-ttu-id="49898-2626">잠그거나 잠금을 해제할 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2626">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2627">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2628">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2629">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2630">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="49898-2631">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="49898-2632">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="49898-2633">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="49898-2634">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="49898-2635">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2636">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="49898-2637">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2638">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2638">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2639">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2639">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2640">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2640">Required.</span>
          </span>
          <span data-ttu-id="49898-2641">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2641">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="49898-2642">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2642">Optional.</span>
          </span>
          <span data-ttu-id="49898-2643">잠그거나 잠금을 해제할 첫째 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2643">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="49898-2644">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2644">Optional.</span>
          </span>
          <span data-ttu-id="49898-2645">잠그거나 잠금을 해제할 마지막 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2645">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2646">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2647">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2648">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2649">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="49898-2650">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="49898-2651">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="49898-2652">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="49898-2653">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="49898-2654">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2655">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="49898-2656">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2657">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2657">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2658">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2658">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2659">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2659">Required.</span>
          </span>
          <span data-ttu-id="49898-2660">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2660">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2661">
            <see langword="Long" /> 함수를 사용하여 연 파일의 크기(바이트)를 나타내는 <see langword="FileOpen" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-2662">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="LOF" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="49898-2663">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2664">
            <see langword="Long" /> 함수를 사용하여 연 파일의 크기(바이트)를 나타내는 <see langword="FileOpen" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-2665">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="LOF" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2666">사용 된 `FileLen` 열려 있지 않은 파일의 길이를 가져오는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2667">이 예제에서는 `LOF` 열려 있는 파일의 크기를 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="49898-2668">이 예에서는 가정 `TestFile` 은 샘플 데이터가 포함 된 텍스트 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2669">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-2670">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2670">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-2671">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2671">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="49898-2672">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2672">Required.</span>
          </span>
          <span data-ttu-id="49898-2673">만들어질 디렉터리를 식별하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2673">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="49898-2674">
            <c>Path</c>에는 드라이브가 포함될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2674">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="49898-2675">드라이브를 지정하지 않은 경우 <see langword="MkDir" />을 사용하면 현재 드라이브에서 새 디렉터리를 만들 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2676">새 디렉터리를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2676">Creates a new directory.</span>
          </span>
          <span data-ttu-id="49898-2677">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="MkDir" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="49898-2678">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2679">이 함수는 새 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2680">이 예제에서는 `MkDir` 함수 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="49898-2681">드라이브를 지정 하지 않으면 현재 드라이브에서 새 디렉터리가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-2682">
            <paramref name="Path" />가 지정되지 않았거나 비어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2682">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="49898-2683">사용 권한이 거부되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2683">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2684">디렉터리가 이미 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2684">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md">
          <span data-ttu-id="49898-2685">방법: Visual Basic에서 디렉터리 만들기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2685">How to: Create a Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2686">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2686">Required.</span>
          </span>
          <span data-ttu-id="49898-2687">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2687">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="49898-2688">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2688">Optional.</span>
          </span>
          <span data-ttu-id="49898-2689">파일에 쓸 쉼표로 구분된 0개 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2689">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="49898-2690">
            <c>Output</c> 인수 설정은 다음과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2690">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="49898-2691">
            <see langword="T:System.IO.IOException" />: 파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2691">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="49898-2692">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c>가 존재하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2692">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2693">표시 형식 데이터를 순차 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2693">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2694">합니다 `Print` 및 `PrintLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2695">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2696">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2697">`Print` 줄 바꿈으로 줄의 끝에 포함 되지 않습니다. 그러나 `PrintLine` 줄 바꿈에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="49898-2698">사용 하 여 기록 된 데이터 `Print` 를 사용 하 여 일반적으로 파일에서 읽은 `LineInput` 또는 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="49898-2699">생략 하면 `Output` 에 대 한 `PrintLine`에 빈 줄이 파일에 출력 `Print`, 아무것도 출력 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="49898-2700">쉼표로 구분 된 여러 개의 식을 혼합 쉼표 탭 경계에 정렬 됩니다 및 `TAB` 일관 되지 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="49898-2701">에 대 한 `Boolean` 데이터를 `True` 또는 `False` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="49898-2702">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="49898-2703">날짜 데이터는 시스템에서 인식 표준 짧은 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="49898-2704">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="49898-2705">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="49898-2706">그러나 경우 `Output` 목록 데이터가 `DBNull`, `Null` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="49898-2707">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `Error errorcode`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="49898-2708">`Error` 키워드 로캘에 관계 없이 변환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="49898-2709">사용 하 여 파일에 쓴 모든 데이터 `Print` 국제적으로 인식 합니다; 즉, 데이터 형식이 올바로 적절 한 소수 구분 기호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="49898-2710">사용자가 여러 로캘에서 사용에 대 한 데이터를 출력 하려는 경우 `Write` 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="49898-2711">사용 하 여 파일에 쓸 합니다 `Print` 또는 `PrintLine` 함수에 필요 `Write` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2712">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="49898-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2713">이 예제에서는 합니다 `Print` 및 `PrintLine` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2714">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2714">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2715">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2715">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2716">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2717">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2717">Required.</span>
          </span>
          <span data-ttu-id="49898-2718">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2718">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="49898-2719">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2719">Optional.</span>
          </span>
          <span data-ttu-id="49898-2720">파일에 쓸 쉼표로 구분된 0개 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2720">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="49898-2721">
            <c>Output</c> 인수 설정은 다음과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2721">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="49898-2722">
            <see langword="T:System.IO.IOException" />: 파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2722">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="49898-2723">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c>가 존재하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2723">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2724">표시 형식 데이터를 순차 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2724">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2725">합니다 `Print` 및 `PrintLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2726">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2727">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2728">`Print` 줄 바꿈으로 줄의 끝에 포함 되지 않습니다. 그러나`PrintLine` 줄 바꿈에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="49898-2729">사용 하 여 기록 된 데이터 `Print` 를 사용 하 여 일반적으로 파일에서 읽은 `LineInput` 또는 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="49898-2730">생략 하면 `Output` 에 대 한 `PrintLine`에 빈 줄이 파일에 출력 `Print`, 아무것도 출력 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="49898-2731">쉼표로 구분 된 여러 개의 식을 혼합 쉼표 탭 경계에 정렬 됩니다 및 `TAB` 일관 되지 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="49898-2732">에 대 한 `Boolean` 데이터를 `True` 또는 `False` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="49898-2733">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="49898-2734">날짜 데이터는 시스템에서 인식 표준 짧은 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="49898-2735">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="49898-2736">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="49898-2737">그러나 경우 `Output` 목록 데이터가 `DBNull`, `Null` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="49898-2738">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `Error errorcode`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="49898-2739">`Error` 키워드 로캘에 관계 없이 변환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="49898-2740">사용 하 여 파일에 쓴 모든 데이터 `Print` 국제적으로 인식 합니다; 즉, 데이터 형식이 올바로 적절 한 소수 구분 기호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="49898-2741">사용자가 여러 로캘에서 사용에 대 한 데이터를 출력 하려는 경우 `Write` 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="49898-2742">사용 하 여 파일에 쓸 합니다 `Print` 또는 `PrintLine` 함수에 필요 `Write` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-2743">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="49898-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2744">이 예제에서는 합니다 `Print` 및 `PrintLine` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2745">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2745">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-2746">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2746">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-2747">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="49898-2748">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2748">Required.</span>
          </span>
          <span data-ttu-id="49898-2749">기존 파일 이름과 위치를 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2749">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="49898-2750">
            <c>OldPath</c>에는 파일의 디렉터리와 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2750">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="49898-2751">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2751">Required.</span>
          </span>
          <span data-ttu-id="49898-2752">새 파일 이름과 위치를 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2752">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="49898-2753">
            <c>NewPath</c>에는 대상 위치의 디렉터리와 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2753">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="49898-2754">
            <c>NewPath</c>에는 이미 있는 파일 이름을 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2754">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2755">디스크 파일 또는 디렉터리의 이름을 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2755">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="49898-2756">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Rename" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="49898-2757">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2758">`Rename` 함수 파일 이름을 바꿉니다 하 고 필요한 경우 다른 디렉터리로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="49898-2759">`Rename` 함수 드라이브 간에 파일을 이동할 수 있지만 기존 디렉터리만 이름을 바꿀 수 때 둘 다 `NewPath` 및 `OldPath` 동일한 드라이브에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="49898-2760">`Rename` 새 파일 또는 디렉터리를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="49898-2761">사용 하는 `Rename` 열린 파일에 대 한 함수에서 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="49898-2762">이름을 바꾸기 전에 열려 있는 파일을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="49898-2763">`Rename` 인수가 여러 문자 (\*) 및 단일 (?) 문자 와일드 카드를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="49898-2764">사용 하는 경우 `Rename` 복사할 파일을 보호 되지 않은 위치에서 보호 되는 위치를 파일에 덜 제한적인된 권한을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="49898-2765">보안상 위험을 소개 하지는 않았는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2766">이 예제에서는 `Rename` 함수 파일 이름을 바꾸려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="49898-2767">이 예제에서는 이미 지정 된 디렉터리가 존재 하는지 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-2768">경로가 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2768">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-2769">
            <paramref name="OldPath" /> 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2769">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2770">다른 장치로 이름을 바꿀 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2770">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">
          <span data-ttu-id="49898-2771">방법: Visual Basic에서 파일 이름 바꾸기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2771">How to: Rename a File in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49898-2772">
            <see langword="FileOpen" /> 함수를 사용하여 연 디스크 파일을 모두 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-2773">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Reset" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="49898-2774">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2775">합니다 `Reset` 함수에 의해 열린 모든 활성 파일을 닫습니다 합니다 `FileOpen` 함수 및 동일한 기능 `FileClose()` 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2776">이 예제에서는 `Reset` 함수를 열려 있는 모든 파일을 닫고 모든 파일 버퍼의 내용을 디스크에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="49898-2777">사용 된 `Object` 변수 `FileNumber` 문자열 및 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="49898-2778">End 문</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2778">End Statement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="49898-2779">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2779">Required.</span>
          </span>
          <span data-ttu-id="49898-2780">제거할 디렉터리나 폴더를 식별하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2780">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="49898-2781">
            <c>Path</c>에는 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2781">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="49898-2782">드라이브를 지정하지 않은 경우 <see langword="RmDir" />을 사용하면 현재 드라이브에서 디렉터리를 제거할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2783">기존 디렉터리를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2783">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="49898-2784">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="RmDir" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="49898-2785">자세한 내용은 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2786">사용 하려는 경우 오류가 발생 `RmDir` 파일이 포함 된 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="49898-2787">사용 된 `Kill` 디렉터리를 제거 하기 전에 모든 파일을 삭제 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2788">이 예제에서는 `RmDir` 기존 디렉터리를 제거 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-2789">
            <paramref name="Path" />가 지정되지 않았거나 비어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2789">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2790">대상 디렉터리에 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2790">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="49898-2791">디렉터리가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2791">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-2792">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-2793">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="49898-2794">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2795">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2795">Required.</span>
          </span>
          <span data-ttu-id="49898-2796">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2796">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2797">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-2798">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="49898-2799">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2800">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2801">`Seek` 1에서 2,147,483,647 사이의 값을 반환 합니다 (2 ^31-1).</span><span class="sxs-lookup"><span data-stu-id="49898-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="49898-2802">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="49898-2803">모드</span><span class="sxs-lookup"><span data-stu-id="49898-2803">Mode</span></span>|<span data-ttu-id="49898-2804">반환 값</span><span class="sxs-lookup"><span data-stu-id="49898-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="49898-2805">읽거나 쓴 다음 레코드의 수</span><span class="sxs-lookup"><span data-stu-id="49898-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="49898-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="49898-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="49898-2807">다음 작업이 발생 하는 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="49898-2808">파일의 첫 번째 바이트는 위치 1, 두 번째 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49898-2809">이 예제에서는 `Seek` 현재 파일 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="49898-2810">이 예제에서는 가정 `TestFile` 구조체의 레코드가 포함 된 파일은 `Record`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="49898-2811">파일에서 열에 대 한 `Random` 모드에서는 `Seek` 다음 레코드의 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="49898-2812">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="49898-2813">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="49898-2814">이 예제에서는 `Seek` 다음 읽기에 대 한 위치를 설정 하거나 파일을 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="49898-2815">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="49898-2816">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2817">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-2818">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-2819">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2820">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2820">Required.</span>
          </span>
          <span data-ttu-id="49898-2821">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2821">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="49898-2822">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2822">Required.</span>
          </span>
          <span data-ttu-id="49898-2823">1에서 2,147,483,647 사이의 수로, 다음 읽기/쓰기 작업이 발생할 위치를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2823">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2824">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="49898-2825">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="49898-2826">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2827">`Seek` 1에서 2,147,483,647 사이의 값을 반환 합니다 (2 ^31-1).</span><span class="sxs-lookup"><span data-stu-id="49898-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="49898-2828">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="49898-2829">모드</span><span class="sxs-lookup"><span data-stu-id="49898-2829">Mode</span></span>|<span data-ttu-id="49898-2830">반환 값</span><span class="sxs-lookup"><span data-stu-id="49898-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="49898-2831">읽거나 쓴 다음 레코드의 수</span><span class="sxs-lookup"><span data-stu-id="49898-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="49898-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="49898-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="49898-2833">다음 작업이 발생 하는 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="49898-2834">파일의 첫 번째 바이트는 위치 1, 두 번째 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="49898-2835">이 예제에서는 `Seek` 현재 파일 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="49898-2836">이 예제에서는 가정 `TestFile` 구조체의 레코드가 포함 된 파일은 `Record`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="49898-2837">파일에서 열에 대 한 `Random` 모드에서는 `Seek` 다음 레코드의 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="49898-2838">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="49898-2839">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="49898-2840">이 예제에서는 `Seek` 다음 읽기에 대 한 위치를 설정 하거나 파일을 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="49898-2841">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="49898-2842">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2843">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2843">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="49898-2844">Visual Basic에서 파일 읽기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2844">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="49898-2845">Visual Basic에서 파일에 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2845">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="49898-2846">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2846">Required.</span>
          </span>
          <span data-ttu-id="49898-2847">파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2847">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="49898-2848">
            <c>PathName</c>에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2848">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="49898-2849">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2849">Required.</span>
          </span>
          <span data-ttu-id="49898-2850">파일 특성을 지정하는 합계를 가진 상수 또는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2850">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2851">파일의 특성 정보를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2851">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="49898-2852">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="SetAttr" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="49898-2853">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2854">열려 있는 파일의 특성을 설정 하려고 하면 런타임 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="49898-2855">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="49898-2856">값</span><span class="sxs-lookup"><span data-stu-id="49898-2856">Value</span></span>|<span data-ttu-id="49898-2857">상수</span><span class="sxs-lookup"><span data-stu-id="49898-2857">Constant</span></span>|<span data-ttu-id="49898-2858">설명</span><span class="sxs-lookup"><span data-stu-id="49898-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="49898-2859">보통 (기본값)입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="49898-2860">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="49898-2861">숨겨져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="49898-2862">시스템 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="49898-2863">볼륨 레이블</span><span class="sxs-lookup"><span data-stu-id="49898-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="49898-2864">디렉터리 또는 폴더입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="49898-2865">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="49898-2866">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="49898-2867">이러한 열거형은 Visual Basic 언어로 지정되며</span><span class="sxs-lookup"><span data-stu-id="49898-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="49898-2868">이름은 실제 값 대신 코드에서 아무 곳 이나 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2869">이 예제에서는 `SetAttr` 파일의 특성을 설정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="49898-2870">
            <paramref name="Attribute" /> 형식이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2870">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="49898-2871">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2871">Required.</span>
          </span>
          <span data-ttu-id="49898-2872">목록에서 다음 식을 표시하거나 출력하기 전에 삽입할 공백의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2873">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2874">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2875">경우 `Count` 출력 줄 너비의 다음 출력 위치를 즉시 인쇄 되는 공백 수 뒤에 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="49898-2876">하는 경우`Count` 출력 줄 너비 보다 큰 `SPC` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="49898-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="49898-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="49898-2878">예를 들어, 현재 출력 위치가 24 인 경우 출력 줄 너비 80 이며 지정할 `SPC(90)`, 다음 인쇄 34 (현재 출력 위치가 + 90과 80 나머지) 위치에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="49898-2879">현재 출력 위치와 출력 줄 너비 차이 보다 작거나 `Count` (또는 `Count` `Mod` *너비*), `SPC` 다음 줄의 시작 부분으로 건너뛰고 생성 함수 공간 같음 `Count` – (*너비* – *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="49898-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2880">테이블 열이 와이드 문자 수 있도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2881">이 예제에서는 합니다 `SPC` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="49898-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="49898-2882">Mod 연산자(Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2882">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-2883">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49898-2884">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2885">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2886">현재 줄의 현재 출력 위치가 보다 크면 `Column`, `TAB` 같음 열 값으로 건너뜁니다 `Column` 다음 출력 줄.</span><span class="sxs-lookup"><span data-stu-id="49898-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="49898-2887">하는 경우 `Column` 가 1 보다 작은 `TAB` 열 1의 출력 위치를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="49898-2888">하는 경우 `Column` 출력 줄 너비 보다 큰 `TAB` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="49898-2889">Mod 열 너비</span><span class="sxs-lookup"><span data-stu-id="49898-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="49898-2890">예를 들어 경우 *너비* 80 이며 지정할 `TAB(90)`, 다음 출력 열 10 (나머지 90과 80)에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="49898-2891">경우 `Column` 현재 출력 위치가 계산된 된 출력 위치에 다음 줄에 인쇄 시작 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="49898-2892">계산된 된 출력 위치 현재 출력 위치가 보다 큰 경우 인쇄부터 계산된 된 출력 같은 줄에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="49898-2893">출력 줄에서 가장 왼쪽의 출력 위치는 항상 1입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="49898-2894">사용 하는 경우는 `Print` 또는 `PrintLine` 함수를 파일에 오른쪽에 있는 인쇄 위치는 사용 하 여 설정할 수 있는 출력 파일의 현재 너비를 `FileWidth` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="49898-2895">합니다 `TAB` 함수를 사용할 수도 있습니다는 `WriteLine` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="49898-2896">함께 사용할 수 없습니다 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2897">테이블 열이 와이드 문자를 포함 하도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2898">이 예제에서는 합니다 `TAB` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="49898-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="49898-2899">Mod 연산자(Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2899">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="49898-2900">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2900">Optional.</span>
          </span>
          <span data-ttu-id="49898-2901">목록에서 다음 식을 표시하거나 출력하기 전에 이동하는 열 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2901">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="49898-2902">생략할 경우 <see langword="TAB" />은 다음 출력 영역의 시작 부분으로 삽입 지점을 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2903">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49898-2904">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2905">현재 줄의 현재 출력 위치가 보다 크면 `Column`, `TAB` 같음 열 값으로 건너뜁니다 `Column` 다음 출력 줄.</span><span class="sxs-lookup"><span data-stu-id="49898-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="49898-2906">하는 경우 `Column` 가 1 보다 작은 `TAB` 열 1의 출력 위치를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="49898-2907">하는 경우 `Column` 출력 줄 너비 보다 큰 `TAB` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="49898-2908">Mod 열 너비</span><span class="sxs-lookup"><span data-stu-id="49898-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="49898-2909">예를 들어 경우 *너비* 80 이며 지정할 `TAB(90)`, 다음 출력 열 10 (나머지 90과 80)에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="49898-2910">경우 `Column` 현재 출력 위치가 계산된 된 출력 위치에 다음 줄에 인쇄 시작 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="49898-2911">계산된 된 출력 위치 현재 출력 위치가 보다 큰 경우 인쇄부터 계산된 된 출력 같은 줄에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="49898-2912">출력 줄에서 가장 왼쪽의 출력 위치는 항상 1입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="49898-2913">사용 하는 경우는 `Print` 또는 `PrintLine` 함수를 파일에 오른쪽에 있는 인쇄 위치는 사용 하 여 설정할 수 있는 출력 파일의 현재 너비를 `FileWidth` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="49898-2914">합니다 `TAB` 함수를 사용할 수도 있습니다는 `WriteLine` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="49898-2915">함께 사용할 수 없습니다 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49898-2916">테이블 열이 와이드 문자를 포함 하도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2917">이 예제에서는 합니다 `TAB` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="49898-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="49898-2918">Mod 연산자(Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2918">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49898-2919">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2920">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2921">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2922">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2922">Required.</span>
          </span>
          <span data-ttu-id="49898-2923">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2923">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2924">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2925">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2926">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2927">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="49898-2928">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="49898-2929">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="49898-2930">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="49898-2931">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="49898-2932">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2933">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="49898-2934">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2935">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2935">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2936">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2936">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2937">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2937">Required.</span>
          </span>
          <span data-ttu-id="49898-2938">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2938">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="49898-2939">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2939">Optional.</span>
          </span>
          <span data-ttu-id="49898-2940">잠그거나 잠금을 해제할 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2940">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2941">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2942">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2943">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2944">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="49898-2945">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="49898-2946">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="49898-2947">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="49898-2948">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="49898-2949">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2950">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="49898-2951">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2952">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2953">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2953">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2954">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2954">Required.</span>
          </span>
          <span data-ttu-id="49898-2955">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2955">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="49898-2956">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2956">Optional.</span>
          </span>
          <span data-ttu-id="49898-2957">잠그거나 잠금을 해제할 첫째 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2957">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="49898-2958">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2958">Optional.</span>
          </span>
          <span data-ttu-id="49898-2959">잠그거나 잠금을 해제할 마지막 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2959">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2960">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="49898-2961">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="49898-2962">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2963">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="49898-2964">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="49898-2965">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="49898-2966">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="49898-2967">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="49898-2968">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-2969">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="49898-2970">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-2971">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2971">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-2972">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2972">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-2973">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2973">Required.</span>
          </span>
          <span data-ttu-id="49898-2974">유효한 파일 번호가 포함된 <see langword="Integer" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2974">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="49898-2975">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2975">Optional.</span>
          </span>
          <span data-ttu-id="49898-2976">파일에 쓸 쉼표로 구분된 하나 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2976">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-2977">순차 파일에 데이터를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2977">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="49898-2978">
            <see langword="Write" />로 작성된 데이터는 일반적으로 <see langword="Input" />을 사용하여 파일에서 읽습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-2979">합니다 `Write` 및 `WriteLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-2980">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-2981">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-2982">생략 하면 `Output`, 빈 줄을 파일에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="49898-2983">여러 식에 쉼표를 사용 하 여 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="49898-2984">달리 합니다 `Print` 함수는 `Write` 함수는 파일에 기록 될 때 해당 항목 및 문자열 주위에 따옴표 사이 쉼표를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="49898-2985">명시적 구분 기호 목록에 배치할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="49898-2986">때 `Write` 파일에 숫자 데이터를 쓰는 데 사용 되 `Boolean`, 날짜, null 및 `Error` 데이터 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="49898-2987">데이터를 항상 읽을 수 있습니다 하 고 사용 하 여 올바르게 해석 뒤에 다음과 같은 유니버설 가정을 `Input`로캘에 관계 없이:</span><span class="sxs-lookup"><span data-stu-id="49898-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="49898-2988">숫자 데이터 소수 구분 기호로 마침표를 사용 하 여 항상 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="49898-2989">에 대 한 `Boolean` 데이터를 `#TRUE#` 또는 `#FALSE#` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="49898-2990">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="49898-2991">날짜 데이터 유니버설 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="49898-2992">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="49898-2993">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="49898-2994">그러나 null 데이터에 대 한 `#NULL#` 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="49898-2995">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `#ERROR errorcode#`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="49898-2996">`Error` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="49898-2997">`WriteLine` 줄 바꿈 문자를 삽입 합니다 (즉, 캐리지 리턴/줄 바꿈, 또는 `Chr(13) + Chr(10)`) 마지막 문자에 쓴 후 `Output` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="49898-2998">큰따옴표를 사용 하 여 문자열에 따옴표를 포함할 수 있습니다 또는 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="49898-2999">예를 들어 개체에 적용된</span><span class="sxs-lookup"><span data-stu-id="49898-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="49898-3000">값을 사용 하 여 문자열을 반환 합니다 `Double quotation marks aren't "difficult" to handle`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="49898-3001">사용 하 여 파일에 쓸 합니다 `Write` 또는 `WriteLine` 함수에 필요 `Append` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-3002">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="49898-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-3003">이 예제에서는 `Write` 순차 파일에 원시 데이터를 쓸 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="49898-3004">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3004">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-3005">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3005">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-3006">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3006">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-3007">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="49898-3008">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3008">Required.</span>
          </span>
          <span data-ttu-id="49898-3009">유효한 파일 번호가 포함된 <see langword="Integer" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3009">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="49898-3010">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3010">Optional.</span>
          </span>
          <span data-ttu-id="49898-3011">파일에 쓸 쉼표로 구분된 하나 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3011">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49898-3012">순차 파일에 데이터를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3012">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="49898-3013">
            <see langword="Write" />로 작성된 데이터는 일반적으로 <see langword="Input" />을 사용하여 파일에서 읽습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49898-3014">합니다 `Write` 및 `WriteLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="49898-3015">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="49898-3016">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="49898-3017">생략 하면 `Output`, 빈 줄을 파일에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="49898-3018">여러 식에 쉼표를 사용 하 여 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="49898-3019">달리 합니다 `Print` 함수는 `Write` 함수는 파일에 기록 될 때 해당 항목 및 문자열 주위에 따옴표 사이 쉼표를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="49898-3020">명시적 구분 기호 목록에 배치할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="49898-3021">때 `Write` 파일에 숫자 데이터를 쓰는 데 사용 되 `Boolean`, 날짜, null 및 `Error` 데이터 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="49898-3022">데이터를 항상 읽을 수 있습니다 하 고 사용 하 여 올바르게 해석 뒤에 다음과 같은 유니버설 가정을 `Input`로캘에 관계 없이:</span><span class="sxs-lookup"><span data-stu-id="49898-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="49898-3023">숫자 데이터 소수 구분 기호로 마침표를 사용 하 여 항상 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="49898-3024">에 대 한 `Boolean` 데이터를 `#TRUE#` 또는 `#FALSE#` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="49898-3025">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="49898-3026">날짜 데이터 유니버설 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="49898-3027">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="49898-3028">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="49898-3029">그러나 null 데이터에 대 한 `#NULL#` 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="49898-3030">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `#ERROR errorcode#`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="49898-3031">`Error` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="49898-3032">`WriteLine` 줄 바꿈 문자를 삽입 합니다 (즉, 캐리지 리턴/줄 바꿈, 또는 `Chr(13) + Chr(10)`) 마지막 문자에 쓴 후 `Output` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="49898-3033">큰따옴표를 사용 하 여 문자열에 따옴표를 포함할 수 있습니다 또는 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="49898-3034">예를 들어 개체에 적용된</span><span class="sxs-lookup"><span data-stu-id="49898-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="49898-3035">값을 사용 하 여 문자열을 반환 합니다 `Double quotation marks aren't "difficult" to handle`합니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="49898-3036">사용 하 여 파일에 쓸 합니다 `Write` 또는 `WriteLine` 함수에 필요 `Append` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="49898-3037">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="49898-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49898-3038">이 예제에서는 `Write` 순차 파일에 원시 데이터를 쓸 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="49898-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="49898-3039">Visual Basic을 사용한 파일 액세스</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3039">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="49898-3040">방법: Visual Basic에서 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3040">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="49898-3041">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span>
          <span class="sxs-lookup">
            <span data-stu-id="49898-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>