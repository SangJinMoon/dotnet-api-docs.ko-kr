<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76423e19c418e3145c1946201eeb07bad53c0200" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39908796" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="00be5-101">
        <see langword="FileSystem" /> 모듈에는 파일, 디렉터리 또는 폴더 및 시스템 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00be5-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="00be5-102">
        <see langword="My" /> 기능을 사용하면 <see langword="FileSystem" /> 모듈을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00be5-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="00be5-103">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00be5-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-104">이 모듈에는 Visual Basic 언어 키워드 및 파일 및 폴더에 액세스 하는 런타임 라이브러리 멤버를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-105">이 예제에서는 `GetAttr` 파일 및 디렉터리 또는 폴더의 특성을 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="00be5-106">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-106">Required.</span>
          </span>
          <span data-ttu-id="00be5-107">새 기본 디렉터리 또는 폴더가 될 대상을 식별하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="00be5-108">
            <c>Path</c>에는 드라이브가 포함될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="00be5-109">드라이브를 지정하지 않은 경우 <see langword="ChDir" />을 사용하면 현재 드라이브의 기본 디렉터리나 폴더를 변경할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-110">현재 디렉터리나 폴더를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="00be5-111">
            <see langword="My" /> 기능을 사용하면 <see langword="ChDir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="00be5-112">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-113">`ChDir` 함수의 기본 드라이브는 기본 디렉터리를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="00be5-114">예를 들어 기본 드라이브는 C 이며, 다음 문을 D 드라이브의 기본 디렉터리 변경 되지만 C의 기본 드라이브 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="00be5-115">상대 가능 마침표 두 개를 다음과 같이 입력 하 여 디렉터리 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-116">`ChDir` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="00be5-117">자세한 내용은 참조 하세요. <xref:System.Security.Permissions.SecurityPermission> 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-118">이 예제에서는 `ChDir` 함수는 현재 디렉터리 또는 폴더를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-119">
            <paramref name="Path" />가 비어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-120">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-121">현재 드라이브를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="00be5-122">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-122">Required.</span>
          </span>
          <span data-ttu-id="00be5-123">기존 드라이브를 지정하는 문자열 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="00be5-124">길이가 0인 문자열("")을 지정하면 현재 드라이브가 변경되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="00be5-125">
            <c>Drive</c> 인수가 여러 문자로 된 문자열인 경우 <see langword="ChDrive" />는 첫 글자만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-126">현재 드라이브를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-127">`ChDrive` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="00be5-128">자세한 내용은 <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-129">이 예제에서는 `ChDrive` 함수가 현재 드라이브를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="00be5-130">드라이브가 없는 경우 예외를 throw 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-131">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="00be5-132">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-132">Required.</span>
          </span>
          <span data-ttu-id="00be5-133">기존 드라이브를 지정하는 문자열 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="00be5-134">길이가 0인 문자열("")을 지정하면 현재 드라이브가 변경되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="00be5-135">
            <c>Drive</c> 인수가 여러 문자로 된 문자열인 경우 <see langword="ChDrive" />는 첫 글자만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-136">현재 드라이브를 변경합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-137">`ChDrive` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="00be5-138">자세한 내용은 <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-139">이 예제에서는 `ChDrive` 함수가 현재 드라이브를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="00be5-140">드라이브가 없는 경우 예외를 throw 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-141">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-142">현재 경로를 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="00be5-143">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="00be5-144">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00be5-145">현재 경로를 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="00be5-146">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="00be5-147">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-148">현재 경로를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="00be5-149">이 예제에서는 `CurDir` 현재 경로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="00be5-150">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-150">Optional.</span>
          </span>
          <span data-ttu-id="00be5-151">기존 드라이브를 지정하는 <see langword="Char" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="00be5-152">드라이브를 지정하지 않거나 <c>Drive</c>가 길이가 0인 문자열("")인 경우 <see langword="CurDir" />은 현재 드라이브에 대한 경로를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-153">현재 경로를 나타내는 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="00be5-154">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="00be5-155">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-156">현재 경로를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="00be5-157">이 예제에서는 `CurDir` 현재 경로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-158">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="00be5-159">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="00be5-160">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00be5-161">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="00be5-162">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="00be5-163">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-164">지정된 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-165">합니다 `Dir` 함수에서 여러 문자를 사용할 수 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="00be5-166">`VbVolume` 특정 파일 이름 대신 드라이브 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="00be5-167">제공 해야 합니다는 `PathName` 호출 하는 처음으로 `Dir` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="00be5-168">다음 항목을 검색 하려면 후속 호출을 수행할 수는 `Dir` 함수 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-169">올바르게 실행 하려면를 `Dir` 함수에 필요 합니다 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 및 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여할.</span><span class="sxs-lookup"><span data-stu-id="00be5-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="00be5-170">자세한 내용은 <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, 및 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="00be5-171">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="00be5-172">값</span><span class="sxs-lookup"><span data-stu-id="00be5-172">Value</span></span>|<span data-ttu-id="00be5-173">상수</span><span class="sxs-lookup"><span data-stu-id="00be5-173">Constant</span></span>|<span data-ttu-id="00be5-174">설명</span><span class="sxs-lookup"><span data-stu-id="00be5-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="00be5-175">기본.</span><span class="sxs-lookup"><span data-stu-id="00be5-175">Default.</span></span> <span data-ttu-id="00be5-176">특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="00be5-177">읽기 전용 파일, 그리고 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="00be5-178">숨겨진된 파일 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="00be5-179">시스템 파일 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="00be5-180">볼륨 레이블이 지정 다른 특성을 지정 하는 경우 `vbVolume` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="00be5-181">디렉터리 또는 폴더 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="00be5-182">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="00be5-183">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="00be5-184">이러한 열거형은 Visual Basic 언어로 지정 되며 실제 값 대신 코드에서 어디서 나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-185">이 예제에서는 `Dir` 특정 파일 및 디렉터리가 존재 하는지 확인 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="00be5-186">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-186">Optional.</span>
          </span>
          <span data-ttu-id="00be5-187">파일 이름, 디렉터리나 폴더 이름 또는 드라이브 볼륨 레이블을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="00be5-188">
            <c>PathName</c>이 없으면 길이가 0인 문자열(<see langword="&quot;&quot;" />)이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="00be5-189">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-189">Optional.</span>
          </span>
          <span data-ttu-id="00be5-190">파일 특성을 지정하는 값을 가진 열거형 또는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="00be5-191">이 매개 변수를 생략하면 <see langword="Dir" />은 <c>PathName</c>과 일치하지만 특성이 없는 파일을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-192">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="00be5-193">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="00be5-194">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-195">지정된 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-196">합니다 `Dir` 함수에서 여러 문자를 사용할 수 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="00be5-197">`VbVolume` 특정 파일 이름 대신 드라이브 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="00be5-198">제공 해야 합니다는 `PathName` 호출 하는 처음으로 `Dir` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="00be5-199">다음 항목을 검색 하려면 후속 호출을 수행할 수는 `Dir` 함수 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-200">올바르게 실행 하려면를 `Dir` 함수에 필요 합니다 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 및 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여할.</span><span class="sxs-lookup"><span data-stu-id="00be5-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="00be5-201">자세한 내용은 <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, 및 [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="00be5-202">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="00be5-203">값</span><span class="sxs-lookup"><span data-stu-id="00be5-203">Value</span></span>|<span data-ttu-id="00be5-204">상수</span><span class="sxs-lookup"><span data-stu-id="00be5-204">Constant</span></span>|<span data-ttu-id="00be5-205">설명</span><span class="sxs-lookup"><span data-stu-id="00be5-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="00be5-206">기본.</span><span class="sxs-lookup"><span data-stu-id="00be5-206">Default.</span></span> <span data-ttu-id="00be5-207">특성이 없는 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="00be5-208">특성이 없는 파일 외에도 읽기 전용 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="00be5-209">특성이 없는 파일 외에도 숨겨진된 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="00be5-210">특성이 없는 파일 외에도 시스템 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="00be5-211">볼륨 레이블이 지정 다른 특성을 지정 하는 경우 `vbVolume` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="00be5-212">디렉터리 또는 특성이 없는 파일 뿐 아니라 폴더를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="00be5-213">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="00be5-214">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="00be5-215">이러한 열거형은 Visual Basic 언어로 지정 되며 실제 값 대신 코드에서 어디서 나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-216">이 예제에서는 `Dir` 특정 파일 및 디렉터리가 존재 하는지 확인 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-217">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-217">Required.</span>
          </span>
          <span data-ttu-id="00be5-218">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-219">
            <see langword="True" /> 또는 순차적인 <see langword="Random" />용으로 연 파일의 끝에 도달하면 부울 값 <see langword="Input" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-220">
            <see langword="True" /> 또는 순차적인 <see langword="Random" />용으로 연 파일의 끝에 도달하면 부울 값 <see langword="Input" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-221">사용 하 여 `EOF` 파일의 끝을 지난 위치 입력 하 여 생성 된 오류를 방지 하려면.</span><span class="sxs-lookup"><span data-stu-id="00be5-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="00be5-222">합니다 `EOF` 함수에서 반환 `False` 파일의 끝에 도달할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="00be5-223">열려 있는 파일을 사용 하 여 `Random` 또는 `Binary` 액세스 `EOF` 반환 `False` 마지막으로 실행 될 때까지 `FileGet` 함수는 전체 레코드를 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="00be5-224">열려 있는 파일을 사용 하 여 `Binary` 를 사용 하 여 파일을 통해 읽으려는 시도가 액세스 합니다 `Input` 될 때까지 함수 `EOF` 반환 `True` 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="00be5-225">사용 합니다 `LOF` 및 `Loc` 대신 함수 `EOF` 사용 하 여 이진 파일을 읽을 때 `Input`, 사용할지 `Get` 사용 하는 경우는 `EOF` 함수.</span><span class="sxs-lookup"><span data-stu-id="00be5-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="00be5-226">열려 있는 파일을 사용 하 여 `Output`하십시오 `EOF` 항상 반환 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-227">이 예제에서는 `EOF` 함수는 파일의 끝을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="00be5-228">이 예에서는 가정 `Testfile` 은 여러 줄의 텍스트를 포함 하는 텍스트 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-229">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-230">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-230">Required.</span>
          </span>
          <span data-ttu-id="00be5-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="00be5-232">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-233">
            <see langword="FileOpen" /> 함수를 사용하여 연 파일의 파일 모드를 나타내는 열거형을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-234">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="FileAttr" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="00be5-235">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-236">다음 열거형 값은 파일 액세스 모드를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-236">The following enumeration values indicate the file access mode:</span>
          </span>
          <span data-ttu-id="00be5-237">
            <list type="table">
              <item>
                <term> 값  </term>
                <description> 모드  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <see langword="OpenMode.Input" />
                </description>
              </item>
              <item>
                <term> 2  </term>
                <description>
                  <see langword="OpenMode.Output" />
                </description>
              </item>
              <item>
                <term> 4  </term>
                <description>
                  <see langword="OpenMode.Random" />
                </description>
              </item>
              <item>
                <term> 8  </term>
                <description>
                  <see langword="OpenMode.Append" />
                </description>
              </item>
              <item>
                <term> 32  </term>
                <description>
                  <see langword="OpenMode.Binary" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-237">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Mode  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <see langword="OpenMode.Input" />
                  </description>
                </item>
                <item>
                  <term> 2  </term>
                  <description>
                    <see langword="OpenMode.Output" />
                  </description>
                </item>
                <item>
                  <term> 4  </term>
                  <description>
                    <see langword="OpenMode.Random" />
                  </description>
                </item>
                <item>
                  <term> 8  </term>
                  <description>
                    <see langword="OpenMode.Append" />
                  </description>
                </item>
                <item>
                  <term> 32  </term>
                  <description>
                    <see langword="OpenMode.Binary" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-238">이 함수를 사용 하 여 연 파일의 파일 모드를 나타내는 열거형을 반환 합니다 `FileOpen` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-238">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-239">이 예제에서는 `FileAttr` 함수는 열려 있는 파일의 파일 모드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-239">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="00be5-240">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-240">Optional.</span>
          </span>
          <span data-ttu-id="00be5-241">닫을 0개 이상의 채널에 대한 매개 변수 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-241">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-242">
            <see langword="FileOpen" /> 함수를 사용하여 연 파일에 대한 입출력(I/O)을 끝냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-242">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-243">
            <see langword="My" />를 사용하면 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-243">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="00be5-244">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-244">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-245">`FileClose` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-245">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-246">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-246">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-247">자세한 내용은 [방법: StreamReader 사용 하 여 파일에서 텍스트 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[방법: StreamWriter 사용 하 여 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), 및 [연습: 파일과 디렉터리 조작 Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-247">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="00be5-248">생략 하면 `FileNumbers`, 모든 활성 파일을 열어는 `FileOpen` 함수 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-248">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="00be5-249">에 대해 시작 된 파일을 닫으면 `Output` 또는 `Append`, 출력의 마지막 버퍼 해당 파일에 대 한 운영 체제 버퍼에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-249">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="00be5-250">닫힌와 연결 된 공간 버퍼 모든 파일을 배포 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-250">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="00be5-251">경우는 `FileClose` 함수 실행 되 고, 해당 파일을 사용 하 여 파일의 연결 끝 번호.</span><span class="sxs-lookup"><span data-stu-id="00be5-251">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-252">이 예제에서는 합니다 `FileClose` 파일을 닫으려면 함수에 대 한 열 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-252">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-253">
            <paramref name="FileNumber" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-253">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="00be5-254">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-254">Required.</span>
          </span>
          <span data-ttu-id="00be5-255">복사할 파일의 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-255">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="00be5-256">
            <c>Source</c>에는 소스 파일의 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-256">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="00be5-257">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-257">Required.</span>
          </span>
          <span data-ttu-id="00be5-258">대상 파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-258">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="00be5-259">
            <c>Destination</c>에는 대상 파일의 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-259">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-260">파일을 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-260">Copies a file.</span>
          </span>
          <span data-ttu-id="00be5-261">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="FileCopy" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-261">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="00be5-262">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-262">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-263">사용 하려는 경우는 `FileCopy` 오류가 발생 하는 현재 열려 있는 파일에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-263">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="00be5-264">`FileCopy` 로컬 드라이브에서 작동 하려면 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-264">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-265">이 예제에서는 `FileCopy` 다른 하나의 파일을 복사 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-265">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="00be5-266">이 예제의 목적에 대 한 가정 `SrcFile` 는 데이터가 포함 된 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-266">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-267">
            <paramref name="Source" /> 또는 <paramref name="Destination" />이 잘못되었거나 지정되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-267">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-268">파일이 이미 열려 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-268">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-269">파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-269">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="00be5-270">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-270">Required.</span>
          </span>
          <span data-ttu-id="00be5-271">파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-271">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="00be5-272">
            <c>PathName</c>은 디렉터리 또는 폴더와 드라이브를 포함할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-272">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-273">파일을 기록한 날짜와 시간을 나타내는 <see langword="Date" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-273">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="00be5-274">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileDateTime" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-274">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="00be5-275">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-275">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-276">파일을 만들거나 마지막으로 수정한 날짜와 시간을 나타내는 <see langword="Date" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-276">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="00be5-277">이 예제에서는 `FileDateTime` 함수는 날짜를 확인 하 고 파일 시간를 만들었거나 마지막으로 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-277">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="00be5-278">형식의 날짜 및 시간 표시는 시스템의 로캘 설정을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-278">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-279">
            <paramref name="PathName" />이 잘못되었거나 와일드카드를 포함하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-279">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-280">대상 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-280">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-281">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-281">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-282">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-282">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-283">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-283">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-284">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-284">Required.</span>
          </span>
          <span data-ttu-id="00be5-285">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-285">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-286">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-286">Required.</span>
          </span>
          <span data-ttu-id="00be5-287">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-287">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-288">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-288">Optional.</span>
          </span>
          <span data-ttu-id="00be5-289">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-289">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-290">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-290">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-291">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-291">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-292">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-292">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-293">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-293">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-294">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-294">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-295">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-295">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-296">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-296">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-297">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-297">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-298">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-298">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-299">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-299">Random Mode</span></span>  
 <span data-ttu-id="00be5-300">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-300">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-301">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-301">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-302">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-302">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-303">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-303">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-304">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-304">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-305">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-305">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-306">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-306">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-307">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-307">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-308">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-308">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-309">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-309">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-310">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-310">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-311">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-311">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-312">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-312">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-313">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-313">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-314">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-314">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-315">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-316">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-316">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-317">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-317">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-318">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-318">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-319">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-319">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-320">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-320">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-321">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-321">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-322">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-322">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-323">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-323">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-324">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-324">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-325">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-325">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-326">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-326">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-327">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-327">Binary Mode</span></span>  
 <span data-ttu-id="00be5-328">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-328">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-329">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-329">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-330">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-330">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-331">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-331">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-332">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-332">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-333">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-333">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-334">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-334">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-335">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-335">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-336">사용 하 여 파일에서 읽기를`FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-336">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-337">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-337">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-338">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-338">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-339">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-339">Required.</span>
          </span>
          <span data-ttu-id="00be5-340">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-340">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-341">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-341">Required.</span>
          </span>
          <span data-ttu-id="00be5-342">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-342">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-343">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-343">Optional.</span>
          </span>
          <span data-ttu-id="00be5-344">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-344">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-345">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-345">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-346">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-346">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-347">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-347">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-348">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-348">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-349">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-349">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-350">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-350">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-351">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-351">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-352">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-352">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-353">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-353">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-354">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-354">Random Mode</span></span>  
 <span data-ttu-id="00be5-355">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-355">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-356">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-356">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-357">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-357">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-358">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-358">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-359">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-359">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-360">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-360">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-361">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-361">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-362">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-362">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-363">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-363">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-364">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-364">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-365">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-365">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-366">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-366">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-367">설명자를 사용 하지 않으면.</span><span class="sxs-lookup"><span data-stu-id="00be5-367">If the descriptor is not used.</span></span> <span data-ttu-id="00be5-368">에 전달 된 크기와 배열 범위를 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-368">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-369">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-369">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-370">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-370">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-371">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-371">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-372">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-372">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-373">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-373">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-374">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-374">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-375">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-375">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-376">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-376">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-377">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-377">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-378">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-378">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-379">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-379">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-380">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-380">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-381">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-381">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-382">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-382">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-383">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-383">Binary Mode</span></span>  
 <span data-ttu-id="00be5-384">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-384">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-385">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-385">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-386">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-386">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-387">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-387">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-388">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-388">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-389">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-389">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-390">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-390">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-391">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-391">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-392">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-392">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-393">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-393">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-394">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-394">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-395">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-395">Required.</span>
          </span>
          <span data-ttu-id="00be5-396">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-396">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-397">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-397">Required.</span>
          </span>
          <span data-ttu-id="00be5-398">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-398">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-399">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-399">Optional.</span>
          </span>
          <span data-ttu-id="00be5-400">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-400">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-401">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-401">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-402">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-402">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-403">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-403">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-404">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-404">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-405">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-405">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-406">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-406">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-407">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-407">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-408">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-408">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-409">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-409">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-410">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-410">Random Mode</span></span>  
 <span data-ttu-id="00be5-411">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-411">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-412">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-412">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-413">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-413">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-414">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-414">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-415">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-415">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-416">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-416">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-417">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-417">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-418">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-418">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-419">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-419">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-420">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-420">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-421">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-421">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-422">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-422">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-423">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-423">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-424">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-424">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-425">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-425">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-426">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-426">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-427">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-427">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-428">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-428">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-429">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-429">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-430">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-430">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-431">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-431">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-432">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-432">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-433">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-433">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-434">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-434">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-435">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-435">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-436">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-436">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-437">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-437">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-438">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-438">Binary Mode</span></span>  
 <span data-ttu-id="00be5-439">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-439">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-440">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-440">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-441">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-441">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-442">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-442">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-443">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-443">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-444">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-444">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-445">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-445">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-446">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-446">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-447">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-447">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-448">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-448">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-449">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-449">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-450">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-450">Required.</span>
          </span>
          <span data-ttu-id="00be5-451">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-451">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-452">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-452">Required.</span>
          </span>
          <span data-ttu-id="00be5-453">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-453">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-454">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-454">Optional.</span>
          </span>
          <span data-ttu-id="00be5-455">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-455">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-456">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-456">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-457">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-457">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-458">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-458">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-459">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-459">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-460">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-460">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-461">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-461">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-462">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-462">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-463">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-463">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-464">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-464">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-465">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-465">Random Mode</span></span>  
 <span data-ttu-id="00be5-466">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-466">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-467">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를`FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-467">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-468">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-468">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-469">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-469">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-470">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-470">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-471">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-471">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-472">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-472">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-473">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-473">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-474">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-474">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-475">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-475">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-476">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-476">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-477">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-477">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-478">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-478">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-479">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-479">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-480">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-480">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-481">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-481">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-482">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-482">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-483">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-483">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-484">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-484">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-485">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-485">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-486">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-486">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-487">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-487">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-488">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-488">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-489">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-489">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-490">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-490">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-491">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-491">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-492">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-492">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-493">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-493">Binary Mode</span></span>  
 <span data-ttu-id="00be5-494">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-494">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-495">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-495">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-496">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-496">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-497">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-497">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-498">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-498">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-499">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-499">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-500">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-500">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-501">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-501">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-502">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-502">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-503">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-503">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-504">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-504">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-505">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-505">Required.</span>
          </span>
          <span data-ttu-id="00be5-506">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-506">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-507">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-507">Required.</span>
          </span>
          <span data-ttu-id="00be5-508">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-508">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-509">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-509">Optional.</span>
          </span>
          <span data-ttu-id="00be5-510">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-510">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-511">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-511">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-512">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-512">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-513">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-513">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-514">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-514">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-515">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-515">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-516">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-516">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-517">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-517">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-518">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-518">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-519">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-519">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-520">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-520">Random Mode</span></span>  
 <span data-ttu-id="00be5-521">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-521">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-522">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-522">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-523">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-523">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-524">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-524">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-525">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-525">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-526">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-526">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-527">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-527">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-528">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-528">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-529">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-529">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-530">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-530">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-531">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-531">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-532">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-532">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-533">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-533">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-534">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-534">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-535">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-535">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-536">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-536">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-537">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-537">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-538">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-538">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-539">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-539">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-540">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-540">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-541">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-541">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-542">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-542">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-543">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-543">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-544">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-544">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-545">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-545">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-546">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-546">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-547">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-547">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-548">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-548">Binary Mode</span></span>  
 <span data-ttu-id="00be5-549">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-549">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-550">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-550">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-551">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-551">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-552">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-552">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-553">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-553">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-554">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-554">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-555">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-555">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-556">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-556">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-557">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-557">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-558">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-558">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-559">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-559">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-560">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-560">Required.</span>
          </span>
          <span data-ttu-id="00be5-561">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-561">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-562">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-562">Required.</span>
          </span>
          <span data-ttu-id="00be5-563">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-563">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-564">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-564">Optional.</span>
          </span>
          <span data-ttu-id="00be5-565">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-565">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-566">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-566">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-567">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-567">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-568">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-568">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-569">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-569">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-570">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-570">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-571">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-571">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-572">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-572">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-573">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-573">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-574">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-574">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-575">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-575">Random Mode</span></span>  
 <span data-ttu-id="00be5-576">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-576">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-577">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-577">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-578">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-578">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-579">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-579">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-580">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-580">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-581">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-581">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-582">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-582">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-583">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-583">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-584">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-584">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-585">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-585">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-586">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-586">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-587">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-587">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-588">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-588">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-589">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-589">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-590">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-590">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-591">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-591">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-592">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-592">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-593">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-593">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-594">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-594">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-595">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-595">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-596">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-596">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-597">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-597">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-598">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-598">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-599">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-599">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-600">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-600">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-601">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-601">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-602">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-602">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-603">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-603">Binary Mode</span></span>  
 <span data-ttu-id="00be5-604">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-604">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-605">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-605">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-606">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-606">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-607">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-607">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-608">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-608">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-609">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-609">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-610">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-610">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-611">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-611">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-612">사용 하 여 파일에서 읽기를`FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-612">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-613">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-613">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-614">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-614">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-615">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-615">Required.</span>
          </span>
          <span data-ttu-id="00be5-616">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-616">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-617">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-617">Required.</span>
          </span>
          <span data-ttu-id="00be5-618">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-618">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-619">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-619">Optional.</span>
          </span>
          <span data-ttu-id="00be5-620">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-620">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-621">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-621">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-622">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-622">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-623">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-623">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-624">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-624">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-625">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-625">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-626">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-626">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-627">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-627">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-628">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-628">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-629">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-629">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-630">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-630">Random Mode</span></span>  
 <span data-ttu-id="00be5-631">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-631">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-632">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-632">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-633">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-633">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-634">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-634">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-635">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-635">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-636">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-636">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-637">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-637">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-638">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-638">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-639">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-639">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-640">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-640">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-641">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-641">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-642">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-642">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-643">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-643">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-644">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-644">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-645">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-645">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-646">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-646">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-647">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-647">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-648">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-648">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-649">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-649">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-650">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-650">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-651">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-651">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-652">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-652">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-653">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-653">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-654">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-654">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-655">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-655">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-656">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-656">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-657">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-657">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-658">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-658">Binary Mode</span></span>  
 <span data-ttu-id="00be5-659">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-659">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-660">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-660">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-661">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-661">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-662">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-662">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-663">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-663">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-664">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-664">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-665">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-665">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-666">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-666">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-667">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-667">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-668">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-668">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-669">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-670">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-670">Required.</span>
          </span>
          <span data-ttu-id="00be5-671">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-671">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-672">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-672">Required.</span>
          </span>
          <span data-ttu-id="00be5-673">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-673">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-674">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-674">Optional.</span>
          </span>
          <span data-ttu-id="00be5-675">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-675">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-676">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-676">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-677">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-678">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-678">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-679">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-679">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-680">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-680">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-681">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-681">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-682">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-682">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-683">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-683">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-684">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-684">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-685">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-685">Random Mode</span></span>  
 <span data-ttu-id="00be5-686">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-686">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-687">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-687">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-688">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-688">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-689">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-689">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-690">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-690">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-691">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-691">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-692">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-692">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-693">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-693">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-694">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-694">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-695">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-695">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-696">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-696">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-697">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-697">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-698">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-698">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-699">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-699">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-700">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-700">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-701">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-701">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-702">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-702">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-703">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-703">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-704">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-704">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-705">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-705">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-706">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-706">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-707">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-707">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-708">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-708">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-709">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-709">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-710">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-710">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-711">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-711">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-712">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-712">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-713">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-713">Binary Mode</span></span>  
 <span data-ttu-id="00be5-714">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-714">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-715">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-715">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-716">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-716">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-717">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-717">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-718">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-718">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-719">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-719">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-720">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-720">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-721">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-721">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-722">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-722">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-723">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-723">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-724">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-724">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-725">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-725">Required.</span>
          </span>
          <span data-ttu-id="00be5-726">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-726">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-727">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-727">Required.</span>
          </span>
          <span data-ttu-id="00be5-728">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-728">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-729">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-729">Optional.</span>
          </span>
          <span data-ttu-id="00be5-730">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-730">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-731">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-731">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-732">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-732">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-733">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-733">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-734">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-734">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-735">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-735">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-736">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-736">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-737">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-737">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-738">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-738">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-739">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-739">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-740">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-740">Random Mode</span></span>  
 <span data-ttu-id="00be5-741">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-741">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-742">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-742">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-743">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-743">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-744">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-744">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-745">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-745">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-746">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-746">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-747">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-747">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-748">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-748">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-749">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-749">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-750">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-750">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-751">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-751">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-752">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-752">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-753">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-753">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-754">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-754">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-755">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-755">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-756">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-756">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-757">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-757">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-758">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-758">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-759">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-759">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-760">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-760">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-761">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-761">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-762">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-762">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-763">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-763">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-764">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-764">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-765">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-765">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-766">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-766">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-767">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-767">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-768">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-768">Binary Mode</span></span>  
 <span data-ttu-id="00be5-769">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-769">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-770">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-770">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-771">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-771">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-772">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-772">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-773">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-773">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-774">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-774">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-775">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-775">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-776">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-776">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-777">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-777">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-778">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-778">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-779">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-779">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-780">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-780">Required.</span>
          </span>
          <span data-ttu-id="00be5-781">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-781">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-782">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-782">Required.</span>
          </span>
          <span data-ttu-id="00be5-783">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-783">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-784">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-784">Optional.</span>
          </span>
          <span data-ttu-id="00be5-785">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-785">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-786">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-786">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-787">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-788">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-788">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-789">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-789">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-790">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-790">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-791">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-791">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-792">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-792">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-793">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-793">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-794">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-794">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-795">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-795">Random Mode</span></span>  
 <span data-ttu-id="00be5-796">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-796">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-797">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-797">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-798">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-798">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-799">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-799">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-800">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-800">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-801">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-801">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-802">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-802">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-803">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-803">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-804">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-804">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-805">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-806">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-806">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-807">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-807">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-808">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-808">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-809">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-809">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-810">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-810">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-811">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-811">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-812">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-812">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-813">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-813">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-814">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-814">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-815">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-815">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-816">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-816">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-817">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-817">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-818">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-818">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-819">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-819">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-820">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-820">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-821">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-821">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-822">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-822">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-823">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-823">Binary Mode</span></span>  
 <span data-ttu-id="00be5-824">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-824">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-825">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-825">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-826">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-826">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-827">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-827">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-828">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-828">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-829">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-829">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-830">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-830">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-831">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-831">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-832">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-832">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-833">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-833">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-834">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-834">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-835">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-835">Required.</span>
          </span>
          <span data-ttu-id="00be5-836">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-836">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-837">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-837">Required.</span>
          </span>
          <span data-ttu-id="00be5-838">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-838">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-839">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-839">Optional.</span>
          </span>
          <span data-ttu-id="00be5-840">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-840">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-841">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-841">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-842">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-842">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-843">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-843">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-844">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-844">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-845">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-845">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-846">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-846">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-847">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-847">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-848">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-848">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-849">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-849">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-850">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-850">Random Mode</span></span>  
 <span data-ttu-id="00be5-851">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-852">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-852">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-853">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-854">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-855">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-855">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-856">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-856">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-857">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-857">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-858">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-858">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-859">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-859">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-860">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-861">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-861">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-862">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-862">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-863">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-863">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-864">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-865">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-866">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-866">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-867">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-868">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-868">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-869">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-869">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-870">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-870">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-871">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-871">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-872">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-873">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-873">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-874">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-874">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-875">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-875">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-876">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-876">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-877">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-877">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-878">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-878">Binary Mode</span></span>  
 <span data-ttu-id="00be5-879">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-880">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-881">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-882">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-882">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-883">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-883">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-884">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-884">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-885">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-885">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-886">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-886">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-887">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-887">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-888">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-888">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-889">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-889">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-890">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-890">Required.</span>
          </span>
          <span data-ttu-id="00be5-891">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-891">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-892">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-892">Required.</span>
          </span>
          <span data-ttu-id="00be5-893">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-893">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-894">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-894">Optional.</span>
          </span>
          <span data-ttu-id="00be5-895">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-895">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="00be5-896">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-896">Optional.</span>
          </span>
          <span data-ttu-id="00be5-897">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="00be5-898">길이를 설명하는 문자열에 대해 2바이트 설명자를 쓸 것인지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-898">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="00be5-899">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-900">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-900">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-901">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-902">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-903">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-903">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-904">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-904">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-905">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-906">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-906">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-907">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-907">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-908">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-908">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-909">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-909">Random Mode</span></span>  
 <span data-ttu-id="00be5-910">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-911">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-911">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-912">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-913">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-914">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-914">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-915">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-915">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-916">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-916">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-917">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-917">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-918">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-918">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-919">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-919">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-920">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-920">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-921">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-921">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-922">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-922">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-923">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-923">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-924">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-924">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-925">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-925">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-926">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-926">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-927">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-927">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-928">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-928">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-929">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-929">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-930">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-930">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-931">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-932">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-932">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-933">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-933">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-934">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-935">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-935">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-936">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-937">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-937">Binary Mode</span></span>  
 <span data-ttu-id="00be5-938">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-939">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-940">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-941">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-941">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-942">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-942">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-943">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-943">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-944">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-944">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-945">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-945">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-946">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-946">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-947">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-947">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-948">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-948">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-949">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-949">Required.</span>
          </span>
          <span data-ttu-id="00be5-950">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-950">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-951">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-951">Required.</span>
          </span>
          <span data-ttu-id="00be5-952">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-952">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-953">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-953">Optional.</span>
          </span>
          <span data-ttu-id="00be5-954">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-954">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="00be5-955">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-955">Optional.</span>
          </span>
          <span data-ttu-id="00be5-956">배열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-956">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="00be5-957">배열을 동적으로 처리할 것인지의 여부와 배열의 크기와 범위를 설명하는 배열 설명자가 필요한지의 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-957">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="00be5-958">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-958">Optional.</span>
          </span>
          <span data-ttu-id="00be5-959">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-959">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="00be5-960">길이를 설명하는 문자열에 대해 2바이트 설명자를 쓸 것인지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-960">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="00be5-961">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-961">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-962">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-962">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-963">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-963">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="00be5-964">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-964">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-965">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-965">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-966">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-966">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="00be5-967">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-968">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-968">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-969">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-969">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-970">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-970">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-971">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-971">Random Mode</span></span>  
 <span data-ttu-id="00be5-972">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-972">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-973">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-973">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-974">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-974">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-975">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-975">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-976">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-976">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-977">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-977">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-978">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-978">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-979">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-979">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-980">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-980">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="00be5-981">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-981">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-982">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-982">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="00be5-983">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-983">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="00be5-984">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-984">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="00be5-985">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-986">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-987">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-988">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-988">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="00be5-989">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-989">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="00be5-990">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="00be5-990">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="00be5-991">데이터에 대해 200 바이트. (4 \* 5 \* 10).</span><span class="sxs-lookup"><span data-stu-id="00be5-991">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-992">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-992">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="00be5-993">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-993">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-994">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-994">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-995">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`) 한 설명자가 2 + 8 시간 차원 수가 옵니다: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-995">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-996">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-996">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="00be5-997">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-997">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-998">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-998">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-999">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-999">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1000">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1000">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1001">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1001">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1002">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1002">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1003">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1003">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1004">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1004">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="00be5-1005">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1005">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="00be5-1006">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1006">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1007">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1007">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="00be5-1008">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1008">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1009">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1009">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1010">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1010">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1011">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1011">Required.</span>
          </span>
          <span data-ttu-id="00be5-1012">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1012">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1013">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1013">Required.</span>
          </span>
          <span data-ttu-id="00be5-1014">데이터를 읽어오는 올바른 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1014">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1015">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1015">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1016">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1016">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1017">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1017">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="00be5-1018">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGetObject" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="00be5-1019">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1020">합니다 `FileGetObject` 함수 대신 사용 됩니다 `FileGet` 경우 컴파일할 때 모호성을 피할 수 형식 `Object` 와 같은 다른 형식 대신 반환 됩니다 `Integer`를 `Long`, `Short`등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1020">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="00be5-1021">작성 하려는 경우는 `Variant` 형식 `FileGetObject` 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1021">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="00be5-1022">의문이 있으면 두 번째 매개 변수에 대 한 개체를 사용 하는 경우에 것이 항상 좋습니다를 사용 하는 `FilePutObject` 고 `FileGetObject`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1022">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="00be5-1023">`FileGetObject` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1023">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1024">데이터를 읽을 `FileGetObject` 일반적으로 작성 된 `FilePutObject`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1024">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="00be5-1025">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1025">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1026">생략 하면 `RecordNumber`, `FileGetObject` 마지막 레코드 또는 바이트를 읽고 `FileGetObject` 또는 `FilePutObject` 함수 (또는 마지막 가리키는 `Seek` 함수).</span><span class="sxs-lookup"><span data-stu-id="00be5-1026">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1027">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1027">Random Mode</span></span>  
 <span data-ttu-id="00be5-1028">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1028">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1029">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGetObject` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1029">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1030">끝 하나의 레코드와 다음 레코드의 시작 부분 사이의 공간 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1030">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1031">데이터의 안쪽 여백을 정확 하 게 확인할 수 없으므로 레코드 길이 읽을 데이터의 길이 일치 하도록 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1031">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="00be5-1032">읽어 들일 변수가 기본적으로 문자열 인지 `FileGetObject` 문자열 길이 포함 하는 2 바이트 설명자를 읽고 다음 변수에 전달 되는 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1032">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1033">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1033">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1034">Visual Basic 6.0 및 이전 버전에는 고정 길이 문자열 및 파일을 읽을 때, 길이 설명자를 쓰지을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1034">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="00be5-1035">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="00be5-1035">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1036">읽어 들일 변수의 배열을 인 레코드 길이으로 지정 하는 경우는 `RecordLength` 의 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1036">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1037">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1037">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1038">길이 2 + 8 시간 차원 수: 2 + 8 \* 더한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1038">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="00be5-1039">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어 디스크:</span><span class="sxs-lookup"><span data-stu-id="00be5-1039">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="00be5-1040">218 바이트 같이 배포 됩니다. (2 + 8 \* 2), 설명자에 대 한 18 바이트 및 (4 \* 5 \* 10) 데이터에 대 한 100 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1040">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="00be5-1041">`FileGetObject` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1041">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="00be5-1042">사용자 정의 형식에서 디스크를 동적 배열 (로 작성 된 `FilePutObject`)는 설명자가 2 + 8 시간 차원 수가 옵니다: 2 + 8 \* 더한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1042">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="00be5-1043">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 모든 배열 및 해당 설명자를 포함 하 여 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1043">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="00be5-1044"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> 클래스를 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1044">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1045">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1045">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1046">파일에서 열에 대 한 `Binary` 모드의 모든는 `Random` 이러한 예외를 사용 하 여 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1046">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="00be5-1047">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1047">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1048">`FileGetObject` 변수를 읽고 모든 디스크에서 연속적으로 즉, 레코드 간에 패딩 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1048">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1049">구조에 포함 되지 않은 모든 배열에 대 한 `FileGetObject` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1049">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="00be5-1050">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1050">No descriptor is read.</span></span>  
  
 <span data-ttu-id="00be5-1051">`FileGetObject` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1051">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1052">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1052">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-1053">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1053">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-1054">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1054">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1055">다음 예제에서는 레코드를 읽고 테스트 파일에 다음이 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1055">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="00be5-1056">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1056">Required.</span>
          </span>
          <span data-ttu-id="00be5-1057">파일을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1057">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="00be5-1058">
            <c>PathName</c>은 디렉터리 또는 폴더와 드라이브를 포함할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1058">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1059">파일 길이를 바이트로 지정하는 <see langword="Long" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1059">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="00be5-1060">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileLen" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1060">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="00be5-1061">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1061">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-1062">파일 길이를 바이트 단위로 지정하는 <see langword="Long" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1062">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1063">지정한 파일이 열려 있으면 시기는 `FileLen` 함수 호출 되 면 반환 된 값으로 열었을 때 파일의 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1063">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-1064">열려 있는 파일의 현재 길이 가져오려면는 `LOF` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1064">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1065">이 예제에서는 `FileLen` 파일의 길이 바이트 단위로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1065">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="00be5-1066">이 예제의 목적에 대 한 가정 `TestFile` 은 일부 데이터를 포함 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1066">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-1067">파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1067">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1068">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1068">Required.</span>
          </span>
          <span data-ttu-id="00be5-1069">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1069">Any valid file number.</span>
          </span>
          <span data-ttu-id="00be5-1070">다음으로 사용 가능한 파일 번호를 가져오려면 <see langword="FreeFile" /> 함수를 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1070">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="00be5-1071">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1071">Required.</span>
          </span>
          <span data-ttu-id="00be5-1072">파일 이름을 지정하는 <see langword="String" /> 식으로, 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1072">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="00be5-1073">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1073">Required.</span>
          </span>
          <span data-ttu-id="00be5-1074">
            <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, <see langword="Random" /> 등의 파일 모드를 지정하는 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1074">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="00be5-1075">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenMode" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1075">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="00be5-1076">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1076">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1077">
            <see langword="Read" />, <see langword="Write" />, <see langword="ReadWrite" /> 등 열려 있는 파일에 허용되는 작업을 지정하는 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1077">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="00be5-1078">기본값은 <see langword="ReadWrite" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1078">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="00be5-1079">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenAccess" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1079">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="00be5-1080">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1080">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1081">
            <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, <see langword="Lock Read Write" /> 등 열려 있는 파일에 대해 다른 프로세스에 허용되지 않는 작업을 지정하는 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1081">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="00be5-1082">기본값은 <see langword="Lock Read Write" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1082">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="00be5-1083">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenShare" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1083">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="00be5-1084">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1084">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1085">32,767(바이트)보다 작거나 같은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1085">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="00be5-1086">임의 액세스용으로 연 파일의 경우 이 값은 레코드 길이가 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1086">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="00be5-1087">순차 파일의 경우 이 값은 버퍼링된 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1087">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1088">입력 또는 출력할 파일을 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1088">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="00be5-1089">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileOpen" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1089">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="00be5-1090">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1090">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1091">`FileOpen` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1091">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-1092">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-1093">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-1094">모든 I/O 작업을 수행 하려면 파일을 열어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1094">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="00be5-1095">`FileOpen` 파일 I/O에 대 한 버퍼를 할당 하 고 버퍼를 사용 하는 액세스 모드를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1095">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-1096">파일에 쓸 때 응용 프로그램 할 파일을 만듭니다. 작성 하려는 파일에 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="00be5-1096">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="00be5-1097">이렇게 하려면 파일을 만들 디렉터리에 대 한 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1097">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="00be5-1098">그러나 파일을 지정 하 여 `FileName` 존재 하면 응용 프로그램 `Write` 파일 자체에 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1098">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="00be5-1099">보안을 강화 하려면 가능한 한, 배포 및 권한 부여 하는 동안 파일을 만들고 하는 아무 곳에 나 `Write` 해당 파일에 대 한 전체 디렉터리 대신만 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1099">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="00be5-1100">보안을 강화 하려면 대신 루트 디렉터리 또는 Program Files 디렉터리에 사용자를 디렉터리에 데이터를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1100">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="00be5-1101">열에 대 한 채널을 사용 하 여 찾을 수 있습니다는 `FreeFile()` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1101">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-1102">`FileOpen` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형 부분 신뢰 상황에서는 해당 실행에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1102">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="00be5-1103">자세한 내용은 참조 하세요. <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1103">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1104">다양 한 용도 보여 주는이 예제는 `FileOpen` 함수 입력 및 출력 파일을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1104">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="00be5-1105">다음 코드 파일을 엽니다 `TestFile` 에서 `Input` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1105">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="00be5-1106">이 예제에서 파일을 엽니다 `Binary` 쓰기 작업용 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1106">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="00be5-1107">다음 예제에서 파일을 엽니다 `Random` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1107">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="00be5-1108">구조체의 레코드를 포함 하는 파일 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1108">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="00be5-1109">이 코드 예제에서 파일을 엽니다 `Output` 모드; 읽거나 파일에 쓸 모든 프로세스 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1109">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="00be5-1110">이 코드 예제에서 파일을 엽니다 `Binary` 읽기에 대 한 모드 다른 프로세스가 파일을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1110">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1111">레코드 길이가 음수입니다(–1은 아님).</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1111">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1112">
            <paramref name="FileName" />이 이미 열려 있거나 <paramref name="FileName" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1112">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-1113">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1113">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1114">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1114">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1115">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1115">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1116">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1116">Required.</span>
          </span>
          <span data-ttu-id="00be5-1117">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1117">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1118">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1118">Required.</span>
          </span>
          <span data-ttu-id="00be5-1119">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1119">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1120">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1120">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1121">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1121">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1122">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1122">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1123">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1123">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1124">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1124">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1125">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1125">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1126">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1126">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1127">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1127">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1128">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1128">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1129">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1129">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1130">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1130">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1131">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1131">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1132">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1132">Random Mode</span></span>  
 <span data-ttu-id="00be5-1133">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1133">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1134">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1134">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1135">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1135">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1136">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1136">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1137">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1137">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1138">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1138">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1139">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1139">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1140">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1140">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1141">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1141">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1142">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1142">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1143">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1143">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1144">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1144">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1145">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1145">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1146">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1146">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1147">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1147">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1148">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1148">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1149">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1149">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1150">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1150">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1151">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1151">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1152">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1152">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1153">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1153">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1154">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1154">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1155">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1155">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1156">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1156">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1157">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1157">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1158">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1158">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1159">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1159">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1160">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1160">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1161">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1161">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1162">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1162">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1163">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1163">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1164">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1164">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1165">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1165">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1166">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1166">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1167">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1167">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1168">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1168">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1169">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1169">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1170">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1170">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1171">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1171">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1172">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1172">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1173">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1173">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1174">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1174">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1175">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1175">Required.</span>
          </span>
          <span data-ttu-id="00be5-1176">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1176">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1177">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1177">Required.</span>
          </span>
          <span data-ttu-id="00be5-1178">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1178">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1179">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1179">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1180">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1180">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1181">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1181">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1182">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1182">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1183">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1183">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1184">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1184">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1185">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1185">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1186">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1186">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1187">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1187">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1188">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1188">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1189">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1189">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1190">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1190">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1191">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1191">Random Mode</span></span>  
 <span data-ttu-id="00be5-1192">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1192">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1193">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1193">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1194">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1194">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1195">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1195">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1196">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1196">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1197">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1197">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1198">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1198">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1199">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1199">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1200">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1200">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1201">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1201">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1202">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1202">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1203">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1203">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1204">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1204">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1205">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1205">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1206">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1206">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1207">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1207">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1208">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1208">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1209">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1209">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1210">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1210">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1211">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1211">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1212">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1213">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1213">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1214">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1214">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1215">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1215">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1216">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1216">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1217">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1217">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1218">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1218">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1219">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1219">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1220">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1220">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1221">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1221">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1222">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1222">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1223">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1223">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1224">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1224">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1225">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1225">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1226">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1226">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1227">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1227">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1228">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1228">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1229">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1229">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1230">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1230">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1231">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1231">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1232">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1232">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1233">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1233">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1234">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1234">Required.</span>
          </span>
          <span data-ttu-id="00be5-1235">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1235">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1236">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1236">Required.</span>
          </span>
          <span data-ttu-id="00be5-1237">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1237">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1238">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1238">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1239">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1239">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1240">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1240">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1241">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1241">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1242">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1242">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1243">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1243">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1244">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1244">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1245">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1245">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1246">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1246">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1247">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1247">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1248">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1248">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1249">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1249">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1250">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1250">Random Mode</span></span>  
 <span data-ttu-id="00be5-1251">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1251">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1252">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1252">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1253">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1253">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1254">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1254">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1255">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1255">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1256">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1256">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1257">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1257">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1258">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1258">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1259">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1259">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1260">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1261">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1261">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1262">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1262">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1263">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1263">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1264">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1264">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1265">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1265">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1266">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1266">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1267">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1267">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1268">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1268">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1269">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1269">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1270">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1270">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1271">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1271">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1272">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1272">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1273">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1273">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1274">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1274">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1275">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1275">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1276">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1276">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1277">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1277">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1278">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1278">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1279">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1279">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1280">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1280">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1281">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1281">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1282">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1282">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1283">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1283">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1284">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1284">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1285">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1285">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1286">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1286">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1287">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1287">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1288">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1288">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1289">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1289">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1290">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1290">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1291">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1291">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1292">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1292">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1293">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1293">Required.</span>
          </span>
          <span data-ttu-id="00be5-1294">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1294">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1295">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1295">Required.</span>
          </span>
          <span data-ttu-id="00be5-1296">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1296">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1297">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1297">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1298">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1298">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1299">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1299">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1300">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1300">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1301">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1301">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1302">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1302">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1303">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1303">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1304">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1304">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1305">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1305">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1306">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1306">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1307">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1307">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1308">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1308">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1309">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1309">Random Mode</span></span>  
 <span data-ttu-id="00be5-1310">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1310">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1311">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1311">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1312">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1312">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1313">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1313">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1314">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1314">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1315">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1315">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1316">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1316">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1317">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1317">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1318">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1318">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1319">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1319">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1320">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1320">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1321">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1322">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1322">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1323">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1323">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1324">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1324">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1325">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1325">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1326">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1326">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1327">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1327">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1328">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1328">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1329">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1329">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1330">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1331">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1331">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1332">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1332">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1333">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1333">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1334">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1334">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1335">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1335">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1336">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1336">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1337">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1337">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1338">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1338">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1339">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1339">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1340">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1340">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1341">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1341">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1342">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1342">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1343">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1343">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1344">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1344">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1345">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1345">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1346">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1346">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1347">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1347">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1348">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1348">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1349">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1349">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1350">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1350">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1351">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1351">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1352">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1352">Required.</span>
          </span>
          <span data-ttu-id="00be5-1353">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1354">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1354">Required.</span>
          </span>
          <span data-ttu-id="00be5-1355">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1355">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1356">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1356">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1357">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1358">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1358">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1359">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1360">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1361">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1362">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1363">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1364">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1365">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1366">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1367">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1368">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1368">Random Mode</span></span>  
 <span data-ttu-id="00be5-1369">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1370">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1371">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1372">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1373">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1374">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1375">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1376">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1377">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1378">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1379">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1380">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1381">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1382">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1383">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1384">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1385">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1386">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1387">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1388">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1389">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1390">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1391">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1392">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1393">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1394">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1395">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1396">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1396">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1397">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1398">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1399">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1400">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1401">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1402">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1403">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1404">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1405">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1406">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1407">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1408">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1409">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1409">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1410">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1410">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1411">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1411">Required.</span>
          </span>
          <span data-ttu-id="00be5-1412">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1412">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1413">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1413">Required.</span>
          </span>
          <span data-ttu-id="00be5-1414">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1414">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1415">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1415">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1416">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1416">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1417">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1417">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1418">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1418">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1419">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1419">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1420">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1420">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1421">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1421">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1422">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1422">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1423">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1423">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1424">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1424">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1425">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1425">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1426">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1426">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1427">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1427">Random Mode</span></span>  
 <span data-ttu-id="00be5-1428">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1428">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1429">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1429">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1430">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1430">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1431">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1431">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1432">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1432">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1433">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1433">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1434">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1434">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1435">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1435">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1436">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1436">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1437">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1438">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1438">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1439">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1439">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1440">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1440">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1441">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1441">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1442">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1442">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1443">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1443">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1444">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1444">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1445">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1445">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1446">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1446">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1447">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1447">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1448">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1448">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1449">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1449">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1450">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1450">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1451">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1451">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1452">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1452">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1453">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1453">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1454">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1454">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1455">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1455">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1456">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1456">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1457">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1457">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1458">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1458">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1459">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1459">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1460">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1460">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1461">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1461">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1462">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1462">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1463">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1463">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1464">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1464">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1465">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1465">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1466">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1466">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1467">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1467">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1468">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1468">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1469">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1469">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1470">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1470">Required.</span>
          </span>
          <span data-ttu-id="00be5-1471">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1471">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1472">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1472">Required.</span>
          </span>
          <span data-ttu-id="00be5-1473">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1473">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1474">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1474">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1475">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1475">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1476">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1476">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1477">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1477">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1478">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1478">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1479">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1479">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1480">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1480">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1481">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1481">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1482">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1482">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1483">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1483">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1484">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1484">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1485">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1485">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1486">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1486">Random Mode</span></span>  
 <span data-ttu-id="00be5-1487">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1487">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1488">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1488">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1489">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1489">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1490">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1490">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1491">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1491">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1492">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1492">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1493">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1493">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1494">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1494">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1495">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1495">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1496">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1496">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1497">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를`VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1497">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1498">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1499">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1499">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1500">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1500">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1501">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1501">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1502">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1502">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1503">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1504">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1504">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1505">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1505">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1506">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1506">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1507">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1507">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1508">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1508">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1509">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1509">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1510">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1510">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1511">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1511">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1512">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1512">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1513">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1513">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1514">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1514">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1515">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1515">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1516">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1516">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1517">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1517">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1518">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1518">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1519">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1519">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1520">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1520">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1521">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1521">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1522">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1522">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1523">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1523">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1524">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1524">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1525">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1525">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1526">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1526">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1527">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1527">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1528">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1529">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1529">Required.</span>
          </span>
          <span data-ttu-id="00be5-1530">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1531">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1531">Required.</span>
          </span>
          <span data-ttu-id="00be5-1532">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1533">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1533">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1534">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1535">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1536">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1537">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1538">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1539">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1540">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1541">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1542">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1543">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1544">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1545">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1545">Random Mode</span></span>  
 <span data-ttu-id="00be5-1546">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1547">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1548">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1549">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1550">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1551">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1552">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1553">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1554">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1555">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1556">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1557">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1558">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1559">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1560">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1561">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1562">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1563">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1564">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1565">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1566">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1567">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1568">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1569">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1570">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1571">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1572">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1573">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1573">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1574">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1575">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1576">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1577">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1578">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1579">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1580">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1581">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1582">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1583">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1584">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1585">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1586">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1587">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1588">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1588">Required.</span>
          </span>
          <span data-ttu-id="00be5-1589">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1589">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1590">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1590">Required.</span>
          </span>
          <span data-ttu-id="00be5-1591">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1591">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1592">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1592">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1593">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1593">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1594">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1594">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1595">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1595">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1596">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1596">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1597">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1597">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1598">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1598">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1599">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1599">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1600">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1600">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1601">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1601">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1602">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1602">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1603">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1603">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1604">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1604">Random Mode</span></span>  
 <span data-ttu-id="00be5-1605">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1605">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1606">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1606">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1607">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1607">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1608">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1608">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1609">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1609">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1610">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1610">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1611">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1611">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1612">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1612">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1613">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1613">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1614">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1614">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1615">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1615">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1616">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1616">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1617">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1617">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1618">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1618">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1619">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1619">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1620">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1620">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1621">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1621">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1622">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1622">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1623">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1623">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1624">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1624">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1625">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1625">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1626">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1626">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1627">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1627">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1628">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1628">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1629">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1629">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1630">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1630">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1631">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1631">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1632">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1632">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1633">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1633">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1634">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1634">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1635">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1635">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1636">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1636">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1637">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1637">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1638">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1638">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1639">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1639">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1640">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1640">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1641">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1641">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1642">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1642">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1643">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1643">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1644">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1644">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1645">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1646">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1647">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1647">Required.</span>
          </span>
          <span data-ttu-id="00be5-1648">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1648">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1649">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1649">Required.</span>
          </span>
          <span data-ttu-id="00be5-1650">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1650">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1651">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1651">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1652">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1652">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1653">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1653">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1654">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1655">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1656">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1656">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1657">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1657">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1658">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1658">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1659">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1659">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1660">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1660">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1661">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1661">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1662">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1662">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1663">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1663">Random Mode</span></span>  
 <span data-ttu-id="00be5-1664">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1664">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1665">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1665">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1666">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1666">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1667">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1667">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1668">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1668">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1669">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1669">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1670">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1670">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1671">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1671">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1672">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1672">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1673">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1673">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1674">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1674">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1675">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1676">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1676">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1677">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1677">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1678">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1678">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1679">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1679">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1680">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1680">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1681">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1681">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1682">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1682">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1683">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1683">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1684">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1684">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1685">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1685">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1686">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1686">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1687">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1687">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1688">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1688">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1689">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1689">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1690">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1690">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1691">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1691">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1692">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1692">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1693">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1693">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1694">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1694">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1695">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1695">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1696">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1696">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1697">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1697">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1698">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1698">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1699">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1699">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1700">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1700">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1701">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1701">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1702">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1702">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1703">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1703">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1704">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1704">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1705">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1705">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1706">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1706">Required.</span>
          </span>
          <span data-ttu-id="00be5-1707">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1708">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1708">Required.</span>
          </span>
          <span data-ttu-id="00be5-1709">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1709">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1710">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1710">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1711">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1712">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1712">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1713">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1714">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1715">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1715">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1716">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1716">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1717">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1718">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1718">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1719">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1719">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1720">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1720">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1721">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1721">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1722">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1722">Random Mode</span></span>  
 <span data-ttu-id="00be5-1723">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1723">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1724">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를`RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1724">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1725">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1725">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1726">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1726">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1727">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1727">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1728">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1728">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1729">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1729">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1730">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1730">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1731">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1731">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1732">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1732">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1733">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1733">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1734">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1734">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1735">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1735">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1736">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1736">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1737">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1737">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1738">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1738">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1739">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1739">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1740">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1740">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1741">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1741">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1742">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1742">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1743">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1744">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1744">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1745">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1745">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1746">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1747">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1747">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1748">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1749">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1749">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1750">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1750">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1751">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1751">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1752">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1752">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1753">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1753">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1754">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1754">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1755">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1755">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1756">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1756">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1757">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1757">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1758">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1758">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1759">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1759">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1760">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1760">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1761">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1761">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1762">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1762">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1763">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1763">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1764">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1764">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1765">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1765">Required.</span>
          </span>
          <span data-ttu-id="00be5-1766">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1766">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1767">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1767">Required.</span>
          </span>
          <span data-ttu-id="00be5-1768">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1768">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1769">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1769">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1770">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1770">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1771">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1771">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1772">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1772">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1773">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1773">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1774">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1774">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1775">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1775">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1776">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1776">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1777">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1777">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1778">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1778">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1779">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1779">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1780">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1780">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1781">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1781">Random Mode</span></span>  
 <span data-ttu-id="00be5-1782">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1783">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1783">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1784">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1785">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1786">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1786">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1787">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1787">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1788">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1788">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1789">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1789">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1790">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1790">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1791">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1791">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1792">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1792">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1793">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1793">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1794">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1794">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1795">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1795">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1796">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1796">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1797">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1797">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1798">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1798">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1799">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1799">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1800">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1800">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1801">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1801">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1802">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1802">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1803">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1803">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1804">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1804">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1805">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1805">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1806">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1806">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1807">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1807">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1808">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1808">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1809">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1809">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1810">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1811">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1812">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1813">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1813">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1814">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1814">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1815">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1815">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1816">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1816">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1817">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1817">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1818">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1818">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1819">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1819">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1820">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1820">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1821">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1821">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1822">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1822">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1823">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1824">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1824">Required.</span>
          </span>
          <span data-ttu-id="00be5-1825">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1825">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1826">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1826">Required.</span>
          </span>
          <span data-ttu-id="00be5-1827">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1827">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1828">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1828">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1829">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1829">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="00be5-1830">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1830">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1831">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1831">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="00be5-1832">문자열에 대한 2바이트의 문자열 길이 설명자를 파일에 쓸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1832">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="00be5-1833">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1833">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1834">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1834">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1835">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1835">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1836">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1836">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1837">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1837">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1838">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1838">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1839">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1839">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1840">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1840">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1841">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1841">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1842">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1842">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1843">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1843">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1844">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1844">Random Mode</span></span>  
 <span data-ttu-id="00be5-1845">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1845">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1846">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1846">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1847">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1847">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1848">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1848">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1849">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1849">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1850">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1850">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1851">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1851">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1852">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1852">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1853">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1853">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1854">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1855">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1855">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1856">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1856">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1857">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1857">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1858">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1858">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1859">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1859">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1860">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1860">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1861">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1861">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1862">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1862">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1863">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1864">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1865">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1865">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1866">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1867">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1867">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1868">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1868">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1869">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1869">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1870">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1870">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1871">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1871">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1872">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1872">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1873">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1873">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1874">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1874">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1875">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1875">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1876">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1876">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1877">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1877">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1878">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1878">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1879">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1879">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1880">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1880">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1881">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1881">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1882">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1882">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1883">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1883">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1884">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1884">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1885">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1885">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1886">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1886">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1887">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1887">Required.</span>
          </span>
          <span data-ttu-id="00be5-1888">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1888">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1889">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1889">Required.</span>
          </span>
          <span data-ttu-id="00be5-1890">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1890">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1891">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1891">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1892">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1892">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="00be5-1893">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1893">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1894">배열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1894">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="00be5-1895">배열을 동적으로 처리할 것인지의 여부와 길이를 설명하는 문자열에 대한 배열 설명자를 쓸 것인지의 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1895">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="00be5-1896">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1896">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1897">문자열을 쓰는 경우에만 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="00be5-1898">문자열에 대한 2바이트의 문자열 길이 설명자를 파일에 쓸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1898">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="00be5-1899">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1900">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1900">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1901">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="00be5-1902">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1903">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1903">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1904">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1904">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="00be5-1905">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1906">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1906">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="00be5-1907">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1907">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1908">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1908">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1909">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1909">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1910">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1910">Random Mode</span></span>  
 <span data-ttu-id="00be5-1911">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1911">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1912">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1912">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1913">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1913">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1914">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1914">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1915">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1915">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1916">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1916">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="00be5-1917">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1917">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="00be5-1918">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1918">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1919">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1919">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1920">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1920">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1921">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1921">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1922">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1923">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1923">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1924">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1924">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="00be5-1925">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1925">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="00be5-1926">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1926">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="00be5-1927">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1927">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="00be5-1928">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1928">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="00be5-1929">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1930">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="00be5-1931">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1932">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="00be5-1933">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1933">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="00be5-1934">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="00be5-1935">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1935">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="00be5-1936">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="00be5-1937">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="00be5-1937">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1938">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1938">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1939">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1939">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="00be5-1940">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="00be5-1940">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="00be5-1941">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1941">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1942">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1942">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="00be5-1943">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1943">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="00be5-1944">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1944">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="00be5-1945">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1945">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="00be5-1946">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1946">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="00be5-1947">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1947">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="00be5-1948">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1948">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1949">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1949">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="00be5-1950">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1950">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-1951">
            <paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1951">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-1952">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1953">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1953">Required.</span>
          </span>
          <span data-ttu-id="00be5-1954">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-1955">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1955">Required.</span>
          </span>
          <span data-ttu-id="00be5-1956">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="00be5-1957">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1957">Optional.</span>
          </span>
          <span data-ttu-id="00be5-1958">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1959">변수의 데이터를 디스크 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1959">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="00be5-1960">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePutObject" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1960">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="00be5-1961">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1961">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-1962">합니다 `FilePutObject` 함수 대신 사용 됩니다 `FilePut` 경우 컴파일할 때 모호성을 피할 수 형식 `Object` 와 같은 다른 형식 대신 전달 됩니다 `Integer`를 `Long`, `Short`등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1962">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="00be5-1963">`FilePutObject` 개체를 설명 하는 설명자를 읽고 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1963">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="00be5-1964">작성 하려는 경우는 `Variant` 형식 `FilePutObject` 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1964">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="00be5-1965">의문이 있으면 두 번째 매개 변수에 대 한 개체를 사용 하는 경우, 항상 사용 하는 권장 `FilePutObject` 고 `FileGetObject`입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1965">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="00be5-1966">`FilePutObject` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1966">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-1967">`FilePutObject`로 작성된 데이터는 일반적으로 `FileGetObject`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1967">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="00be5-1968">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1968">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="00be5-1969">생략 하면 `RecordNumber`, `FilePutObject` 마지막 뒤에 다음 레코드 또는 바이트를 씁니다 `FileGetObject` 하거나 `FilePutObject` 함수 (마지막 가리키는 레코드 또는 바이트 또는 `Seek` 함수).</span><span class="sxs-lookup"><span data-stu-id="00be5-1969">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="00be5-1970">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1970">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="00be5-1971">`FilePutObject` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1971">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="00be5-1972">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePutObject`를 사용 하 여 동일한 작업을 수행 해야 `FileGetObject`, 예상 길이 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1972">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="00be5-1973">임의 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1973">Random Mode</span></span>  
 <span data-ttu-id="00be5-1974">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1974">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="00be5-1975">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePutObject` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1975">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="00be5-1976">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1976">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="00be5-1977">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1977">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="00be5-1978">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1978">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="00be5-1979">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePutObject` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1979">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="00be5-1980">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePutObject` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1980">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="00be5-1981">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1981">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="00be5-1982">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePutObject` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1982">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="00be5-1983">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1983">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="00be5-1984">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1984">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="00be5-1985">경우 변수를 쓰는 배열에서 지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1985">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="00be5-1986">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1986">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="00be5-1987">길이 2 + 8 시간 차원 수가: (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="00be5-1987">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="00be5-1988">이진 모드</span><span class="sxs-lookup"><span data-stu-id="00be5-1988">Binary Mode</span></span>  
 <span data-ttu-id="00be5-1989">파일에서 열에 대 한 `Binary` 모드에서는 모든를 `Random` 모드 규칙 적용을 제외 하 고:</span><span class="sxs-lookup"><span data-stu-id="00be5-1989">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="00be5-1990">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1990">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="00be5-1991">`FilePutObject` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1991">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-1992">이 예제에서는 `FilePutObject` 함수 파일에 쓸 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-1992">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-1993">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1993">Required.</span>
          </span>
          <span data-ttu-id="00be5-1994">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1994">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="00be5-1995">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1995">Required.</span>
          </span>
          <span data-ttu-id="00be5-1996">0에서 255 사이의 숫자 식으로 새 줄이 시작되기 전에 줄에 표시되는 문자의 수를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1996">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="00be5-1997">
            <c>RecordWidth</c>가 0이면 줄 길이에 제한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1997">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="00be5-1998">
            <c>RecordWidth</c>의 기본값은 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1998">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-1999">
            <see langword="FileOpen" /> 함수를 사용하여 연 파일에 출력 줄 너비를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-1999">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="00be5-2000">이 예제에서는 `FileWidth` 파일에 대 한 출력 줄 너비를 설정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2000">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2001">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2001">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2002">
            <see langword="Integer" /> 함수에서 사용할 수 있는 다음 파일 번호를 나타내는 <see langword="FileOpen" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2003">
            <see langword="Integer" /> 함수에서 사용할 수 있는 다음 파일 번호를 나타내는 <see langword="FileOpen" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2003">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2004">사용 하 여 `FreeFile` 이미 사용 되지 않는 파일 번호를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2004">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2005">이 예제에서는 `FreeFile` 다음 사용 가능한 파일 수를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2005">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="00be5-2006">루프 내에서 출력에 대 한 5 개의 파일이 열리고 몇 가지 샘플 데이터는 각각에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2006">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2007">사용 중인 파일 수가 255개를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2007">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="00be5-2008">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2008">Required.</span>
          </span>
          <span data-ttu-id="00be5-2009">파일, 디렉터리 또는 폴더 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2009">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="00be5-2010">
            <c>PathName</c>에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2010">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2011">파일, 디렉터리 또는 폴더의 특성을 나타내는 <see langword="FileAttribute" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2011">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="00be5-2012">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileAttribute" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="00be5-2013">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2014">
            <see langword="GetAttr" /> 함수에서 반환되는 값은 다음 열거형 값의 합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2014">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <span data-ttu-id="00be5-2015">
            <list type="table">
              <item>
                <term> 값  </term>
                <description> 상수  </description>
                <description> 설명  </description>
              </item>
              <item>
                <term>
                  <see langword="Normal" />
                </term>
                <description>
                  <see langword="vbNormal" />
                </description>
                <description> 기본입니다.  </description>
              </item>
              <item>
                <term>
                  <see langword="ReadOnly" />
                </term>
                <description>
                  <see langword="vbReadOnly" />
                </description>
                <description> 읽기 전용입니다.  </description>
              </item>
              <item>
                <term>
                  <see langword="Hidden" />
                </term>
                <description>
                  <see langword="vbHidden" />
                </description>
                <description> 숨겨져 있습니다.  </description>
              </item>
              <item>
                <term>
                  <see langword="System" />
                </term>
                <description>
                  <see langword="vbSystem" />
                </description>
                <description> 시스템 파일입니다.  </description>
              </item>
              <item>
                <term>
                  <see langword="Directory" />
                </term>
                <description>
                  <see langword="vbDirectory" />
                </description>
                <description> 디렉터리 또는 폴더입니다.  </description>
              </item>
              <item>
                <term>
                  <see langword="Archive" />
                </term>
                <description>
                  <see langword="vbArchive" />
                </description>
                <description> 마지막 백업 이후에 파일이 변경되었습니다.  </description>
              </item>
              <item>
                <term>
                  <see langword="Alias" />
                </term>
                <description>
                  <see langword="vbAlias" />
                </description>
                <description> 파일에 다른 이름이 있습니다.  </description>
              </item>
            </list>
            <block subset="none" type="note">
              <para> 이러한 열거형은 Visual Basic 언어로 지정되며 코드의 모든 위치에서 실제 값 대신 사용될 수 있습니다.  </para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2015">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Constant  </description>
                  <description> Description  </description>
                </item>
                <item>
                  <term>
                    <see langword="Normal" />
                  </term>
                  <description>
                    <see langword="vbNormal" />
                  </description>
                  <description> Normal.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ReadOnly" />
                  </term>
                  <description>
                    <see langword="vbReadOnly" />
                  </description>
                  <description> Read-only.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Hidden" />
                  </term>
                  <description>
                    <see langword="vbHidden" />
                  </description>
                  <description> Hidden.  </description>
                </item>
                <item>
                  <term>
                    <see langword="System" />
                  </term>
                  <description>
                    <see langword="vbSystem" />
                  </description>
                  <description> System file.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Directory" />
                  </term>
                  <description>
                    <see langword="vbDirectory" />
                  </description>
                  <description> Directory or folder.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Archive" />
                  </term>
                  <description>
                    <see langword="vbArchive" />
                  </description>
                  <description> File has changed since last backup.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Alias" />
                  </term>
                  <description>
                    <see langword="vbAlias" />
                  </description>
                  <description> File has a different name.  </description>
                </item>
              </list>
              <block subset="none" type="note">
                <para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para>
              </block>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2016">설정 된 특성을 확인 하려면 사용 합니다 `And` 반환한 값의 비트 비교를 수행 하는 연산자를 `GetAttr` 함수 및 개별 파일 특성의 값.</span><span class="sxs-lookup"><span data-stu-id="00be5-2016">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="00be5-2017">결과 0이 없는 경우 해당 특성은 명명된 된 파일에 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2017">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="00be5-2018">예를 들어, 다음의 반환 값 `And` 식은 0 인 경우에는 `Archive` 특성이 설정 되지 않은:</span><span class="sxs-lookup"><span data-stu-id="00be5-2018">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="00be5-2019">0이 아닌 값을 반환 합니다 `Archive` 특성이 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2019">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2020">이 예제에서는 `GetAttr` 파일 및 디렉터리 또는 폴더의 특성을 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2020">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2021">
            <paramref name="Pathname" />이 잘못되었거나 와일드카드를 포함하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2021">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-2022">대상 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2022">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2023">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2023">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2024">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2024">Required.</span>
          </span>
          <span data-ttu-id="00be5-2025">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2025">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2026">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2026">Required.</span>
          </span>
          <span data-ttu-id="00be5-2027">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2027">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2028">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2028">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2029">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2029">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2030">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2030">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2031">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2031">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2032">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2032">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2033">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2033">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2034">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2034">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2035">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2035">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2036">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2036">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2037">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2037">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2038">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2038">Data</span></span>|<span data-ttu-id="00be5-2039">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2039">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2040">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2040">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2041">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2041">Empty</span></span>|  
|<span data-ttu-id="00be5-2042">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2042">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2043"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2043">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2044">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2044">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2045">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2045">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2046">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2046">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2047">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2047">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2048">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2048">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2049">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2049">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2050">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2050">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2051">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2051">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2052">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2052">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2053">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2053">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2054">이 예에서는 가정 `TestFile` 파일을 사용 하 여 기록 된 데이터의 일부 줄은는 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2054">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2055">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2055">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2056">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2056">Required.</span>
          </span>
          <span data-ttu-id="00be5-2057">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2057">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2058">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2058">Required.</span>
          </span>
          <span data-ttu-id="00be5-2059">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2059">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2060">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2060">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2061">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2061">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2062">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2062">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2063">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2063">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2064">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2064">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2065">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2065">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2066">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2066">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2067">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2067">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2068">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2068">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2069">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2069">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2070">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2070">Data</span></span>|<span data-ttu-id="00be5-2071">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2071">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2072">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2072">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2073">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2073">Empty</span></span>|  
|<span data-ttu-id="00be5-2074">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2074">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2075"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2075">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2076">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2076">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2077">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2077">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2078">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2078">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2079">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2079">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2080">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2080">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2081">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2081">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2082">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2082">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2083">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2083">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2084">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2084">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2085">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2085">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2086">이 예에서는 가정 `TestFile` 파일을 사용 하 여 기록 된 데이터의 일부 줄은는 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2086">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2087">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2087">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2088">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2088">Required.</span>
          </span>
          <span data-ttu-id="00be5-2089">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2089">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2090">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2090">Required.</span>
          </span>
          <span data-ttu-id="00be5-2091">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2091">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2092">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2092">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2093">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2093">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2094">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2094">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2095">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2095">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2096">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2096">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2097">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2097">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2098">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2098">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2099">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2099">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2100">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2100">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2101">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2101">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2102">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2102">Data</span></span>|<span data-ttu-id="00be5-2103">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2103">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2104">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2104">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2105">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2105">Empty</span></span>|  
|<span data-ttu-id="00be5-2106">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2106">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2107"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2107">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2108">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2108">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2109">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2109">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2110">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2110">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2111">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2111">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2112">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2112">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2113">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2113">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2114">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2114">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2115">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2115">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2116">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2116">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2117">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2117">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2118">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2118">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2119">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2119">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2120">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2120">Required.</span>
          </span>
          <span data-ttu-id="00be5-2121">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2121">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2122">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2122">Required.</span>
          </span>
          <span data-ttu-id="00be5-2123">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2123">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2124">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2124">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2125">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2125">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2126">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2126">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2127">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2127">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2128">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2128">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2129">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2129">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2130">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2130">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2131">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2131">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2132">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2132">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2133">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2133">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2134">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2134">Data</span></span>|<span data-ttu-id="00be5-2135">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2135">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2136">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2136">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2137">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2137">Empty</span></span>|  
|<span data-ttu-id="00be5-2138">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2138">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2139"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2139">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2140">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2140">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2141">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2141">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2142">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2142">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2143">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2143">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2144">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2144">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2145">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2145">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2146">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2146">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2147">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2147">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2148">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2148">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2149">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2149">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2150">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2150">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2151">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2151">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2152">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2152">Required.</span>
          </span>
          <span data-ttu-id="00be5-2153">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2153">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2154">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2154">Required.</span>
          </span>
          <span data-ttu-id="00be5-2155">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2155">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2156">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2156">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2157">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2157">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2158">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2158">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2159">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2159">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2160">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2160">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2161">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2161">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2162">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2162">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2163">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2163">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2164">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2164">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2165">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2165">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2166">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2166">Data</span></span>|<span data-ttu-id="00be5-2167">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2167">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2168">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2168">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2169">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2169">Empty</span></span>|  
|<span data-ttu-id="00be5-2170">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2170">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2171"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2171">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2172">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2172">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2173">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2173">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2174">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2174">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2175">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2175">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2176">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2176">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2177">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2177">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2178">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2178">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2179">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2179">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2180">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2180">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2181">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2181">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2182">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2182">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2183">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2183">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2184">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2184">Required.</span>
          </span>
          <span data-ttu-id="00be5-2185">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2185">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2186">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2186">Required.</span>
          </span>
          <span data-ttu-id="00be5-2187">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2187">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2188">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2188">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2189">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2189">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2190">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2190">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2191">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2191">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2192">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2192">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2193">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2193">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2194">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2194">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2195">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2195">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2196">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2196">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2197">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2197">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2198">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2198">Data</span></span>|<span data-ttu-id="00be5-2199">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2199">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2200">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2200">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2201">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2201">Empty</span></span>|  
|<span data-ttu-id="00be5-2202">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2202">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2203"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2203">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2204">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2204">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2205">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2205">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2206">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2206">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2207">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2207">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2208">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2208">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2209">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2209">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2210">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2210">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2211">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2211">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2212">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2212">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2213">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2213">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2214">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2214">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2215">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2215">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2216">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2216">Required.</span>
          </span>
          <span data-ttu-id="00be5-2217">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2217">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2218">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2218">Required.</span>
          </span>
          <span data-ttu-id="00be5-2219">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2219">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2220">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2220">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2221">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2221">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2222">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2222">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2223">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2223">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2224">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2224">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2225">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2225">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2226">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2226">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2227">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2227">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2228">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2228">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2229">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2229">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2230">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2230">Data</span></span>|<span data-ttu-id="00be5-2231">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2231">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2232">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2232">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2233">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2233">Empty</span></span>|  
|<span data-ttu-id="00be5-2234">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2234">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2235"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2235">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2236">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2236">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2237">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2237">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2238">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2238">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2239">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2239">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2240">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2240">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2241">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2241">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2242">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2242">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2243">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2243">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2244">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2244">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2245">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2245">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2246">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2246">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2247">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2247">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2248">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2248">Required.</span>
          </span>
          <span data-ttu-id="00be5-2249">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2249">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2250">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2250">Required.</span>
          </span>
          <span data-ttu-id="00be5-2251">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2251">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2252">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2252">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2253">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2253">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2254">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2254">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2255">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2255">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2256">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2256">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2257">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2257">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2258">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2258">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2259">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2259">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2260">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2260">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2261">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2261">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2262">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2262">Data</span></span>|<span data-ttu-id="00be5-2263">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2263">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2264">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2264">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2265">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2265">Empty</span></span>|  
|<span data-ttu-id="00be5-2266">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2266">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2267"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2267">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2268">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2268">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2269">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2269">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2270">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2270">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2271">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2271">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2272">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2272">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2273">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2273">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2274">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2274">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2275">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2275">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2276">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2276">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2277">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2277">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2278">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2278">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2279">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2279">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2280">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2280">Required.</span>
          </span>
          <span data-ttu-id="00be5-2281">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2281">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2282">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2282">Required.</span>
          </span>
          <span data-ttu-id="00be5-2283">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2283">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2284">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2284">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2285">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2285">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2286">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2286">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2287">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2287">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2288">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2288">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2289">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2289">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2290">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2290">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2291">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2291">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2292">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2292">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2293">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2293">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2294">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2294">Data</span></span>|<span data-ttu-id="00be5-2295">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2295">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2296">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2296">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2297">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2297">Empty</span></span>|  
|<span data-ttu-id="00be5-2298">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2298">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2299"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2299">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2300">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2300">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2301">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2301">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2302">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2302">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2303">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2303">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2304">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2304">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2305">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2305">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2306">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2306">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2307">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2307">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2308">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2308">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2309">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2309">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2310">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2310">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2311">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2311">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2312">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2312">Required.</span>
          </span>
          <span data-ttu-id="00be5-2313">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2313">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2314">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2314">Required.</span>
          </span>
          <span data-ttu-id="00be5-2315">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2315">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2316">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2316">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2317">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2317">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2318">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2318">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2319">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2319">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2320">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2320">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2321">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2321">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2322">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2322">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2323">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2323">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2324">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2324">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2325">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2325">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2326">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2326">Data</span></span>|<span data-ttu-id="00be5-2327">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2327">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2328">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2328">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2329">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2329">Empty</span></span>|  
|<span data-ttu-id="00be5-2330">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2330">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2331"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2331">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2332">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2332">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2333">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2333">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2334">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2334">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2335">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2335">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2336">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2336">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2337">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2337">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2338">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2338">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2339">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2339">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2340">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2340">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2341">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2341">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2342">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2342">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2343">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2343">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2344">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2344">Required.</span>
          </span>
          <span data-ttu-id="00be5-2345">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2345">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2346">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2346">Required.</span>
          </span>
          <span data-ttu-id="00be5-2347">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2347">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2348">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2348">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2349">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2349">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2350">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2350">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2351">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2351">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2352">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2352">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2353">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2353">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2354">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2354">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2355">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2355">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2356">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2356">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2357">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2357">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2358">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2358">Data</span></span>|<span data-ttu-id="00be5-2359">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2359">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2360">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2360">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2361">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2361">Empty</span></span>|  
|<span data-ttu-id="00be5-2362">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2362">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2363"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2363">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2364">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2364">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2365">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2365">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2366">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2366">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2367">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2367">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2368">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2368">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2369">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2369">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2370">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2370">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2371">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2371">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2372">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2372">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2373">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2373">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2374">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2374">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2375">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2375">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2376">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2376">Required.</span>
          </span>
          <span data-ttu-id="00be5-2377">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2377">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="00be5-2378">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2378">Required.</span>
          </span>
          <span data-ttu-id="00be5-2379">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2379">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2380">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2380">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2381">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2381">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2382">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2382">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2383">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2383">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2384">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2384">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="00be5-2385">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2385">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2386">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2386">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2387">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2387">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="00be5-2388">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2388">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="00be5-2389">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2389">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="00be5-2390">데이터</span><span class="sxs-lookup"><span data-stu-id="00be5-2390">Data</span></span>|<span data-ttu-id="00be5-2391">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2391">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="00be5-2392">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="00be5-2392">Delimiting comma or blank line</span></span>|<span data-ttu-id="00be5-2393">Empty</span><span class="sxs-lookup"><span data-stu-id="00be5-2393">Empty</span></span>|  
|<span data-ttu-id="00be5-2394">#NULL#</span><span class="sxs-lookup"><span data-stu-id="00be5-2394">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="00be5-2395"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="00be5-2395">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="00be5-2396">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="00be5-2396">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="00be5-2397">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="00be5-2397">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="00be5-2398">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="00be5-2398">#ERROR `errornumber`#</span></span>|<span data-ttu-id="00be5-2399">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="00be5-2399">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="00be5-2400">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2400">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2401">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2401">The `Input` function is not localized.</span></span> <span data-ttu-id="00be5-2402">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2402">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2403">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2403">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2404">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00be5-2404">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2405">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2405">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="00be5-2406">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="00be5-2406">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2407">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2408">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2408">Required.</span>
          </span>
          <span data-ttu-id="00be5-2409">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2409">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="00be5-2410">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2410">Required.</span>
          </span>
          <span data-ttu-id="00be5-2411">읽을 문자의 수를 지정하는 임의의 유효한 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2411">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2412">
            <see langword="String" /> 또는 <see langword="Input" /> 모드로 연 파일의 문자가 포함된 <see langword="Binary" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2412">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="00be5-2413">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="InputString" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2413">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="00be5-2414">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2414">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2415">
            <see langword="String" /> 또는 <see langword="Input" /> 모드로 연 파일의 문자가 포함된 <see langword="Binary" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2415">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="00be5-2416">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="InputString" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2417">`InputString` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2417">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2418">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2418">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2419">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2419">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2420">읽을 데이터를 `InputString` 함수는 일반적으로 사용 하 여 파일에 기록 됩니다 `Print` 또는 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2420">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="00be5-2421">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2421">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="00be5-2422">달리 합니다 `Input` 함수는 `InputString` 읽은 모든 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2422">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="00be5-2423">쉼표, 캐리지 리턴, 줄 바꿈, 인용 부호 및 선행 공백을 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2423">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="00be5-2424">열려 있는 파일을 사용 하 여 `Binary` 에 액세스를 사용 하 여 파일을 통해 읽으려는 시도가 합니다 `InputString` 까지 함수 `EOF` 반환 `True` 오류를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2424">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="00be5-2425">사용 하 여는 `LOF` 및 `Loc` 대신 함수 `EOF` 사용 하 여 이진 파일을 읽을 때 `InputString`, 사용할지 `FileGet` 사용 하는 경우는 `EOF` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2425">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2426">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 보안 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2426">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="00be5-2427">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2427">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2428">이 예제에서는 합니다 `InputString` 파일에서 한 번에 하나의 문자를 읽고 인쇄 하는 함수는 `Output` 창입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2428">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="00be5-2429">이 예에서는 가정 `MyFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2429">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2430">
            <paramref name="FileNumber" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2430">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-2431">
            <paramref name="CharCount" /> &lt; 0 또는 &gt; 214입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2431">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="00be5-2432">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2432">Required.</span>
          </span>
          <span data-ttu-id="00be5-2433">삭제할 하나 이상의 파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2433">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="00be5-2434">
            <c>PathName</c>에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2434">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2435">디스크에서 파일을 삭제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2435">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="00be5-2436">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Kill" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2436">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="00be5-2437">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2437">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2438">`Kill` 여러 문자 사용을 지원 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2438">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="00be5-2439">**보안 정보** 를 실행 하려면 합니다 `Kill` 함수에는 필요 `Read` 및 `PathDiscovery` 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여 될 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2439">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="00be5-2440">자세한 내용은 <xref:System.Security.SecurityException> [코드 액세스 권한](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="00be5-2440">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2441">이 예제에서는 `Kill` 디스크에서 파일을 삭제 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2441">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2442">대상 파일이 열려 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2442">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-2443">대상 파일을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2443">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="00be5-2444">사용 권한이 거부되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2444">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2445">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2445">Required.</span>
          </span>
          <span data-ttu-id="00be5-2446">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2446">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2447">열려 있는 순차 파일에서 한 줄을 읽은 다음 <see langword="String" /> 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2447">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2448">열려 있는 순차 파일에서 한 줄을 읽은 다음 <see langword="String" /> 변수에 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2448">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2449">`LineInput` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2449">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2450">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2450">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2451">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2451">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2452">데이터를 읽을 `LineInput` 일반적으로 사용 하 여 파일에 기록 됩니다 `Print`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2452">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2453">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2453">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="00be5-2454">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2454">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="00be5-2455">합니다 `LineInput` 캐리지 리턴를 발견할 때까지 한 번에 파일 하나 문자에서 함수를 읽습니다 (`Chr(13)`) 또는 캐리지 리턴/줄 바꿈 (`Chr(13) + Chr(10)`) 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2455">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="00be5-2456">캐리지 리턴/줄 바꿈된 시퀀스 문자 문자열에 추가 하는 대신 생략 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2456">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2457">사용 하 여 파일에서 읽기를 `LineInput` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2457">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2458">이 예제에서는 `LineInput` 함수 순차 파일에서 줄을 읽고 변수에 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2458">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="00be5-2459">이 예에서는 가정 `TestFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2459">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="00be5-2460">파일의 끝에 도달했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2460">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2461">
            <paramref name="FileNumber" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2461">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2462">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2462">Required.</span>
          </span>
          <span data-ttu-id="00be5-2463">임의의 유효한 <see langword="Integer" /> 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2463">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2464">열려 있는 파일에서 현재의 읽기/쓰기 위치를 지정하는 <see langword="Long" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2464">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2465">열려 있는 파일에서 현재의 읽기/쓰기 위치를 지정하는 <see langword="Long" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2465">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2466">`Loc` 함수는 0, 0을 반환 하는 사용 하 여 파일의 첫 번째 바이트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2466">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="00be5-2467">`Loc` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2467">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2468">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2468">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2469">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2469">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2470">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2470">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="00be5-2471">모드</span><span class="sxs-lookup"><span data-stu-id="00be5-2471">Mode</span></span>|<span data-ttu-id="00be5-2472">반환 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2472">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="00be5-2473">읽거나 파일에 쓴 마지막 레코드의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2473">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="00be5-2474">128로 구분 된 파일로 현재 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2474">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="00be5-2475">그러나 정보를 반환할 `Loc` 순차 파일 사용 아니고 필요에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2475">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="00be5-2476">마지막 바이트를 읽거나 쓸 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2476">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2477">이 예제에서는 `Loc` 열려 있는 파일에서 현재 읽기/쓰기 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2477">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="00be5-2478">이 예에서는 가정 `MyFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2478">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2479">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2479">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2480">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2480">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2481">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2481">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2482">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2482">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2483">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2483">Required.</span>
          </span>
          <span data-ttu-id="00be5-2484">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2484">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2485">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2485">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2486">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2486">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2487">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2487">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2488">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2488">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="00be5-2489">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2489">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="00be5-2490">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2490">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="00be5-2491">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2491">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="00be5-2492">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2492">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="00be5-2493">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2493">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2494">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2494">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="00be5-2495">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2495">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2496">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2496">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2497">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2497">Required.</span>
          </span>
          <span data-ttu-id="00be5-2498">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2498">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="00be5-2499">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2499">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2500">잠그거나 잠금을 해제할 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2500">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2501">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2501">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2502">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2502">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2503">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2503">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2504">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2504">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="00be5-2505">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2505">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="00be5-2506">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2506">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="00be5-2507">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2507">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="00be5-2508">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2508">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="00be5-2509">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2509">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2510">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2510">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="00be5-2511">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2511">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2512">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2512">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2513">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2513">Required.</span>
          </span>
          <span data-ttu-id="00be5-2514">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2514">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="00be5-2515">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2515">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2516">잠그거나 잠금을 해제할 첫째 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2516">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="00be5-2517">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2517">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2518">잠그거나 잠금을 해제할 마지막 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2518">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2519">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2519">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2520">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2520">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2521">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2521">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2522">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2522">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="00be5-2523">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2523">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="00be5-2524">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2524">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="00be5-2525">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2525">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="00be5-2526">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2526">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="00be5-2527">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2527">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2528">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2528">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="00be5-2529">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2529">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2530">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2530">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2531">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2531">Required.</span>
          </span>
          <span data-ttu-id="00be5-2532">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2532">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2533">
            <see langword="Long" /> 함수를 사용하여 연 파일의 크기(바이트)를 나타내는 <see langword="FileOpen" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2533">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2534">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="LOF" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2534">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="00be5-2535">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2535">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2536">
            <see langword="Long" /> 함수를 사용하여 연 파일의 크기(바이트)를 나타내는 <see langword="FileOpen" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2536">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2537">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="LOF" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2538">사용 된 `FileLen` 열려 있지 않은 파일의 길이를 가져오는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2538">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2539">이 예제에서는 `LOF` 열려 있는 파일의 크기를 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2539">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="00be5-2540">이 예에서는 가정 `TestFile` 은 샘플 데이터가 포함 된 텍스트 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2540">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2541">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2541">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="00be5-2542">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2542">Required.</span>
          </span>
          <span data-ttu-id="00be5-2543">만들어질 디렉터리를 식별하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2543">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="00be5-2544">
            <c>Path</c>에는 드라이브가 포함될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2544">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="00be5-2545">드라이브를 지정하지 않은 경우 <see langword="MkDir" />을 사용하면 현재 드라이브에서 새 디렉터리를 만들 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2545">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2546">새 디렉터리를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2546">Creates a new directory.</span>
          </span>
          <span data-ttu-id="00be5-2547">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="MkDir" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2547">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="00be5-2548">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2548">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2549">이 함수는 새 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2549">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2550">이 예제에서는 `MkDir` 함수 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2550">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="00be5-2551">드라이브를 지정 하지 않으면 현재 드라이브에서 새 디렉터리가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2551">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-2552">
            <paramref name="Path" />가 지정되지 않았거나 비어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2552">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="00be5-2553">사용 권한이 거부되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2553">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2554">디렉터리가 이미 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2554">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2555">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2555">Required.</span>
          </span>
          <span data-ttu-id="00be5-2556">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2556">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="00be5-2557">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2557">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2558">파일에 쓸 쉼표로 구분된 0개 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2558">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="00be5-2559">
            <c>Output</c> 인수 설정은 다음과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2559">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="00be5-2560">
            <see langword="T:System.IO.IOException" />: 파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2560">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="00be5-2561">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c>가 존재하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2561">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2562">표시 형식 데이터를 순차 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2562">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2563">합니다 `Print` 및 `PrintLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2563">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2564">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2564">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2565">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2565">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2566">`Print` 줄 바꿈으로 줄의 끝에 포함 되지 않습니다. 그러나 `PrintLine` 줄 바꿈에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2566">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="00be5-2567">사용 하 여 기록 된 데이터 `Print` 를 사용 하 여 일반적으로 파일에서 읽은 `LineInput` 또는 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2567">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="00be5-2568">생략 하면 `Output` 에 대 한 `PrintLine`에 빈 줄이 파일에 출력 `Print`, 아무것도 출력 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2568">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="00be5-2569">쉼표로 구분 된 여러 개의 식을 혼합 쉼표 탭 경계에 정렬 됩니다 및 `TAB` 일관 되지 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2569">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="00be5-2570">에 대 한 `Boolean` 데이터를 `True` 또는 `False` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2570">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="00be5-2571">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2571">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="00be5-2572">날짜 데이터는 시스템에서 인식 표준 짧은 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2572">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="00be5-2573">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2573">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="00be5-2574">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2574">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="00be5-2575">그러나 경우 `Output` 목록 데이터가 `DBNull`, `Null` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2575">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="00be5-2576">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `Error errorcode`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2576">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="00be5-2577">`Error` 키워드 로캘에 관계 없이 변환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2577">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="00be5-2578">사용 하 여 파일에 쓴 모든 데이터 `Print` 국제적으로 인식 합니다; 즉, 데이터 형식이 올바로 적절 한 소수 구분 기호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2578">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="00be5-2579">사용자가 여러 로캘에서 사용에 대 한 데이터를 출력 하려는 경우 `Write` 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2579">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="00be5-2580">사용 하 여 파일에 쓸 합니다 `Print` 또는 `PrintLine` 함수에 필요 `Write` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2580">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2581">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="00be5-2581">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2582">이 예제에서는 합니다 `Print` 및 `PrintLine` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2582">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2583">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2583">Required.</span>
          </span>
          <span data-ttu-id="00be5-2584">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2584">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="00be5-2585">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2585">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2586">파일에 쓸 쉼표로 구분된 0개 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2586">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="00be5-2587">
            <c>Output</c> 인수 설정은 다음과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2587">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="00be5-2588">
            <see langword="T:System.IO.IOException" />: 파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2588">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="00be5-2589">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c>가 존재하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2589">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2590">표시 형식 데이터를 순차 파일에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2590">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2591">합니다 `Print` 및 `PrintLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2591">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2592">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2592">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2593">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2593">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2594">`Print` 줄 바꿈으로 줄의 끝에 포함 되지 않습니다. 그러나`PrintLine` 줄 바꿈에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2594">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="00be5-2595">사용 하 여 기록 된 데이터 `Print` 를 사용 하 여 일반적으로 파일에서 읽은 `LineInput` 또는 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2595">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="00be5-2596">생략 하면 `Output` 에 대 한 `PrintLine`에 빈 줄이 파일에 출력 `Print`, 아무것도 출력 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2596">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="00be5-2597">쉼표로 구분 된 여러 개의 식을 혼합 쉼표 탭 경계에 정렬 됩니다 및 `TAB` 일관 되지 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2597">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="00be5-2598">에 대 한 `Boolean` 데이터를 `True` 또는 `False` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2598">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="00be5-2599">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2599">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="00be5-2600">날짜 데이터는 시스템에서 인식 표준 짧은 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2600">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="00be5-2601">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2601">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="00be5-2602">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2602">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="00be5-2603">그러나 경우 `Output` 목록 데이터가 `DBNull`, `Null` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2603">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="00be5-2604">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `Error errorcode`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2604">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="00be5-2605">`Error` 키워드 로캘에 관계 없이 변환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2605">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="00be5-2606">사용 하 여 파일에 쓴 모든 데이터 `Print` 국제적으로 인식 합니다; 즉, 데이터 형식이 올바로 적절 한 소수 구분 기호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2606">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="00be5-2607">사용자가 여러 로캘에서 사용에 대 한 데이터를 출력 하려는 경우 `Write` 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2607">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="00be5-2608">사용 하 여 파일에 쓸 합니다 `Print` 또는 `PrintLine` 함수에 필요 `Write` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2608">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2609">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="00be5-2609">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2610">이 예제에서는 합니다 `Print` 및 `PrintLine` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2610">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="00be5-2611">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2611">Required.</span>
          </span>
          <span data-ttu-id="00be5-2612">기존 파일 이름과 위치를 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2612">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="00be5-2613">
            <c>OldPath</c>에는 파일의 디렉터리와 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2613">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="00be5-2614">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2614">Required.</span>
          </span>
          <span data-ttu-id="00be5-2615">새 파일 이름과 위치를 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2615">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="00be5-2616">
            <c>NewPath</c>에는 대상 위치의 디렉터리와 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2616">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="00be5-2617">
            <c>NewPath</c>에는 이미 있는 파일 이름을 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2617">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2618">디스크 파일 또는 디렉터리의 이름을 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2618">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="00be5-2619">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Rename" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="00be5-2620">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2621">`Rename` 함수 파일 이름을 바꿉니다 하 고 필요한 경우 다른 디렉터리로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2621">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="00be5-2622">`Rename` 함수 드라이브 간에 파일을 이동할 수 있지만 기존 디렉터리만 이름을 바꿀 수 때 둘 다 `NewPath` 및 `OldPath` 동일한 드라이브에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2622">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="00be5-2623">`Rename` 새 파일 또는 디렉터리를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2623">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="00be5-2624">사용 하는 `Rename` 열린 파일에 대 한 함수에서 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2624">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="00be5-2625">이름을 바꾸기 전에 열려 있는 파일을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2625">You must close an open file before renaming it.</span></span> <span data-ttu-id="00be5-2626">`Rename` 인수가 여러 문자 (\*) 및 단일 (?) 문자 와일드 카드를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2626">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00be5-2627">사용 하는 경우 `Rename` 복사할 파일을 보호 되지 않은 위치에서 보호 되는 위치를 파일에 덜 제한적인된 권한을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2627">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="00be5-2628">보안상 위험을 소개 하지는 않았는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2628">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2629">이 예제에서는 `Rename` 함수 파일 이름을 바꾸려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2629">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="00be5-2630">이 예제에서는 이미 지정 된 디렉터리가 존재 하는지 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2630">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-2631">경로가 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2631">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-2632">
            <paramref name="OldPath" /> 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2632">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2633">다른 장치로 이름을 바꿀 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2633">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2634">
            <see langword="FileOpen" /> 함수를 사용하여 연 디스크 파일을 모두 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2634">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2635">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Reset" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2635">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="00be5-2636">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2636">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2637">합니다 `Reset` 함수에 의해 열린 모든 활성 파일을 닫습니다 합니다 `FileOpen` 함수 및 동일한 기능 `FileClose()` 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2637">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2638">이 예제에서는 `Reset` 함수를 열려 있는 모든 파일을 닫고 모든 파일 버퍼의 내용을 디스크에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2638">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="00be5-2639">사용 된 `Object` 변수 `FileNumber` 문자열 및 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2639">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="00be5-2640">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2640">Required.</span>
          </span>
          <span data-ttu-id="00be5-2641">제거할 디렉터리나 폴더를 식별하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2641">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="00be5-2642">
            <c>Path</c>에는 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2642">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="00be5-2643">드라이브를 지정하지 않은 경우 <see langword="RmDir" />을 사용하면 현재 드라이브에서 디렉터리를 제거할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2643">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2644">기존 디렉터리를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2644">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="00be5-2645">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="RmDir" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2645">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="00be5-2646">자세한 내용은 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2646">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2647">사용 하려는 경우 오류가 발생 `RmDir` 파일이 포함 된 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2647">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="00be5-2648">사용 된 `Kill` 디렉터리를 제거 하기 전에 모든 파일을 삭제 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2648">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2649">이 예제에서는 `RmDir` 기존 디렉터리를 제거 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2649">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-2650">
            <paramref name="Path" />가 지정되지 않았거나 비어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2650">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2651">대상 디렉터리에 파일이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2651">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="00be5-2652">디렉터리가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2652">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2653">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2653">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2654">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="00be5-2655">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2656">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2656">Required.</span>
          </span>
          <span data-ttu-id="00be5-2657">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2657">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2658">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2658">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2659">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="00be5-2660">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2661">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2661">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2662">`Seek` 1에서 2,147,483,647 사이의 값을 반환 합니다 (2 ^31-1).</span><span class="sxs-lookup"><span data-stu-id="00be5-2662">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="00be5-2663">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2663">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="00be5-2664">모드</span><span class="sxs-lookup"><span data-stu-id="00be5-2664">Mode</span></span>|<span data-ttu-id="00be5-2665">반환 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2665">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="00be5-2666">읽거나 쓴 다음 레코드의 수</span><span class="sxs-lookup"><span data-stu-id="00be5-2666">Number of the next record read or written</span></span>|  
|<span data-ttu-id="00be5-2667">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="00be5-2667">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="00be5-2668">다음 작업이 발생 하는 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2668">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="00be5-2669">파일의 첫 번째 바이트는 위치 1, 두 번째 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2669">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2670">이 예제에서는 `Seek` 현재 파일 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2670">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="00be5-2671">이 예제에서는 가정 `TestFile` 구조체의 레코드가 포함 된 파일은 `Record`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2671">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="00be5-2672">파일에서 열에 대 한 `Random` 모드에서는 `Seek` 다음 레코드의 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2672">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="00be5-2673">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2673">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="00be5-2674">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2674">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="00be5-2675">이 예제에서는 `Seek` 다음 읽기에 대 한 위치를 설정 하거나 파일을 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2675">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="00be5-2676">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2676">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="00be5-2677">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2677">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2678">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2678">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2679">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2679">Required.</span>
          </span>
          <span data-ttu-id="00be5-2680">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2680">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="00be5-2681">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2681">Required.</span>
          </span>
          <span data-ttu-id="00be5-2682">1에서 2,147,483,647 사이의 수로, 다음 읽기/쓰기 작업이 발생할 위치를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2682">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2683">
            <see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2683">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2684">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2684">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="00be5-2685">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2685">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2686">`Seek` 1에서 2,147,483,647 사이의 값을 반환 합니다 (2 ^31-1).</span><span class="sxs-lookup"><span data-stu-id="00be5-2686">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="00be5-2687">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2687">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="00be5-2688">모드</span><span class="sxs-lookup"><span data-stu-id="00be5-2688">Mode</span></span>|<span data-ttu-id="00be5-2689">반환 값</span><span class="sxs-lookup"><span data-stu-id="00be5-2689">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="00be5-2690">읽거나 쓴 다음 레코드의 수</span><span class="sxs-lookup"><span data-stu-id="00be5-2690">Number of the next record read or written</span></span>|  
|<span data-ttu-id="00be5-2691">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="00be5-2691">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="00be5-2692">다음 작업이 발생 하는 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2692">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="00be5-2693">파일의 첫 번째 바이트는 위치 1, 두 번째 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2693">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2694">이 예제에서는 `Seek` 현재 파일 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2694">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="00be5-2695">이 예제에서는 가정 `TestFile` 구조체의 레코드가 포함 된 파일은 `Record`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2695">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="00be5-2696">파일에서 열에 대 한 `Random` 모드에서는 `Seek` 다음 레코드의 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2696">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="00be5-2697">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2697">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="00be5-2698">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2698">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="00be5-2699">이 예제에서는 `Seek` 다음 읽기에 대 한 위치를 설정 하거나 파일을 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2699">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="00be5-2700">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2700">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="00be5-2701">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2701">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2702">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2702">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="00be5-2703">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2703">Required.</span>
          </span>
          <span data-ttu-id="00be5-2704">파일 이름을 지정하는 <see langword="String" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2704">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="00be5-2705">
            <c>PathName</c>에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2705">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="00be5-2706">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2706">Required.</span>
          </span>
          <span data-ttu-id="00be5-2707">파일 특성을 지정하는 합계를 가진 상수 또는 숫자 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2707">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2708">파일의 특성 정보를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2708">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="00be5-2709">
            <see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="SetAttr" />보다 더 나은 생산성 및 성능을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2709">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="00be5-2710">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2710">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2711">열려 있는 파일의 특성을 설정 하려고 하면 런타임 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2711">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="00be5-2712">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2712">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="00be5-2713">값</span><span class="sxs-lookup"><span data-stu-id="00be5-2713">Value</span></span>|<span data-ttu-id="00be5-2714">상수</span><span class="sxs-lookup"><span data-stu-id="00be5-2714">Constant</span></span>|<span data-ttu-id="00be5-2715">설명</span><span class="sxs-lookup"><span data-stu-id="00be5-2715">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="00be5-2716">보통 (기본값)입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2716">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="00be5-2717">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2717">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="00be5-2718">숨겨져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2718">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="00be5-2719">시스템 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2719">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="00be5-2720">볼륨 레이블</span><span class="sxs-lookup"><span data-stu-id="00be5-2720">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="00be5-2721">디렉터리 또는 폴더입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2721">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="00be5-2722">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2722">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="00be5-2723">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2723">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2724">이러한 열거형은 Visual Basic 언어로 지정되며</span><span class="sxs-lookup"><span data-stu-id="00be5-2724">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="00be5-2725">이름은 실제 값 대신 코드에서 아무 곳 이나 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2725">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2726">이 예제에서는 `SetAttr` 파일의 특성을 설정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2726">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="00be5-2727">
            <paramref name="Attribute" /> 형식이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2727">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="00be5-2728">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2728">Required.</span>
          </span>
          <span data-ttu-id="00be5-2729">목록에서 다음 식을 표시하거나 출력하기 전에 삽입할 공백의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2729">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2730">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2730">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2731">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2731">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2732">경우 `Count` 출력 줄 너비의 다음 출력 위치를 즉시 인쇄 되는 공백 수 뒤에 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2732">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="00be5-2733">하는 경우`Count` 출력 줄 너비 보다 큰 `SPC` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2733">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="00be5-2734">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="00be5-2734">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="00be5-2735">예를 들어, 현재 출력 위치가 24 인 경우 출력 줄 너비 80 이며 지정할 `SPC(90)`, 다음 인쇄 34 (현재 출력 위치가 + 90과 80 나머지) 위치에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2735">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="00be5-2736">현재 출력 위치와 출력 줄 너비 차이 보다 작거나 `Count` (또는 `Count` `Mod` *너비*), `SPC` 다음 줄의 시작 부분으로 건너뛰고 생성 함수 공간 같음 `Count` – (*너비* – *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="00be5-2736">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2737">테이블 열이 와이드 문자 수 있도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2737">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2738">이 예제에서는 합니다 `SPC` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="00be5-2738">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2739">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2739">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2740">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2740">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2741">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2741">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2742">현재 줄의 현재 출력 위치가 보다 크면 `Column`, `TAB` 같음 열 값으로 건너뜁니다 `Column` 다음 출력 줄.</span><span class="sxs-lookup"><span data-stu-id="00be5-2742">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="00be5-2743">하는 경우 `Column` 가 1 보다 작은 `TAB` 열 1의 출력 위치를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2743">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="00be5-2744">하는 경우 `Column` 출력 줄 너비 보다 큰 `TAB` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2744">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="00be5-2745">Mod 열 너비</span><span class="sxs-lookup"><span data-stu-id="00be5-2745">Column Mod width</span></span>  
  
 <span data-ttu-id="00be5-2746">예를 들어 경우 *너비* 80 이며 지정할 `TAB(90)`, 다음 출력 열 10 (나머지 90과 80)에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2746">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="00be5-2747">경우 `Column` 현재 출력 위치가 계산된 된 출력 위치에 다음 줄에 인쇄 시작 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2747">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="00be5-2748">계산된 된 출력 위치 현재 출력 위치가 보다 큰 경우 인쇄부터 계산된 된 출력 같은 줄에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2748">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="00be5-2749">출력 줄에서 가장 왼쪽의 출력 위치는 항상 1입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2749">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="00be5-2750">사용 하는 경우는 `Print` 또는 `PrintLine` 함수를 파일에 오른쪽에 있는 인쇄 위치는 사용 하 여 설정할 수 있는 출력 파일의 현재 너비를 `FileWidth` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2750">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="00be5-2751">합니다 `TAB` 함수를 사용할 수도 있습니다는 `WriteLine` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2751">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="00be5-2752">함께 사용할 수 없습니다 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2752">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2753">테이블 열이 와이드 문자를 포함 하도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2753">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2754">이 예제에서는 합니다 `TAB` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="00be5-2754">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="00be5-2755">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2755">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2756">목록에서 다음 식을 표시하거나 출력하기 전에 이동하는 열 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2756">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="00be5-2757">생략할 경우 <see langword="TAB" />은 다음 출력 영역의 시작 부분으로 삽입 지점을 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2757">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2758">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00be5-2759">
            <see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2759">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2760">현재 줄의 현재 출력 위치가 보다 크면 `Column`, `TAB` 같음 열 값으로 건너뜁니다 `Column` 다음 출력 줄.</span><span class="sxs-lookup"><span data-stu-id="00be5-2760">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="00be5-2761">하는 경우 `Column` 가 1 보다 작은 `TAB` 열 1의 출력 위치를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2761">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="00be5-2762">하는 경우 `Column` 출력 줄 너비 보다 큰 `TAB` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2762">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="00be5-2763">Mod 열 너비</span><span class="sxs-lookup"><span data-stu-id="00be5-2763">Column Mod width</span></span>  
  
 <span data-ttu-id="00be5-2764">예를 들어 경우 *너비* 80 이며 지정할 `TAB(90)`, 다음 출력 열 10 (나머지 90과 80)에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2764">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="00be5-2765">경우 `Column` 현재 출력 위치가 계산된 된 출력 위치에 다음 줄에 인쇄 시작 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2765">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="00be5-2766">계산된 된 출력 위치 현재 출력 위치가 보다 큰 경우 인쇄부터 계산된 된 출력 같은 줄에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2766">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="00be5-2767">출력 줄에서 가장 왼쪽의 출력 위치는 항상 1입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2767">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="00be5-2768">사용 하는 경우는 `Print` 또는 `PrintLine` 함수를 파일에 오른쪽에 있는 인쇄 위치는 사용 하 여 설정할 수 있는 출력 파일의 현재 너비를 `FileWidth` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2768">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="00be5-2769">합니다 `TAB` 함수를 사용할 수도 있습니다는 `WriteLine` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2769">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="00be5-2770">함께 사용할 수 없습니다 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2770">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00be5-2771">테이블 열이 와이드 문자를 포함 하도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2771">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2772">이 예제에서는 합니다 `TAB` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="00be5-2772">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00be5-2773">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2773">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2774">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2774">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2775">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2775">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2776">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2776">Required.</span>
          </span>
          <span data-ttu-id="00be5-2777">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2777">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2778">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2778">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2779">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2780">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2781">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2781">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="00be5-2782">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2782">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="00be5-2783">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2783">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="00be5-2784">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2784">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="00be5-2785">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2785">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="00be5-2786">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2786">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2787">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2787">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="00be5-2788">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2788">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2789">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2789">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2790">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2790">Required.</span>
          </span>
          <span data-ttu-id="00be5-2791">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2791">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="00be5-2792">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2792">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2793">잠그거나 잠금을 해제할 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2793">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2794">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2794">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2795">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2795">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2796">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2796">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2797">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2797">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="00be5-2798">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2798">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="00be5-2799">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2799">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="00be5-2800">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2800">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="00be5-2801">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2801">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="00be5-2802">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2802">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2803">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2803">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="00be5-2804">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2804">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2805">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2805">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2806">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2806">Required.</span>
          </span>
          <span data-ttu-id="00be5-2807">유효한 파일 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2807">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="00be5-2808">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2808">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2809">잠그거나 잠금을 해제할 첫째 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2809">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="00be5-2810">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2810">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2811">잠그거나 잠금을 해제할 마지막 레코드 또는 바이트 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2811">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2812">
            <see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2812">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="00be5-2813">
            <see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2813">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="00be5-2814">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2814">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2815">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2815">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="00be5-2816">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2816">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="00be5-2817">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2817">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="00be5-2818">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2818">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="00be5-2819">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2819">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="00be5-2820">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2820">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2821">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2821">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="00be5-2822">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2822">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2823">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2824">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2824">Required.</span>
          </span>
          <span data-ttu-id="00be5-2825">유효한 파일 번호가 포함된 <see langword="Integer" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2825">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="00be5-2826">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2826">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2827">파일에 쓸 쉼표로 구분된 하나 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2827">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2828">순차 파일에 데이터를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2828">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="00be5-2829">
            <see langword="Write" />로 작성된 데이터는 일반적으로 <see langword="Input" />을 사용하여 파일에서 읽습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2829">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2830">합니다 `Write` 및 `WriteLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2830">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2831">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2831">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2832">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2832">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2833">생략 하면 `Output`, 빈 줄을 파일에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2833">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="00be5-2834">여러 식에 쉼표를 사용 하 여 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2834">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="00be5-2835">달리 합니다 `Print` 함수는 `Write` 함수는 파일에 기록 될 때 해당 항목 및 문자열 주위에 따옴표 사이 쉼표를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2835">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="00be5-2836">명시적 구분 기호 목록에 배치할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2836">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="00be5-2837">때 `Write` 파일에 숫자 데이터를 쓰는 데 사용 되 `Boolean`, 날짜, null 및 `Error` 데이터 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2837">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="00be5-2838">데이터를 항상 읽을 수 있습니다 하 고 사용 하 여 올바르게 해석 뒤에 다음과 같은 유니버설 가정을 `Input`로캘에 관계 없이:</span><span class="sxs-lookup"><span data-stu-id="00be5-2838">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="00be5-2839">숫자 데이터 소수 구분 기호로 마침표를 사용 하 여 항상 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2839">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="00be5-2840">에 대 한 `Boolean` 데이터를 `#TRUE#` 또는 `#FALSE#` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2840">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="00be5-2841">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2841">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="00be5-2842">날짜 데이터 유니버설 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2842">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="00be5-2843">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2843">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="00be5-2844">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2844">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="00be5-2845">그러나 null 데이터에 대 한 `#NULL#` 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2845">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="00be5-2846">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `#ERROR errorcode#`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2846">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="00be5-2847">`Error` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2847">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="00be5-2848">`WriteLine` 줄 바꿈 문자를 삽입 합니다 (즉, 캐리지 리턴/줄 바꿈, 또는 `Chr(13) + Chr(10)`) 마지막 문자에 쓴 후 `Output` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2848">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="00be5-2849">큰따옴표를 사용 하 여 문자열에 따옴표를 포함할 수 있습니다 또는 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2849">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="00be5-2850">예를 들어 개체에 적용된</span><span class="sxs-lookup"><span data-stu-id="00be5-2850">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="00be5-2851">값을 사용 하 여 문자열을 반환 합니다 `Double quotation marks aren't "difficult" to handle`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2851">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="00be5-2852">사용 하 여 파일에 쓸 합니다 `Write` 또는 `WriteLine` 함수에 필요 `Append` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2852">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2853">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="00be5-2853">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2854">이 예제에서는 `Write` 순차 파일에 원시 데이터를 쓸 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2854">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="00be5-2855">파일 모드가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2855">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="00be5-2856">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2856">Required.</span>
          </span>
          <span data-ttu-id="00be5-2857">유효한 파일 번호가 포함된 <see langword="Integer" /> 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2857">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="00be5-2858">선택 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2858">Optional.</span>
          </span>
          <span data-ttu-id="00be5-2859">파일에 쓸 쉼표로 구분된 하나 이상의 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2859">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00be5-2860">순차 파일에 데이터를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2860">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="00be5-2861">
            <see langword="Write" />로 작성된 데이터는 일반적으로 <see langword="Input" />을 사용하여 파일에서 읽습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00be5-2861">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00be5-2862">합니다 `Write` 및 `WriteLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2862">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="00be5-2863">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2863">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="00be5-2864">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2864">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="00be5-2865">생략 하면 `Output`, 빈 줄을 파일에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2865">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="00be5-2866">여러 식에 쉼표를 사용 하 여 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2866">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="00be5-2867">달리 합니다 `Print` 함수는 `Write` 함수는 파일에 기록 될 때 해당 항목 및 문자열 주위에 따옴표 사이 쉼표를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2867">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="00be5-2868">명시적 구분 기호 목록에 배치할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2868">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="00be5-2869">때 `Write` 파일에 숫자 데이터를 쓰는 데 사용 되 `Boolean`, 날짜, null 및 `Error` 데이터 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2869">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="00be5-2870">데이터를 항상 읽을 수 있습니다 하 고 사용 하 여 올바르게 해석 뒤에 다음과 같은 유니버설 가정을 `Input`로캘에 관계 없이:</span><span class="sxs-lookup"><span data-stu-id="00be5-2870">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="00be5-2871">숫자 데이터 소수 구분 기호로 마침표를 사용 하 여 항상 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2871">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="00be5-2872">에 대 한 `Boolean` 데이터를 `#TRUE#` 또는 `#FALSE#` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2872">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="00be5-2873">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2873">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="00be5-2874">날짜 데이터 유니버설 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2874">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="00be5-2875">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2875">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="00be5-2876">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2876">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="00be5-2877">그러나 null 데이터에 대 한 `#NULL#` 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2877">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="00be5-2878">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `#ERROR errorcode#`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2878">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="00be5-2879">`Error` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2879">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="00be5-2880">`WriteLine` 줄 바꿈 문자를 삽입 합니다 (즉, 캐리지 리턴/줄 바꿈, 또는 `Chr(13) + Chr(10)`) 마지막 문자에 쓴 후 `Output` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2880">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="00be5-2881">큰따옴표를 사용 하 여 문자열에 따옴표를 포함할 수 있습니다 또는 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2881">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="00be5-2882">예를 들어 개체에 적용된</span><span class="sxs-lookup"><span data-stu-id="00be5-2882">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="00be5-2883">값을 사용 하 여 문자열을 반환 합니다 `Double quotation marks aren't "difficult" to handle`합니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2883">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="00be5-2884">사용 하 여 파일에 쓸 합니다 `Write` 또는 `WriteLine` 함수에 필요 `Append` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2884">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="00be5-2885">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="00be5-2885">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00be5-2886">이 예제에서는 `Write` 순차 파일에 원시 데이터를 쓸 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="00be5-2886">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>