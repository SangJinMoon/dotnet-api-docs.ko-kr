<Type Name="IPendingWork" FullName="System.Workflow.Runtime.IPendingWork">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0dd7a8c349646cb87772b0a5ddd487f7847c84b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPendingWork" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPendingWork" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.IPendingWork" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPendingWork" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPendingWork" />
  <TypeSignature Language="F#" Value="type IPendingWork = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="cca65-101">작업 일괄 처리에 참여할 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cca65-101">Provides methods to participate in a work batch.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="cca65-102"><xref:System.Workflow.Runtime.IPendingWork> 인터페이스는 워크플로 런타임 엔진 일괄 처리 메커니즘에 참여하려는 서비스를 위해 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-102">The <xref:System.Workflow.Runtime.IPendingWork> interface is provided for services that want to participate in the workflow runtime engine batching mechanism.</span></span> <span data-ttu-id="cca65-103">일괄 처리 메커니즘은 특히 영속 저장소를 사용하는 서비스에 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-103">The batching mechanism is especially useful for services that use a durable store.</span></span> <span data-ttu-id="cca65-104">지속성 서비스에서 사용하는 영속 저장소와 워크플로 런타임 엔진의 내부 상태 간에 일관성을 유지하는 것이 중요한 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-104">It is often important in these cases to maintain consistency between the durable store used by the service and the internal state of the workflow runtime engine.</span></span>  
  
 <span data-ttu-id="cca65-105">서비스가 <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>에서 제공하는 워크플로 트랜잭션 일괄 처리에 참여하게 하려면 <xref:System.Workflow.Runtime.IPendingWork> 인터페이스가 정의한 메서드를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-105">If you want your service to participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, you must implement the methods defined by the <xref:System.Workflow.Runtime.IPendingWork> interface.</span></span> <span data-ttu-id="cca65-106">워크플로 런타임 엔진은 서비스에서 <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> 메서드를 호출하여 일괄 처리를 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-106">The workflow runtime engine will call the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on your service to commit the batch.</span></span>  
  
 <span data-ttu-id="cca65-107"><xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 클래스는 <xref:System.Workflow.Runtime.IPendingWork> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-107">The <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class implements the <xref:System.Workflow.Runtime.IPendingWork> interface.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Transaction transaction, System.Collections.ICollection items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Transaction transaction, class System.Collections.ICollection items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Transaction ^ transaction, System::Collections::ICollection ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Transaction * System.Collections.ICollection -&gt; unit" Usage="iPendingWork.Commit (transaction, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        <Parameter Name="items" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="cca65-108">보류 중인 작업과 연결된 <see cref="T:System.Transactions.Transaction" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-108">The <see cref="T:System.Transactions.Transaction" /> associated with the pending work.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="cca65-109">커밋할 작업 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-109">The work items to be committed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cca65-110">지정된 <see cref="T:System.Transactions.Transaction" /> 개체를 사용하여 작업 항목 목록을 커밋합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-110">Commits the list of work items by using the specified <see cref="T:System.Transactions.Transaction" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cca65-111">워크플로 런타임 엔진은 해당 의미 체계가 작업 일괄 처리의 보류 중인 작업을 커밋해야 함을 나타낼 때 <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-111">The workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method when its semantics dictate that the pending work in the work batch should be committed.</span></span> <span data-ttu-id="cca65-112">커밋 지점에 도달하면 워크플로 런타임 엔진은 작업 일괄 처리의 각 <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> 개체에서 <xref:System.Workflow.Runtime.IPendingWork> 메서드를 호출합니다. 워크플로 런타임 엔진은 해당 <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> 개체와 연결된 항목 컬렉션에 <xref:System.Workflow.Runtime.IPendingWork> 메서드를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-112">When it reaches a commit point, the workflow runtime engine calls the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method on each <xref:System.Workflow.Runtime.IPendingWork> object in its work batch; the workflow runtime engine passes the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method the collection of items associated with that <xref:System.Workflow.Runtime.IPendingWork> object.</span></span> <span data-ttu-id="cca65-113">일괄 처리의 모든 작업이 성공하거나 모두 실패합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-113">Either all of the work in a batch succeeds or none of it succeeds.</span></span> <span data-ttu-id="cca65-114">구현에서 <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> 메서드로 전달된 작업 항목을 커밋할 수 없는 경우 예외를 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-114">You should throw an exception if any of the work items passed to the <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method in your implementation cannot be committed.</span></span> <span data-ttu-id="cca65-115">구현에 따라 작업 항목을 커밋할 수 없는 경우 <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> 메서드에서 일부 롤백을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-115">Depending on your implementation, you may want to perform some rollback in your <xref:System.Workflow.Runtime.IPendingWork.Commit%2A> method if it cannot commit its work items.</span></span> <span data-ttu-id="cca65-116">작업 일괄 처리의 모든 작업을 성공적으로 커밋하면 워크플로 런타임 엔진은 <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> 매개 변수를 `succeeded`로 설정하여 `true`를 호출합니다. 그렇지 않으면 <xref:System.Workflow.Runtime.IPendingWork.Complete%2A>를 `succeeded`로 설정하여 `false`를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-116">If the workflow runtime engine successfully commits all of the work in the work batch, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with the `succeeded` parameter set to `true`; otherwise, it calls <xref:System.Workflow.Runtime.IPendingWork.Complete%2A> with `succeeded` set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (bool succeeded, System.Collections.ICollection items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(bool succeeded, class System.Collections.ICollection items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (succeeded As Boolean, items As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(bool succeeded, System::Collections::ICollection ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Complete : bool * System.Collections.ICollection -&gt; unit" Usage="iPendingWork.Complete (succeeded, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="succeeded" Type="System.Boolean" />
        <Parameter Name="items" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="succeeded">
          <span data-ttu-id="cca65-117">트랜잭션이 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-117">
              <see langword="true" /> if the transaction succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="cca65-118">작업 항목의 <see cref="T:System.Collections.ICollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-118">An <see cref="T:System.Collections.ICollection" /> of work items.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cca65-119">트랜잭션이 완료된 경우에 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-119">Called when the transaction has completed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cca65-120">`succeeded`가 `true`이면 트랜잭션이 성공했으며 작업 일괄 처리에 사용된 모든 리소스가 해제될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-120">If `succeeded` is `true`, the transaction succeeded and any resources used by the work batch may be released.</span></span> <span data-ttu-id="cca65-121">`succeeded`가 `false`이면 트랜잭션이 실패했습니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-121">If `succeeded` is `false`, the transaction failed.</span></span> <span data-ttu-id="cca65-122">구현에 따라 트랜잭션이 실패할 경우 작업 일괄 처리의 작업에서 적절한 롤백을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-122">Depending on your implementation, you can perform any appropriate roll back on the work in the work batch when the transaction fails.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MustCommit">
      <MemberSignature Language="C#" Value="public bool MustCommit (System.Collections.ICollection items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MustCommit(class System.Collections.ICollection items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function MustCommit (items As ICollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MustCommit(System::Collections::ICollection ^ items);" />
      <MemberSignature Language="F#" Value="abstract member MustCommit : System.Collections.ICollection -&gt; bool" Usage="iPendingWork.MustCommit items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="cca65-123">작업 항목의 <see cref="T:System.Collections.ICollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-123">An <see cref="T:System.Collections.ICollection" /> of work items.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cca65-124">작업 일괄 처리의 항목이 즉시 커밋되어야 하는지 여부를 어설션할 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-124">Allows the items in the work batch to assert whether they must commit immediately.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cca65-125">컬렉션의 항목이 즉시 커밋되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cca65-125">
              <see langword="true" /> if any item in the collection must be committed immediately; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cca65-126"><xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A>에서 `false`를 반환하는 경우 작업이 이후 커밋 지점으로 연기될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-126">If <xref:System.Workflow.Runtime.IPendingWork.MustCommit%2A> returns `false`, the work can be postponed to a future commit point.</span></span> <span data-ttu-id="cca65-127">항목을 커밋해야 하는 경우 `true`를 반환하며 현재 커밋 지점에서 모든 항목이 커밋됩니다.</span><span class="sxs-lookup"><span data-stu-id="cca65-127">If any of the items must be committed, then return `true` and all items will be committed at the current commit point.</span></span> <span data-ttu-id="cca65-128">가능한 커밋 지점에 대한 자세한 내용은 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 클래스를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="cca65-128">For a discussion about possible commit points, see the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>