<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Table`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58f2e2c57717f41b8415d2d08b9d484756b3b8509.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f2e2c57717f41b8415d2d08b9d484756b3b8509</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>The type of the data in the table.</source>
          <target state="translated">테이블의 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Table`1">
          <source>Represents a table for a particular type in the underlying database.</source>
          <target state="translated">기본 데이터베이스에 있는 특정 형식의 테이블을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>This class enables you to query over the table and add, remove, and attach objects.</source>
          <target state="translated">이 클래스를 사용 하면 테이블에 대해 쿼리하고 및 추가, 제거 및 개체를 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>An application can access a <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance via <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph> or by using a strongly typed property for the strongly typed <ph id="ph3">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">응용 프로그램에 액세스할 수는 <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스에 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph> 또는 강력한 형식의 항목에 대 한 강력한 형식의 속성을 사용 하 여 <ph id="ph3">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>That is, when the designer generates a DataContext object, it generates properties to represent each Table.</source>
          <target state="translated">즉, 디자이너 DataContext 개체를 생성할 때 각 테이블을 나타낼 속성을 생성 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>For this strongly typed DataContext, you can access the Users property to get <ph id="ph1">`Table&lt;User&gt;`</ph>.</source>
          <target state="translated">이 강력한 형식의 DataContext에 대 한 가져올 사용자 속성에 액세스할 수 있습니다 <ph id="ph1">`Table&lt;User&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Table`1">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 엔터티를 연결합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>Use the <ph id="ph1">`Attach`</ph> methods with entities that have been created in one <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`Attach`</ph> 하나에서 생성 된 엔터티를 사용 하 여 메서드 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>, 클라이언트에 serialize 되 고 다음 (함께 다시 설정 하려는 의도를 또는 삭제 작업에 대 한 업데이트 수행)을 deserialize 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>Do not try to <ph id="ph1">`Attach`</ph> an entity that has not been detached through serialization.</source>
          <target state="translated">하려고 하지 마십시오 <ph id="ph1">`Attach`</ph> serialization을 통해 분리 되지 않은 엔터티의 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</source>
          <target state="translated">Serialize 되지 않습니다는 엔터티 두 번째 데이터 컨텍스트에서 엔터티를 추적 하는 경우 예기치 않은 결과 일으킬 수 있는 지연된 로더가 있는 연결을 유지 하면서 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source><ph id="ph1">`Attach`</ph> attaches all entities in the object graph of the provided object.</source>
          <target state="translated"><ph id="ph1">`Attach`</ph> 제공된 된 개체의 개체 그래프에 있는 모든 엔터티를 연결합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>For example, the following C# code:</source>
          <target state="translated">예를 들어 다음 C# 코드:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>The equivalent Visual Basic code is:</source>
          <target state="translated">해당 하는 Visual Basic 코드가입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>Calling <ph id="ph1">`Attach`</ph> on <ph id="ph2">`Employee`</ph> attaches employee, master, and child, because the <ph id="ph3">`Employee`</ph> has relationships to both master and child.</source>
          <target state="translated">호출 <ph id="ph1">`Attach`</ph> 에 <ph id="ph2">`Employee`</ph> 때문에 직원, 마스터 및 자식 연결의 <ph id="ph3">`Employee`</ph> 마스터와 자식에 대 한 관계가 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>You must explicitly call <ph id="ph1">`InsertOnSubmit`</ph> to change the state from attached to inserted.</source>
          <target state="translated">명시적으로 호출 해야 <ph id="ph1">`InsertOnSubmit`</ph> 으로 상태를 변경 하려면 삽입으로 연결 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>The original values of the entity to be attached.</source>
          <target state="translated">연결할 엔터티의 원래 값입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>Attaches a disconnected or "detached" entity to a new <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> when original values are required for optimistic concurrency checks.</source>
          <target state="translated">낙관적 동시성 검사를 위해 원래 값이 필요한 경우 연결이 끊기거나 "분리된" 엔터티를 새 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>Use the <ph id="ph1">`Attach`</ph> methods with entities that have been created in one <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>, serialized to a client, and then deserialized back to perform an update or delete operation.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`Attach`</ph> 하나에서 생성 된 엔터티를 사용 하 여 메서드 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>, 클라이언트에 serialize 되 고 다음 또는 삭제 하는 업데이트를 수행 하려면 뒤로 deserialize 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>Because the new <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</source>
          <target state="translated">때문에 새 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 하지 못함을의 원래 값은 연결이 끊긴 엔터티의 얼마 입니까 추적, 클라이언트에서 해당 값을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>In this version of <ph id="ph1">&lt;xref:System.Data.Linq.Table%601.Attach%2A&gt;</ph>, the entity is assumed to be in its original value state.</source>
          <target state="translated">이 버전의에서 <ph id="ph1">&lt;xref:System.Data.Linq.Table%601.Attach%2A&gt;</ph>, 엔터티는 원래 값 상태로 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>After calling this method, you can then update its fields, for example with additional data sent from the client.</source>
          <target state="translated">이 메서드를 호출한 후 업데이트할 수 있습니다 해당 필드를 예를 들어 클라이언트에서 전송 된 추가 데이터입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>Do not try to <ph id="ph1">`Attach`</ph> an entity that has not been detached through serialization.</source>
          <target state="translated">하려고 하지 마십시오 <ph id="ph1">`Attach`</ph> serialization을 통해 분리 되지 않은 엔터티의 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0)">
          <source>Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</source>
          <target state="translated">Serialize 되지 않습니다는 엔터티 두 번째 데이터 컨텍스트에서 엔터티를 추적 하는 경우 예기치 않은 결과 일으킬 수 있는 지연된 로더가 있는 연결을 유지 하면서 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attach the entity as modified; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to attach the entity as unmodified.</source>
          <target state="translated">수정된 엔터티를 연결하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 수정되지 않은 엔터티를 연결하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">엔터티를 수정된 상태나 수정되지 않은 상태로 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source>If attaching <bpt id="p1">*</bpt>as modified<ept id="p1">*</ept>, the entity must either declare a version member or must not participate in update conflict checking.</source>
          <target state="translated">연결 하는 경우 <bpt id="p1">*</bpt>수정 된 대로<ept id="p1">*</ept>, 엔터티 버전 멤버를 선언 하거나 또는 업데이트 충돌 확인에 참여 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>An instance of the same entity type with data members that contain the original values.</source>
          <target state="translated">원래 값이 들어 있는 데이터 멤버와 엔터티 형식이 같은 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state by specifying both the entity and its original state.</source>
          <target state="translated">엔터티 및 원래 상태를 모두 지정하여 엔터티를 수정되거나 수정되지 않은 상태로 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>In the following example, the <ph id="ph1">`Customer`</ph> object is already correctly configured.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Customer`</ph> 개체가 이미 올바르게 구성 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>You can call <ph id="ph1">`Attach`</ph> without having to replay the updates.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">`Attach`</ph> 업데이트를 다시 실행 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.Attach(`0,`0)">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Table`1">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</source>
          <target state="translated">수정 된 대로 연결 하는 경우에 엔터티 버전 멤버를 선언 하거나 또는 업데이트 충돌 확인에 참여 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.Table`1">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of entities to attach.</source>
          <target state="translated">연결할 엔터티의 형식입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The collection of entities.</source>
          <target state="translated">엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method attaches all entities of a collection to a new <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">이 메서드는 컬렉션의 모든 항목을 새 연결 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>The type of entities to attach.</source>
          <target state="translated">연결할 엔터티의 형식입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>The collection of entities.</source>
          <target state="translated">엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object has a timestamp or RowVersion member; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if original values are being used for the optimistic concurrency check.</source>
          <target state="translated">개체에 타임스탬프 또는 RowVersion 멤버가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 낙관적 동시성 검사를 위해 원래 값이 사용되고 있으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>This method attaches all entities of a collection to the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> in either a <bpt id="p1">*</bpt>modified<ept id="p1">*</ept> or <bpt id="p2">*</bpt>unmodified<ept id="p2">*</ept> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 연결 하는이 메서드는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 하나에 <bpt id="p1">*</bpt>수정<ept id="p1">*</ept> 또는 <bpt id="p2">*</bpt>수정 되지 않은<ept id="p2">*</ept> 상태입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</source>
          <target state="translated">수정 된 대로 연결 하는 경우에 엔터티 버전 멤버를 선언 하거나 또는 업데이트 충돌 확인에 참여 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>If attaching as unmodified, the entity is assumed to represent the original value.</source>
          <target state="translated">수정 된 엔터티를 원래 값을 나타내는 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>After calling this method, the entity's fields can be modified with other information from the client before <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.</source>
          <target state="translated">이 메서드를 호출한 후 엔터티의 필드는 수정할 수 전에 클라이언트에서 다른 정보와 함께 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>When a new entity is attached, deferred loaders for any child collections (for example, <ph id="ph1">`EntitySet`</ph> collections of entities from associated tables) are initialized.</source>
          <target state="translated">새 엔터티를 연결 하면 지연 된 모든 자식 컬렉션에 대 한 로더 (예를 들어 <ph id="ph1">`EntitySet`</ph> 관련된 테이블에서 엔터티 컬렉션) 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>When <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id="ph2">`Unmodified`</ph> state.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고, 컬렉션에 배치 된 자식 멤버는 <ph id="ph2">`Unmodified`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>To update members of a child collection, you must explicitly call <ph id="ph1">`Attach`</ph> and specify that entity.</source>
          <target state="translated">자식 컬렉션의 멤버 업데이트를 명시적으로 호출 해야 <ph id="ph1">`Attach`</ph> 및 해당 엔터티를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>The following example shows how you can update an <ph id="ph1">`Order`</ph> object on a different <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> instance.</source>
          <target state="translated">다음 예제에서는 업데이트 하는 방법을 보여 줍니다.는 <ph id="ph1">`Order`</ph> 다른 개체 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>The example assumes that you have a connection to a database and have made a <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> file for it (in this case, the Northwind sample database).</source>
          <target state="translated">이 예에서는 데이터베이스에 연결 하 고 사항을 가정는 <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 파일에 대 한 (이 경우 Northwind 샘플 데이터베이스).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</source>
          <target state="translated">다음 예제에서를 연결할 수는 엔터티 개체를 다른 개체와 외래 키 관계가 및 캐시에 저장 않으며 연결 되어 있지입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>When you call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>, the <ph id="ph2">`ChangeProcessor`</ph> adds an <ph id="ph3">`Insert`</ph> operation for all the foreign key objects.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>, <ph id="ph2">`ChangeProcessor`</ph> 추가 <ph id="ph3">`Insert`</ph> 모든 외래 키 개체에 대 한 작업입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>This is a side-effect when an entity instance is re-used in a different <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> instance.</source>
          <target state="translated">엔터티 인스턴스가 다른에서 다시 사용할 경우이 파생 작업이 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>For this reason, <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not support re-use of objects.</source>
          <target state="translated">이러한 이유로 <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 다시 개체의 사용을 지원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</source>
          <target state="translated">다음 예제에서는 고객 A가 모든 주문을 취소 하 고 고객 B에 대 한 소유권이 이러한 시나리오가 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
          <source>You can attach all orders of Customer A at the same time.</source>
          <target state="translated">고객 A의 모든 주문을 동시에 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Table`1.Context">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> that has been used to retrieve this <ph id="ph2">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>을 검색하는 데 사용된 <ph id="ph2">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.Context">
          <source>The data context that has been used to retrieve this table.</source>
          <target state="translated">이 테이블을 검색하는 데 사용된 데이터 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements to delete.</source>
          <target state="translated">삭제할 요소의 형식입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The entities to delete.</source>
          <target state="translated">삭제할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Puts all entities from the collection into a <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Entities that are put into the pending delete state with this method do not disappear from query results until after <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.</source>
          <target state="translated">이 방법을 삭제 보류 중 상태로 전환 되는 엔터티 후까지 쿼리 결과에서 사라지지 않습니다 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Disconnected entities must be attached before they can be deleted.</source>
          <target state="translated">연결 되지 않은 엔터티를 삭제 하려면 먼저 연결 해야 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following C# snippet shows one use for this method:</source>
          <target state="translated">다음 C# 조각은이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic:</source>
          <target state="translated">Visual basic의 경우:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>The entity to be deleted.</source>
          <target state="translated">삭제할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>Puts an entity from this table into a <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> state.</source>
          <target state="translated">이 테이블의 엔터티를 <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>The removed entity does not disappear from the query results until after <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.</source>
          <target state="translated">제거 된 엔터티가 후까지 쿼리 결과에서 사라지지 않는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>Disconnected entities must first be attached before they can be deleted.</source>
          <target state="translated">연결이 끊긴된 엔터티 삭제 하기 전에 먼저 연결 해야 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not support or recognize cascade-delete operations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph>에서는 하위 삭제 작업을 지원하거나 인식하지 않습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>If you want to delete a row in a table that has constraints against it, you must either set the <ph id="ph1">`ON DELETE CASCADE`</ph> rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</source>
          <target state="translated">설정 하거나 해야 제약 조건이 있는 테이블의 행을 삭제 하려는 경우는 <ph id="ph1">`ON DELETE CASCADE`</ph> 는 데이터베이스의 외래 키 제약 조건에 규칙 하거나 사용자 고유의 코드를 사용 하 여 부모 개체를 삭제 하지 못하게 하는 자식 개체를 먼저 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
          <source>Otherwise, an exception is thrown.</source>
          <target state="translated">그러지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetEnumerator">
          <source>Gets an enumerator that iterates through the collection.</source>
          <target state="translated">컬렉션을 반복하는 열거자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetEnumerator">
          <source>An enumerator that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
          <source>The entity from which to get the array.</source>
          <target state="translated">배열을 가져올 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
          <source>Returns an array of modified members that contain their current and original values.</source>
          <target state="translated">현재 값과 원래 값이 들어 있는 수정된 멤버의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
          <source>An array of modified members that contain their current and original values.</source>
          <target state="translated">현재 값과 원래 값이 들어 있는 수정된 멤버의 배열입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetNewBindingList">
          <source>Creates a new list for binding to a data source.</source>
          <target state="translated">데이터 소스에 바인딩할 새 목록을 만듭니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetNewBindingList">
          <source>A new <ph id="ph1">&lt;see cref="T:System.ComponentModel.IBindingList" /&gt;</ph> for binding to a data source.</source>
          <target state="translated">데이터 소스에 바인딩할 새 <ph id="ph1">&lt;see cref="T:System.ComponentModel.IBindingList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.GetNewBindingList">
          <source>The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</source>
          <target state="translated">반환된 된 목록에서 추가, 삭제, 삽입 및 업데이트와 같은 표준 작업을 지원 하지만 프로그래머가 저장을 명시적으로 관리 해야 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
          <source>The entity whose original state is to be returned.</source>
          <target state="translated">원래 상태를 반환할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph> instance that contains the original state of the entity.</source>
          <target state="translated">엔터티의 원래 상태가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph> 인스턴스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph> instance that contains the original state of the entity.</source>
          <target state="translated">엔터티의 원래 상태가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
          <source>This method returns the original state of an entity since it was either created or attached to the current <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">이 메서드 중 하나 작성 또는 현재 연결 된 이후 엔터티의 원래 상태로 반환 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
          <source>The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">엔터티를 직렬화 및 역직렬화의 원래 상태로 독립 추적 메커니즘을 제공한 고 엔터티를 새 연결을 제공 해야 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements to insert.</source>
          <target state="translated">삽입할 요소의 형식입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The entities to add.</source>
          <target state="translated">추가할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Adds all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in a <ph id="ph2">&lt;see langword="pending insert" /&gt;</ph> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 <ph id="ph2">&lt;see langword="pending insert" /&gt;</ph> 상태로 추가합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The added entities will not be in query results until after <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> has been called.</source>
          <target state="translated">엔터티를 추가 된 후까지 쿼리 결과에 위치 하지 것입니다 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 가 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
          <source>The entity to be added.</source>
          <target state="translated">추가할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
          <source>Adds an entity in a <ph id="ph1">&lt;see langword="pending insert" /&gt;</ph> state to this <ph id="ph2">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph>에 엔터티를 <ph id="ph1">&lt;see langword="pending insert" /&gt;</ph> 상태로 추가합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
          <source>The added entity will not appear in query results from this table until after <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> has been called.</source>
          <target state="translated">추가한 엔터티에 후 될 때까지이 테이블에서 쿼리 결과에 표시 되지 것입니다 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 가 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Table`1.IsReadOnly">
          <source>Gets a value that indicates whether the type of the entities contained in this <ph id="ph1">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph> instance has a primary key.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Data.Linq.Table`1" /&gt;</ph> 인스턴스에 포함된 엔터티의 형식에 기본 키가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the entity type does not have a primary key; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">엔터티 형식에 기본 키가 없으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&amp;lt;TEntity&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">컬렉션을 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&amp;lt;TEntity&amp;gt;#GetEnumerator">
          <source>An enumerator that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">컬렉션을 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
          <source>Gets a value that indicates whether the collection is a collection of <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> objects.</source>
          <target state="translated">해당 컬렉션이 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 개체의 컬렉션인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the collection is a collection of <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> objects; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">해당 컬렉션이 <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 개체의 컬렉션이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> that can be bound to a data source from an object that does not implement an <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> itself.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>를 직접 구현하지 않는 개체에서 데이터 소스에 바인딩될 수 있는 <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> that can be bound to a data source.</source>
          <target state="translated">데이터 소스에 바인딩할 수 있는 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Table`1">
          <source>Allows deserialized entities to be associated with a new instance of a <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> so that they can be updated or deleted from the database.</source>
          <target state="translated">deserialize된 엔터티를 업데이트하거나 데이터베이스에서 삭제할 수 있도록 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>의 새 인스턴스와 연결합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in an unmodified state.</source>
          <target state="translated">엔터티를 수정되지 않은 상태로 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attach the entity as modified; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to attached the entity as unmodified.</source>
          <target state="translated">수정된 엔터티를 연결하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 수정되지 않은 엔터티를 연결하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
          <source>An instance of the same entity type with data members that contain the original values.</source>
          <target state="translated">원래 값이 들어 있는 데이터 멤버와 엔터티 형식이 같은 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state by specifying both the entity and its original state.</source>
          <target state="translated">엔터티 및 원래 상태를 모두 지정하여 엔터티를 수정되거나 수정되지 않은 상태로 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.Table`1">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
          <source>The collection of entities to be attached.</source>
          <target state="translated">연결할 엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>The collection of entities to be attched.</source>
          <target state="translated">연결할 엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attach the entities as modified; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to attach the entities as unmodified.</source>
          <target state="translated">수정된 엔터티를 연결하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 수정되지 않은 엔터티를 연결하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>The entities being removed.</source>
          <target state="translated">제거할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>Puts all entities from the collection into a <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source>The entity to be removed.</source>
          <target state="translated">제거할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source>Puts an entity from this table into a <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> state.</source>
          <target state="translated">이 테이블의 엔터티를 <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not support or recognize cascade-delete operations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph>에서는 하위 삭제 작업을 지원하거나 인식하지 않습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source>If you want to delete a row in a table that has constraints against it, you must either set the <ph id="ph1">`ON DELETE CASCADE`</ph> rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</source>
          <target state="translated">설정 하거나 해야 제약 조건이 있는 테이블의 행을 삭제 하려는 경우는 <ph id="ph1">`ON DELETE CASCADE`</ph> 는 데이터베이스의 외래 키 제약 조건에 규칙 하거나 사용자 고유의 코드를 사용 하 여 부모 개체를 삭제 하지 못하게 하는 자식 개체를 먼저 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
          <source>Otherwise, an exception is thrown.</source>
          <target state="translated">그러지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
          <source>The entity from which to obtain the modified members.</source>
          <target state="translated">수정된 멤버를 가져올 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
          <source>Returns an array of modified members that contain their current and original values.</source>
          <target state="translated">현재 값과 원래 값이 들어 있는 수정된 멤버의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
          <source>An array of modified members.</source>
          <target state="translated">수정된 멤버의 배열입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
          <source>The entity whose original state is to be accessed.</source>
          <target state="translated">원래 상태에 액세스할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
          <source>Retrieves original values of a given entity.</source>
          <target state="translated">지정된 엔터티의 원래 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
          <source>A copy of the original entity.</source>
          <target state="translated">원래 엔터티의 복사본입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>The collection of entities to be added.</source>
          <target state="translated">추가할 엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>Adds all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in an <ph id="ph2">&lt;see langword="pending insert" /&gt;</ph> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 <ph id="ph2">&lt;see langword="pending insert" /&gt;</ph> 상태로 추가합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
          <source>The entity to add.</source>
          <target state="translated">추가할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
          <source>Adds an entity in a <ph id="ph1">&lt;see langword="pending insert" /&gt;</ph> state to this table.</source>
          <target state="translated">이 테이블에 엔터티를 <ph id="ph1">&lt;see langword="pending insert" /&gt;</ph> 상태로 추가합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Data.Linq.ITable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
          <source>Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</source>
          <target state="translated">이 개체에 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
          <source>The type of the element(s) that are returned when the expression tree associated with this object is executed.</source>
          <target state="translated">이 개체에 연결된 식 트리가 실행될 때 반환되는 요소의 형식입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
          <source>Gets the expression tree that is associated with this instance of <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>의 이 인스턴스에 연결된 식 트리를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that is associated with this instance of <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>의 이 인스턴스에 연결된 <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
          <source>Gets the query provider that is associated with this data source.</source>
          <target state="translated">이 데이터 소스에 연결된 쿼리 공급자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryProvider" /&gt;</ph> that is associated with this data source.</source>
          <target state="translated">이 데이터 소스에 연결된 <ph id="ph1">&lt;see cref="T:System.Linq.IQueryProvider" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
          <source>The query expression from which the evaluation is performed.</source>
          <target state="translated">평가를 수행할 쿼리 식입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
          <source>Constructs an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> object that can evaluate the query represented by a specified expression tree.</source>
          <target state="translated">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> 개체를 생성합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> that can evaluate the query represented by the specified expression tree.</source>
          <target state="translated">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
          <source>The type of the data in the table.</source>
          <target state="translated">테이블의 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
          <source>The query expression from which the evaluation is performed.</source>
          <target state="translated">평가를 수행할 쿼리 식입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
          <source>Constructs an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> object that can evaluate the query represented by a specified expression tree.</source>
          <target state="translated">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> 개체를 생성합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that can evaluate the query represented by the specified expression tree.</source>
          <target state="translated">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
          <source>The query expression to execute.</source>
          <target state="translated">실행할 쿼리 식입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
          <source>Executes the query represented by a specified expression tree.</source>
          <target state="translated">지정된 식 트리가 나타내는 쿼리를 실행합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
          <source>The value that results from executing the specified query.</source>
          <target state="translated">지정된 쿼리를 실행한 결과 값입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
          <source>The type of the data in the table.</source>
          <target state="translated">테이블의 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
          <source>The query expression to execute.</source>
          <target state="translated">실행할 쿼리 식입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
          <source>Executes the strongly-typed query represented by a specified expression tree.</source>
          <target state="translated">지정된 식 트리가 나타내는 강력한 형식의 쿼리를 실행합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
          <source>The value that results from executing the specified query.</source>
          <target state="translated">지정된 쿼리를 실행한 결과 값입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Linq.IQueryProvider&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.ToString">
          <source>Returns a string that represents the table.</source>
          <target state="translated">테이블을 나타내는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.Table`1.ToString">
          <source>A string representation of the table.</source>
          <target state="translated">테이블의 문자열 표현입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>