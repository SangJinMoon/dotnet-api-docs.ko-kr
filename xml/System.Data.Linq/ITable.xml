<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ITable.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f9d98f1ba77807707cbdd540c70ee9ea706981ed.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9d98f1ba77807707cbdd540c70ee9ea706981ed</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.ITable">
          <source>Used for weakly typed query scenarios.</source>
          <target state="translated">약한 형식의 쿼리 시나리오에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.ITable">
          <source>For more information about methods, see <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph>.</source>
          <target state="translated">메서드에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Data.Linq.Table%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.ITable">
          <source>Allows deserialized entities to be associated with a new instance of a <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> so that they can be updated or deleted from the database.</source>
          <target state="translated">deserialize된 엔터티를 업데이트하거나 데이터베이스에서 삭제할 수 있도록 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>의 새 인스턴스와 연결합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.ITable">
          <source>For more information about how to use this method, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.ITable">
          <source>If a required member is missing, a <ph id="ph1">&lt;xref:System.Data.Linq.ChangeConflictException&gt;</ph> is thrown during <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>.</source>
          <target state="translated">필수 구성원을 사용할 수 없는 경우는 <ph id="ph1">&lt;xref:System.Data.Linq.ChangeConflictException&gt;</ph> 하는 동안 발생 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object)">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in an unmodified state.</source>
          <target state="translated">엔터티를 수정되지 않은 상태로 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.Attach(System.Object)">
          <source>For more information about how to use this method, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
          <source>The collection of entities.</source>
          <target state="translated">엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attach the entities as modified.</source>
          <target state="translated">수정된 상태로 엔터티를 연결하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
          <source>For more information about how to use this method, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
          <source>The entity to be attached.</source>
          <target state="translated">연결할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
          <source>An instance of the same entity type with data members that contain the original values.</source>
          <target state="translated">원래 값이 들어 있는 데이터 멤버와 엔터티 형식이 같은 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
          <source>Attaches an entity to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state by specifying both the entity and its original state.</source>
          <target state="translated">엔터티 및 원래 상태를 모두 지정하여 엔터티를 수정되거나 수정되지 않은 상태로 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
          <source>For more information about how to use this method, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.ITable">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
          <source>The collection of entities.</source>
          <target state="translated">엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
          <source>For more information about how to use this method, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>The collection of entities.</source>
          <target state="translated">엔터티의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attach the entities as modified.</source>
          <target state="translated">수정된 상태로 엔터티를 연결하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>Attaches all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in either a modified or unmodified state.</source>
          <target state="translated">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 연결합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
          <source>For more information about how to use this method, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서<ept id="p1">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.ITable.Context">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> that has been used to retrieve this <ph id="ph2">&lt;see cref="T:System.Data.Linq.ITable" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>을 검색하는 데 사용된 <ph id="ph2">&lt;see cref="T:System.Data.Linq.ITable" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.ITable.Context">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> used to retrieve the <ph id="ph2">&lt;see cref="T:System.Data.Linq.ITable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>을 검색하는 데 사용되는 <ph id="ph2">&lt;see cref="T:System.Data.Linq.ITable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>The collection from which all items are removed.</source>
          <target state="translated">모든 항목을 제거할 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>Puts all entities from the collection into a <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
          <source>Call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> to perform the actual deletion in the database.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 는 데이터베이스에서 실제로 삭제를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
          <source>The entity to be removed.</source>
          <target state="translated">제거할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
          <source>Puts an entity from this table into a <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> state.</source>
          <target state="translated">이 테이블의 엔터티를 <ph id="ph1">&lt;see langword="pending delete" /&gt;</ph> 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
          <source>Disconnected entities must be attached before they can be deleted.</source>
          <target state="translated">연결 되지 않은 엔터티를 삭제 하려면 먼저 연결 해야 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> to perform the actual deletion in the database.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 는 데이터베이스에서 실제로 삭제를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
          <source>The entity from which to get the array.</source>
          <target state="translated">배열을 가져올 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
          <source>Returns an array of modified members that contain their current and original values.</source>
          <target state="translated">현재 값과 원래 값이 들어 있는 수정된 멤버의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>The entity whose original value is to be retrieved.</source>
          <target state="translated">원래 값을 검색할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>Retrieves original values.</source>
          <target state="translated">원래 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>A copy of the original entity.</source>
          <target state="translated">원래 엔터티의 복사본입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>The value is null if the entity passed in is not tracked.</source>
          <target state="translated">전달된 엔터티가 추적되지 않는 경우에는 값이 null입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>Disconnected entities sent back by a client must be attached before the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> can begin to track their state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에서 해당 상태를 추적하려면 클라이언트가 다시 보낸 연결이 끊긴 엔터티를 먼저 연결해야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>The "original state" of a newly attached entity is established based on values supplied by the client.</source>
          <target state="translated">새로 연결된 엔터티의 "원래 상태"는 클라이언트가 제공한 값에 따라 구성됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>The data context does not track the state of disconnected entities.</source>
          <target state="translated">데이터 컨텍스트에서는 연결이 끊긴 엔터티의 상태를 추적하지 않습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>Note the following:</source>
          <target state="translated">다음 사항에 유의하십시오.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>The entity argument must be non-null.</source>
          <target state="translated">엔터티 인수에는 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>Otherwise, a null argument exception is thrown.</source>
          <target state="translated">그렇지 않으면 null 인수 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>In the case of the strongly typed (<ph id="ph1">`TEntity`</ph>) method, the type must be mapped and must be an entity type.</source>
          <target state="translated">강력한 형식의 경우 (<ph id="ph1">`TEntity`</ph>) 메서드를 종류 매핑되어야 하며 엔터티 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>That is, it must have object ID information in its mapping.</source>
          <target state="translated">즉, 개체 ID 정보가 매핑도에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
          <source>Otherwise, a wrong type exception is thrown.</source>
          <target state="translated">이렇게 하지 않으면 잘못 된 형식 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>The entities to add.</source>
          <target state="translated">추가할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>Adds all entities of a collection to the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> in a <ph id="ph2">&lt;see langword="pending insert" /&gt;</ph> state.</source>
          <target state="translated">컬렉션의 모든 엔터티를 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>에 <ph id="ph2">&lt;see langword="pending insert" /&gt;</ph> 상태로 추가합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
          <source>Call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> to perform the actual insertion into the database.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 를 데이터베이스에 실제로 삽입을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
          <source>The entity to be added.</source>
          <target state="translated">추가할 엔터티입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
          <source>Adds an entity in a <ph id="ph1">&lt;see langword="pending insert" /&gt;</ph> state to this table.</source>
          <target state="translated">이 테이블에 엔터티를 <ph id="ph1">&lt;see langword="pending insert" /&gt;</ph> 상태로 추가합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> to perform the actual insertion into the database.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 를 데이터베이스에 실제로 삽입을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.ITable.IsReadOnly">
          <source>Indicates if the type of the entities contained in this <ph id="ph1">&lt;see cref="T:System.Data.Linq.ITable" /&gt;</ph> instance has a primary key.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Data.Linq.ITable" /&gt;</ph> 인스턴스에 포함된 엔터티의 형식에 기본 키가 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.ITable.IsReadOnly">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the entity type does not have a primary key; otherwise, false.</source>
          <target state="translated">엔터티 형식에 기본 키가 없으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 반환하고, 있으면 false를 반환합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>