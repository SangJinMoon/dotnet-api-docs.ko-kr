<Type Name="ITable" FullName="System.Data.Linq.ITable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9d98f1ba77807707cbdd540c70ee9ea706981ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30388837" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ITable : System.Collections.IEnumerable, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITable implements class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ITable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITable&#xA;Implements IEnumerable, IQueryable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITable : System::Collections::IEnumerable, System::Linq::IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="3a503-101">약한 형식의 쿼리 시나리오에 사용됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3a503-101">Used for weakly typed query scenarios.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-102">메서드에 대 한 자세한 내용은 참조 하십시오. <xref:System.Data.Linq.Table%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-102">For more information about methods, see <xref:System.Data.Linq.Table%601>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3a503-103">deserialize된 엔터티를 업데이트하거나 데이터베이스에서 삭제할 수 있도록 <see cref="T:System.Data.Linq.DataContext" />의 새 인스턴스와 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-103">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-104">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-104">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="3a503-105">필수 구성원을 사용할 수 없는 경우는 <xref:System.Data.Linq.ChangeConflictException> 하는 동안 발생 <xref:System.Data.Linq.DataContext.SubmitChanges%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-105">If a required member is missing, a <xref:System.Data.Linq.ChangeConflictException> is thrown during <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-106">연결할 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-106">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-107">엔터티를 수정되지 않은 상태로 <see cref="T:System.Data.Linq.DataContext" />에 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-107">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-108">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-108">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-109">엔터티의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-109">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="3a503-110">수정된 상태로 엔터티를 연결하려면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-110">
              <see langword="true" /> to attach the entities as modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-111">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <see cref="T:System.Data.Linq.DataContext" />에 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-111">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-112">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-112">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object, original As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity, System::Object ^ original);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-113">연결할 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-113">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="3a503-114">원래 값이 들어 있는 데이터 멤버와 엔터티 형식이 같은 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-114">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-115">엔터티 및 원래 상태를 모두 지정하여 엔터티를 수정되거나 수정되지 않은 상태로 <see cref="T:System.Data.Linq.DataContext" />에 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-115">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-116">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-116">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3a503-117">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <see cref="T:System.Data.Linq.DataContext" />에 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-117">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="3a503-118">엔터티의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-118">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-119">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <see cref="T:System.Data.Linq.DataContext" />에 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-119">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-120">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-120">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll">
      <MemberSignature Language="C#" Value="public void AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll (entities As IEnumerable, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachAll(System::Collections::IEnumerable ^ entities, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="3a503-121">엔터티의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-121">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="3a503-122">수정된 상태로 엔터티를 연결하려면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-122">
              <see langword="true" /> to attach the entities as modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-123">컬렉션의 모든 항목을 수정되었거나 수정되지 않은 상태의 <see cref="T:System.Data.Linq.DataContext" />에 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-123">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-124">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-124">For more information about how to use this method, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3a503-125">이 <see cref="T:System.Data.Linq.DataContext" />을 검색하는 데 사용된 <see cref="T:System.Data.Linq.ITable" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-125">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.ITable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3a503-126">
            <see cref="T:System.Data.Linq.DataContext" />을 검색하는 데 사용되는 <see cref="T:System.Data.Linq.ITable" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-126">The <see cref="T:System.Data.Linq.DataContext" /> used to retrieve the <see cref="T:System.Data.Linq.ITable" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="3a503-127">모든 항목을 제거할 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-127">The collection from which all items are removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-128">컬렉션의 모든 엔터티를 <see langword="pending delete" /> 상태로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-128">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-129">호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 는 데이터베이스에서 실제로 삭제를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-129">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-130">제거할 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-130">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-131">이 테이블의 엔터티를 <see langword="pending delete" /> 상태로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-131">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-132">연결 되지 않은 엔터티를 삭제 하려면 먼저 연결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-132">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="3a503-133">호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 는 데이터베이스에서 실제로 삭제를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-133">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual deletion in the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-134">배열을 가져올 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-134">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-135">현재 값과 원래 값이 들어 있는 수정된 멤버의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-135">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public object GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOriginalEntityState(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-136">원래 값을 검색할 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-136">The entity whose original value is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-137">원래 값을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-137">Retrieves original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a503-138">원래 엔터티의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-138">A copy of the original entity.</span>
          </span>
          <span data-ttu-id="3a503-139">전달된 엔터티가 추적되지 않는 경우에는 값이 null입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-139">The value is null if the entity passed in is not tracked.</span>
          </span>
          <span data-ttu-id="3a503-140">
            <see cref="T:System.Data.Linq.DataContext" />에서 해당 상태를 추적하려면 클라이언트가 다시 보낸 연결이 끊긴 엔터티를 먼저 연결해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-140">Disconnected entities sent back by a client must be attached before the <see cref="T:System.Data.Linq.DataContext" /> can begin to track their state.</span>
          </span>
          <span data-ttu-id="3a503-141">새로 연결된 엔터티의 "원래 상태"는 클라이언트가 제공한 값에 따라 구성됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-141">The "original state" of a newly attached entity is established based on values supplied by the client.</span>
          </span>
          <span data-ttu-id="3a503-142">데이터 컨텍스트에서는 연결이 끊긴 엔터티의 상태를 추적하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-142">The data context does not track the state of disconnected entities.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-143">다음 사항에 유의하십시오.</span><span class="sxs-lookup"><span data-stu-id="3a503-143">Note the following:</span></span>  
  
-   <span data-ttu-id="3a503-144">엔터티 인수에는 null 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-144">The entity argument must be non-null.</span></span> <span data-ttu-id="3a503-145">그렇지 않으면 null 인수 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-145">Otherwise, a null argument exception is thrown.</span></span>  
  
-   <span data-ttu-id="3a503-146">강력한 형식의 경우 (`TEntity`) 메서드를 종류 매핑되어야 하며 엔터티 형식 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-146">In the case of the strongly typed (`TEntity`) method, the type must be mapped and must be an entity type.</span></span> <span data-ttu-id="3a503-147">즉, 개체 ID 정보가 매핑도에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-147">That is, it must have object ID information in its mapping.</span></span> <span data-ttu-id="3a503-148">이렇게 하지 않으면 잘못 된 형식 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-148">Otherwise, a wrong type exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit (entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAllOnSubmit(System::Collections::IEnumerable ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="3a503-149">추가할 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-149">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-150">컬렉션의 모든 엔터티를 <see cref="T:System.Data.Linq.DataContext" />에 <see langword="pending insert" /> 상태로 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-150">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-151">호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 를 데이터베이스에 실제로 삽입을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-151">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="3a503-152">추가할 엔터티입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-152">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a503-153">이 테이블에 엔터티를 <see langword="pending insert" /> 상태로 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-153">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a503-154">호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 를 데이터베이스에 실제로 삽입을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a503-154">Call <xref:System.Data.Linq.DataContext.SubmitChanges%2A> to perform the actual insertion into the database.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ITable.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3a503-155">이 <see cref="T:System.Data.Linq.ITable" /> 인스턴스에 포함된 엔터티의 형식에 기본 키가 있는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-155">Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.ITable" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3a503-156">엔터티 형식에 기본 키가 없으면 <see langword="true" />를 반환하고, 있으면 false를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a503-156">Returns <see langword="true" /> if the entity type does not have a primary key; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>