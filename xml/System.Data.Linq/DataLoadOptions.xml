<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ad7f1-101">관련 데이터의 즉시 로드 및 필터링 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-101">Provides for immediate loading and filtering of related data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="ad7f1-102">일반</span><span class="sxs-lookup"><span data-stu-id="ad7f1-102">General</span></span>  
 <span data-ttu-id="ad7f1-103">개체를 쿼리하는 경우 실제로는 요청한 개체만 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="ad7f1-104">*관련* 개체는 동시에 자동으로 페치 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="ad7f1-105">(자세한 내용은 참조 [관계 간 쿼리](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span><span class="sxs-lookup"><span data-stu-id="ad7f1-105">(For more information, see [Querying Across Relationships](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span></span>  
  
 <span data-ttu-id="ad7f1-106"><xref:System.Data.Linq.DataLoadOptions> 클래스는 지정 된 관련된 데이터를 즉시 로드 하는 두 가지 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="ad7f1-107"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 메서드를 사용 하면 주 대상과 관련 된 데이터의 즉시 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="ad7f1-108"><xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> 관련된 개체를 필터링 하기 위한 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="ad7f1-109">규칙</span><span class="sxs-lookup"><span data-stu-id="ad7f1-109">Rules</span></span>  
 <span data-ttu-id="ad7f1-110">다음 규칙은 관련 항목 <xref:System.Data.Linq.DataLoadOptions> 사용:</span><span class="sxs-lookup"><span data-stu-id="ad7f1-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="ad7f1-111">할당 한 <xref:System.Data.Linq.DataLoadOptions> 에 <xref:System.Data.Linq.DataContext> 첫 번째 쿼리를 실행 한 후 예외를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="ad7f1-112">수정 된 <xref:System.Data.Linq.DataLoadOptions> 에 할당 된 이후에 <xref:System.Data.Linq.DataContext> 예외가 생성</span><span class="sxs-lookup"><span data-stu-id="ad7f1-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="ad7f1-113">순환 처리</span><span class="sxs-lookup"><span data-stu-id="ad7f1-113">Cycle Handling</span></span>  
 <span data-ttu-id="ad7f1-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 및 <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> 지시문 순환 되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="ad7f1-115">다음 이러한 그래프의 예를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="ad7f1-116">예제 1: 자체 재귀</span><span class="sxs-lookup"><span data-stu-id="ad7f1-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="ad7f1-117">예제 2: 백 포인터</span><span class="sxs-lookup"><span data-stu-id="ad7f1-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="ad7f1-118">예제 3: 긴 주기</span><span class="sxs-lookup"><span data-stu-id="ad7f1-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="ad7f1-119">이 올바른 정규화 된 모델에서 발생 하지 않습니다 이지만 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="ad7f1-120">예제 4: 자체 재귀적 하위 쿼리</span><span class="sxs-lookup"><span data-stu-id="ad7f1-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="ad7f1-121">예 5: 긴 재귀적 하위 쿼리</span><span class="sxs-lookup"><span data-stu-id="ad7f1-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="ad7f1-122">다음은 수 있는 몇 가지 일반 규칙 이러한 시나리오에서 발생 하는 상황을 이해 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="ad7f1-123">**LoadWith** 를 호출할 때마다 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 주기를 그래프에 도입 된 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="ad7f1-124">있는 경우, 예 1과 같이 2 및 3, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="ad7f1-125">**위해 AssociateWith** 런타임 시 엔진 관계 식 내에 기존 하위 쿼리 절 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="ad7f1-126">예제 4에서는 `Where` 절이 모두에 대해 실행 `A`, 뿐 아니라에서 하위 필터링 하위 쿼리 식 자체 (되는 재귀)</span><span class="sxs-lookup"><span data-stu-id="ad7f1-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="ad7f1-127">예제 5에서 첫 번째 `Where` 절 모두에 적용 되는 `B`에 하위 쿼리는 있지만 `B`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="ad7f1-128">두 번째 `Where` 절 모두에 적용 되는 `A`에 없는 경우에 s subqueries `A`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7f1-129">검색할 때 `Customers` Northwind 샘플 데이터베이스에서 사용할 수 있습니다 <xref:System.Data.Linq.DataLoadOptions> 되도록 지정 하려면 `Orders` 을 검색할 수 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="ad7f1-130">하위 집합을 지정 해도 `Orders` 를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7f1-131"><see cref="T:System.Data.Linq.DataLoadOptions" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="ad7f1-132">특정 일대다 필드 또는 속성에 사용할 쿼리를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-132">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="ad7f1-133">다음 사항에 유의하십시오.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-133">Note the following:</span></span>  
  
 <span data-ttu-id="ad7f1-134">식이 일대다 관계를 나타내는 필드 또는 속성으로 시작되지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="ad7f1-135">유효한 연산자가 아닌 연산자가 식에 나타나면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="ad7f1-136">유효한 연산자는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-136">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="ad7f1-137">위치</span><span class="sxs-lookup"><span data-stu-id="ad7f1-137">Where</span></span>  
  
 <span data-ttu-id="ad7f1-138">OrderBy</span><span class="sxs-lookup"><span data-stu-id="ad7f1-138">OrderBy</span></span>  
  
 <span data-ttu-id="ad7f1-139">ThenBy</span><span class="sxs-lookup"><span data-stu-id="ad7f1-139">ThenBy</span></span>  
  
 <span data-ttu-id="ad7f1-140">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="ad7f1-140">OrderByDescending</span></span>  
  
 <span data-ttu-id="ad7f1-141">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="ad7f1-141">ThenByDescending</span></span>  
  
 <span data-ttu-id="ad7f1-142">Take</span><span class="sxs-lookup"><span data-stu-id="ad7f1-142">Take</span></span></param>
        <summary><span data-ttu-id="ad7f1-143">특정 관계에 대해 검색한 개체를 필터링합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-143">Filters the objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7f1-144">다음 예제에서는 내부 루프는 대해서만 반복 `Orders` 오늘 선적 되지 않은입니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad7f1-145">쿼리 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-145">The type that is queried against.</span></span>  
  
 <span data-ttu-id="ad7f1-146">형식이 매핑되지 않은 경우 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-146">If the type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="ad7f1-147">특정 일대다 필드 또는 속성에 사용할 쿼리를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-147">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="ad7f1-148">다음 사항에 유의하십시오.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-148">Note the following:</span></span>  
  
 <span data-ttu-id="ad7f1-149">식이 일대다 관계를 나타내는 필드 또는 속성으로 시작되지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="ad7f1-150">유효한 연산자가 아닌 연산자가 식에 나타나면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="ad7f1-151">유효한 연산자는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-151">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="ad7f1-152">위치</span><span class="sxs-lookup"><span data-stu-id="ad7f1-152">Where</span></span>  
  
 <span data-ttu-id="ad7f1-153">OrderBy</span><span class="sxs-lookup"><span data-stu-id="ad7f1-153">OrderBy</span></span>  
  
 <span data-ttu-id="ad7f1-154">ThenBy</span><span class="sxs-lookup"><span data-stu-id="ad7f1-154">ThenBy</span></span>  
  
 <span data-ttu-id="ad7f1-155">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="ad7f1-155">OrderByDescending</span></span>  
  
 <span data-ttu-id="ad7f1-156">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="ad7f1-156">ThenByDescending</span></span>  
  
 <span data-ttu-id="ad7f1-157">Take</span><span class="sxs-lookup"><span data-stu-id="ad7f1-157">Take</span></span></param>
        <summary><span data-ttu-id="ad7f1-158">특정 관계에 대해 검색한 개체를 필터링합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-158">Filters objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7f1-159">주기를 방지 하는 방법에 대 한 정보를 참조 하십시오. <xref:System.Data.Linq.DataLoadOptions>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7f1-160">다음 예제에서는 내부 루프는 대해서만 반복 `Orders` 오늘 선적 되지 않은입니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="ad7f1-161">관련 자료를 식별하는 람다 식입니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-161">A lambda expression that identifies the related material.</span></span></param>
        <summary><span data-ttu-id="ad7f1-162">람다 식을 사용하여 주 대상에 관련된 지정된 데이터를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-162">Retrieves specified data related to the main target by using a lambda expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7f1-163">다음 예제에서 쿼리를 실행하면 런던에 살고 있는 모든 `Orders`에 대한 모든 `Customers`가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="ad7f1-164">따라서 이후에 `Orders` 개체의 `Customer` 속성에 액세스해도 새 데이터베이스 쿼리가 트리거되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="ad7f1-165">쿼리 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-165">Type that is queried against.</span></span>  
  
 <span data-ttu-id="ad7f1-166">이 형식이 매핑되지 않은 경우 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-166">If this type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="ad7f1-167">검색할 필드 또는 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-167">Identifies the field or property to be retrieved.</span></span>  
  
 <span data-ttu-id="ad7f1-168">식이 일대일 또는 일대다 관계를 나타내는 필드 또는 속성을 식별하지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span></span></param>
        <summary><span data-ttu-id="ad7f1-169">T 형식의 개체에 대한 쿼리가 전송될 때 검색되는 하위 개체를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7f1-170">로드 하는 두 가지 수준의 관계를 지정할 수 없습니다 (예를 들어 `Orders.OrderDetails`).</span><span class="sxs-lookup"><span data-stu-id="ad7f1-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="ad7f1-171">이러한 시나리오에서는 두 개의 별도 반드시 지정 해야 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="ad7f1-172">순환를 방지 하려면 설명 부분 참조 섹션 <xref:System.Data.Linq.DataLoadOptions>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7f1-173">다음 예제에서 쿼리를 실행하면 런던에 살고 있는 모든 `Orders`에 대한 모든 `Customers`가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="ad7f1-174">따라서 이후에 `Orders` 개체의 `Customer` 속성에 액세스해도 새 데이터베이스 쿼리가 트리거되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad7f1-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>