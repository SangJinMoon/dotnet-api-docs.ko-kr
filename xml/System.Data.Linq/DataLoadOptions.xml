<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DataLoadOptions.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac596d0a9b25df23c8e50f076be3f0b33ceaf0820c2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96d0a9b25df23c8e50f076be3f0b33ceaf0820c2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Provides for immediate loading and filtering of related data.</source>
          <target state="translated">관련 데이터의 즉시 로드 및 필터링 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>General</source>
          <target state="translated">일반</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>When you query for an object, you actually retrieve only the object you requested.</source>
          <target state="translated">개체를 쿼리하는 경우 실제로는 요청한 개체만 검색합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The <bpt id="p1">*</bpt>related<ept id="p1">*</ept> objects are not automatically fetched at the same time.</source>
          <target state="translated"><bpt id="p1">*</bpt>관련<ept id="p1">*</ept> 개체는 동시에 자동으로 페치 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>(For more information, see <bpt id="p1">[</bpt>Querying Across Relationships<ept id="p1">](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md)</ept>.)</source>
          <target state="translated">(자세한 내용은 참조 <bpt id="p1">[</bpt>관계 간 쿼리<ept id="p1">](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> class provides two methods to achieve immediate loading of specified related data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> 클래스는 지정 된 관련된 데이터를 즉시 로드 하는 두 가지 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> method allows for immediate loading of data related to the main target.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> 메서드를 사용 하면 주 대상과 관련 된 데이터의 즉시 로드 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt;</ph> method allows for filtering related objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt;</ph> 관련된 개체를 필터링 하기 위한 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Rules</source>
          <target state="translated">규칙</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Note the following rules regarding <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> usage:</source>
          <target state="translated">다음 규칙은 관련 항목 <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> 사용:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Assigning a <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> to a <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> after the first query has been executed generates an exception.</source>
          <target state="translated">할당 한 <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 첫 번째 쿼리를 실행 한 후 예외를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Modifying a <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> after it has been assigned to a <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> generates an exception</source>
          <target state="translated">수정 된 <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> 에 할당 된 이후에 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 예외가 생성</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Cycle Handling</source>
          <target state="translated">순환 처리</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt;</ph> directives must not create cycles.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt;</ph> 지시문 순환 되지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The following represent examples of such graphs:</source>
          <target state="translated">다음 이러한 그래프의 예를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Example 1: Self recursive</source>
          <target state="translated">예제 1: 자체 재귀</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Example 2: Back-pointers</source>
          <target state="translated">예제 2: 백 포인터</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Example 3: Longer cycles</source>
          <target state="translated">예제 3: 긴 주기</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Although this should not occur in a well-normalized model, it is possible.</source>
          <target state="translated">이 올바른 정규화 된 모델에서 발생 하지 않습니다 이지만 가능 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Example 4: Self recursive subQueries</source>
          <target state="translated">예제 4: 자체 재귀적 하위 쿼리</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>Example 5: Longer recursive subqueries</source>
          <target state="translated">예 5: 긴 재귀적 하위 쿼리</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The following are some general rules that help you understand what occurs in these scenarios.</source>
          <target state="translated">다음은 수 있는 몇 가지 일반 규칙 이러한 시나리오에서 발생 하는 상황을 이해 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source><bpt id="p1">**</bpt>LoadWith<ept id="p1">**</ept> Each call to <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> checks whether cycles have been introduced into the graph.</source>
          <target state="translated"><bpt id="p1">**</bpt>LoadWith<ept id="p1">**</ept> 를 호출할 때마다 <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> 주기를 그래프에 도입 된 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>If there are, as in Examples 1, 2, and 3, an exception is thrown.</source>
          <target state="translated">있는 경우, 예 1과 같이 2 및 3, 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source><bpt id="p1">**</bpt>AssociateWith<ept id="p1">**</ept> The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</source>
          <target state="translated"><bpt id="p1">**</bpt>위해 AssociateWith<ept id="p1">**</ept> 런타임 시 엔진 관계 식 내에 기존 하위 쿼리 절 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>In Example 4, the <ph id="ph1">`Where`</ph> clause is executed against all <ph id="ph2">`A`</ph>, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</source>
          <target state="translated">예제 4에서는 <ph id="ph1">`Where`</ph> 절이 모두에 대해 실행 <ph id="ph2">`A`</ph>, 뿐 아니라에서 하위 필터링 하위 쿼리 식 자체 (되는 재귀)</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>In Example 5, the first <ph id="ph1">`Where`</ph> clause is applied to all the <ph id="ph2">`B`</ph>s, even though there are subqueries on <ph id="ph3">`B`</ph>.</source>
          <target state="translated">예제 5에서 첫 번째 <ph id="ph1">`Where`</ph> 절 모두에 적용 되는 <ph id="ph2">`B`</ph>에 하위 쿼리는 있지만 <ph id="ph3">`B`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>The second <ph id="ph1">`Where`</ph> clause is applied to all the <ph id="ph2">`A`</ph>s even though there are subqueries on <ph id="ph3">`A`</ph>.</source>
          <target state="translated">두 번째 <ph id="ph1">`Where`</ph> 절 모두에 적용 되는 <ph id="ph2">`A`</ph>에 없는 경우에 s subqueries <ph id="ph3">`A`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>When you retrieve <ph id="ph1">`Customers`</ph> from the Northwind sample database, you can use <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> to specify that <ph id="ph3">`Orders`</ph> is also to be retrieved.</source>
          <target state="translated">검색할 때 <ph id="ph1">`Customers`</ph> Northwind 샘플 데이터베이스에서 사용할 수 있습니다 <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> 되도록 지정 하려면 <ph id="ph3">`Orders`</ph> 을 검색할 수 이기도 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataLoadOptions">
          <source>You can even specify which subset of <ph id="ph1">`Orders`</ph> to retrieve.</source>
          <target state="translated">하위 집합을 지정 해도 <ph id="ph1">`Orders`</ph> 를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataLoadOptions" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Linq.DataLoadOptions" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>Identifies the query to be used on a particular one-to-many field or property.</source>
          <target state="translated">특정 일대다 필드 또는 속성에 사용할 쿼리를 식별합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>Note the following:</source>
          <target state="translated">다음 사항에 유의하십시오.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</source>
          <target state="translated">식이 일대다 관계를 나타내는 필드 또는 속성으로 시작되지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>If an operator other than a valid operator appears in the expression, an exception is thrown.</source>
          <target state="translated">유효한 연산자가 아닌 연산자가 식에 나타나면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>Valid operators are as follows:</source>
          <target state="translated">유효한 연산자는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>Where</source>
          <target state="translated">위치</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>OrderBy</source>
          <target state="translated">OrderBy</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>ThenBy</source>
          <target state="translated">ThenBy</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>OrderByDescending</source>
          <target state="translated">OrderByDescending</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>ThenByDescending</source>
          <target state="translated">ThenByDescending</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>Take</source>
          <target state="translated">Take</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>Filters the objects retrieved for a particular relationship.</source>
          <target state="translated">특정 관계에 대해 검색한 개체를 필터링합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
          <source>In the following example, the inner loop iterates only over those <ph id="ph1">`Orders`</ph> that have not been shipped today.</source>
          <target state="translated">다음 예제에서는 내부 루프는 대해서만 반복 <ph id="ph1">`Orders`</ph> 오늘 선적 되지 않은입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>The type that is queried against.</source>
          <target state="translated">쿼리 대상 형식입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>If the type is unmapped, an exception is thrown.</source>
          <target state="translated">형식이 매핑되지 않은 경우 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Identifies the query to be used on a particular one-to-many field or property.</source>
          <target state="translated">특정 일대다 필드 또는 속성에 사용할 쿼리를 식별합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Note the following:</source>
          <target state="translated">다음 사항에 유의하십시오.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</source>
          <target state="translated">식이 일대다 관계를 나타내는 필드 또는 속성으로 시작되지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>If an operator other than a valid operator appears in the expression, an exception is thrown.</source>
          <target state="translated">유효한 연산자가 아닌 연산자가 식에 나타나면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Valid operators are as follows:</source>
          <target state="translated">유효한 연산자는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Where</source>
          <target state="translated">위치</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>OrderBy</source>
          <target state="translated">OrderBy</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>ThenBy</source>
          <target state="translated">ThenBy</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>OrderByDescending</source>
          <target state="translated">OrderByDescending</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>ThenByDescending</source>
          <target state="translated">ThenByDescending</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Take</source>
          <target state="translated">Take</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Filters objects retrieved for a particular relationship.</source>
          <target state="translated">특정 관계에 대해 검색한 개체를 필터링합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>For information about how to avoid cycles, see <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph>.</source>
          <target state="translated">주기를 방지 하는 방법에 대 한 정보를 참조 하십시오. <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>In the following example, the inner loop iterates only over those <ph id="ph1">`Orders`</ph> that have not been shipped today.</source>
          <target state="translated">다음 예제에서는 내부 루프는 대해서만 반복 <ph id="ph1">`Orders`</ph> 오늘 선적 되지 않은입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
          <source>A lambda expression that identifies the related material.</source>
          <target state="translated">관련 자료를 식별하는 람다 식입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
          <source>Retrieves specified data related to the main target by using a lambda expression.</source>
          <target state="translated">람다 식을 사용하여 주 대상에 관련된 지정된 데이터를 검색합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
          <source>In the following example, all the <ph id="ph1">`Orders`</ph> for all the <ph id="ph2">`Customers`</ph> who are located in London are retrieved when the query is executed.</source>
          <target state="translated">다음 예제에서 쿼리를 실행하면 런던에 살고 있는 모든 <ph id="ph1">`Orders`</ph>에 대한 모든 <ph id="ph2">`Customers`</ph>가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
          <source>As a result, successive access to the <ph id="ph1">`Orders`</ph> property on a <ph id="ph2">`Customer`</ph> object does not trigger a new database query.</source>
          <target state="translated">따라서 이후에 <ph id="ph1">`Orders`</ph> 개체의 <ph id="ph2">`Customer`</ph> 속성에 액세스해도 새 데이터베이스 쿼리가 트리거되지 않습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Type that is queried against.</source>
          <target state="translated">쿼리 대상 형식입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>If this type is unmapped, an exception is thrown.</source>
          <target state="translated">이 형식이 매핑되지 않은 경우 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Identifies the field or property to be retrieved.</source>
          <target state="translated">검색할 필드 또는 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</source>
          <target state="translated">식이 일대일 또는 일대다 관계를 나타내는 필드 또는 속성을 식별하지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</source>
          <target state="translated">T 형식의 개체에 대한 쿼리가 전송될 때 검색되는 하위 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>You cannot specify the loading of two levels of relationships (for example, <ph id="ph1">`Orders.OrderDetails`</ph>).</source>
          <target state="translated">로드 하는 두 가지 수준의 관계를 지정할 수 없습니다 (예를 들어 <ph id="ph1">`Orders.OrderDetails`</ph>).</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>In these scenarios you must specify two separate <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> methods.</source>
          <target state="translated">이러한 시나리오에서는 두 개의 별도 반드시 지정 해야 <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>To avoid cycling, see Remarks section in <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph>.</source>
          <target state="translated">순환를 방지 하려면 설명 부분 참조 섹션 <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>In the following example, all the <ph id="ph1">`Orders`</ph> for all the <ph id="ph2">`Customers`</ph> who are located in London are retrieved when the query is executed.</source>
          <target state="translated">다음 예제에서 쿼리를 실행하면 런던에 살고 있는 모든 <ph id="ph1">`Orders`</ph>에 대한 모든 <ph id="ph2">`Customers`</ph>가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
          <source>As a result, successive access to the <ph id="ph1">`Orders`</ph> property on a <ph id="ph2">`Customer`</ph> object does not trigger a new database query.</source>
          <target state="translated">따라서 이후에 <ph id="ph1">`Orders`</ph> 개체의 <ph id="ph2">`Customer`</ph> 속성에 액세스해도 새 데이터베이스 쿼리가 트리거되지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>