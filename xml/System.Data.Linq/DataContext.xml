<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DataContext.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56cbfb225f9d8295e7bf1faa0cef5897f808b990c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cbfb225f9d8295e7bf1faa0cef5897f808b990c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>Represents the main entry point for the LINQ to SQL framework.</source>
          
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is the source of all entities mapped over a database connection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 매핑된 데이터베이스 연결을 통해 모든 엔터티의의 원본인 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>It tracks changes that you made to all retrieved entities and maintains an "identity cache" that guarantees that entities retrieved more than one time are represented by using the same object instance.</source>
          <target state="translated">검색 된 모든 엔터티에 대 한 변경 내용을 추적 하 고 여러 번 검색 된 엔터티 보증으로 표현 되는 "id 캐시" 유지 관리 동일한 개체 인스턴스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>In general, a <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> instance is designed to last for one "unit of work" however your application defines that term.</source>
          <target state="translated">그러나 일반적으로 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 인스턴스는 하나의 "작업 단위"에 대 한 마지막 응용 프로그램에서 해당 용어를 정의 하는 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>A <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is lightweight and is not expensive to create.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 간단 하며 만들려면 비용이 많이 들지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>A typical <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> application creates <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> instances at method scope or as a member of short-lived classes that represent a logical set of related database operations.</source>
          <target state="translated">일반적인 <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 응용 프로그램이 만드는 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 메서드 범위에서 또는의 논리 집합을 나타내는 수명이 짧은 클래스의 멤버로 인스턴스 관련 데이터베이스 작업입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>The connection string you use can be an ADO.NET connection string.</source>
          
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>You can also specify a filename to a SQL Server Express or SQL Server Compact file.</source>
          
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>The connection used by the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class by referencing the connection used by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>A <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> opens and closes a database connection as needed if you provide a closed connection or a connection string.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 열고 닫힌된 연결 또는 연결 문자열을 제공 하는 경우 필요에 따라 데이터베이스 연결을 닫습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>In general, you should never have to call <ph id="ph1">`Dispose`</ph> on a <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">일반적으로 필요는 호출할 <ph id="ph1">`Dispose`</ph> 에 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>If you provide an open connection, the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> will not close it.</source>
          <target state="translated">열려 있는 연결을 제공 하는 경우는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 닫히지 것입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>Therefore, do not instantiate a <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> with an open connection unless you have a good reason to do this.</source>
          <target state="translated">따라서 인스턴스화할 수 없습니다는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 열린 연결으로이 작업을 수행 하는 좋은 이유가 없으면 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
          <source>In a <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> transaction, a <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> will not open or close a connection to avoid promotion.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> 트랜잭션에 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 열거나 승격이 발생 하지 않도록 하는 연결을 닫이 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
          <source>The connection used by the .NET Framework.</source>
          
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
          <source>A source for mapping.</source>
          
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class by referencing a connection and a mapping source.</source>
          
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>This argument can be any one of the following:</source>
          
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>The name of a file where a SQL Server Express database resides.</source>
          
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>The name of a server where a database is present.</source>
          
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>In this case the provider uses the default database for a user.</source>
          
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>A complete connection string.</source>
          
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> just passes the string to the provider without modification.</source>
          
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>A source for mapping.</source>
          
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class by referencing a file source and a mapping source.</source>
          
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class by referencing a file source.</source>
          
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.ChangeConflicts">
          <source>Gets a collection of objects that caused concurrency conflicts when <ph id="ph1">&lt;see cref="M:System.Data.Linq.DataContext.SubmitChanges" /&gt;</ph> was called.</source>
          
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ChangeConflicts">
          <source>A collection of objects that caused concurrency conflicts.</source>
          <target state="translated">동시성 충돌이 발생 한 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ChangeConflicts">
          <source>The following example shows how the collection can be iterated over to retrieve conflict information.</source>
          <target state="translated">다음 예제에서는 어떻게 컬렉션을 반복 하 충돌 정보 검색을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>Gets or sets a value that increases the time-out period for queries that would otherwise time out during the default time-out period.</source>
          
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>An integer value that increases the time-out period for queries that would otherwise time out during the default time-out period.</source>
          <target state="translated">기본 제한 시간 동안 시간이 초과 될 수 있는 쿼리에 대 한 제한 시간을 증가 하는 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>This property gets or sets the command time-out used to execute generated commands (<ph id="ph1">`IDbCommands`</ph>).</source>
          <target state="translated">이 속성 생성된 명령을 실행 하는 데 사용 하는 명령 제한 시간을 가져오거나 설정 합니다. (<ph id="ph1">`IDbCommands`</ph>).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Data.IDbCommand.CommandTimeout%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Data.IDbCommand.CommandTimeout%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>When this property is not set, the default value of <ph id="ph1">&lt;xref:System.Data.IDbCommand.CommandTimeout%2A&gt;</ph> is used for query command execution.</source>
          <target state="translated">이 속성이 설정 되지 않은 경우, 기본값인 <ph id="ph1">&lt;xref:System.Data.IDbCommand.CommandTimeout%2A&gt;</ph> 쿼리 명령 실행에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>This default value is set by the storage provider.</source>
          <target state="translated">기본 값이 저장소 공급자가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.CommandTimeout">
          <source>Note that some providers may throw exceptions if this value is set to a non-zero value.</source>
          <target state="translated">이 값은 0이 아닌 값으로 설정 하는 경우 일부 공급자가 예외를 throw 할 note 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.Connection">
          <source>Gets the connection used by the framework.</source>
          
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Connection">
          <source>The connection used by the framework.</source>
          <target state="translated">프레임 워크에서 사용 되는 연결 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Connection">
          <source>You can use this property to interoperate with relational ADO.NET code.</source>
          <target state="translated">관계형 ADO.NET 코드와 상호 운용 하도록이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Connection">
          <source>The returned connection will be closed unless it has been explicitly opened by the user.</source>
          <target state="translated">사용자가 명시적으로 열 렸 경우가 아니면 반환 된 연결을 닫습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>Creates a database on the server.</source>
          
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>The name of the database is derived by using the following algorithm:</source>
          <target state="translated">데이터베이스의 이름은 다음과 같은 알고리즘을 사용 하 여 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>If a database is identified in the connection string, its name is used.</source>
          <target state="translated">데이터베이스 연결 문자열에 식별 되 면 해당 이름이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>If a <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.DatabaseAttribute&gt;</ph> attribute is present, its <ph id="ph2">&lt;xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A&gt;</ph> property is used as the name of the database.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.DatabaseAttribute&gt;</ph> 특성이 있으면 해당 <ph id="ph2">&lt;xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A&gt;</ph> 속성은 데이터베이스의 이름으로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>If there is no database tag in the connection string and a strongly typed <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is used, a database that has the same name as the <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> inheriting class is checked.</source>
          <target state="translated">연결 문자열 및 강력한 형식의 데이터베이스 태그가 없는 경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 사용 하는 경우와 동일한 이름을 가진 데이터베이스는 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 클래스 상속을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>If a weakly typed <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is used, an exception is thrown.</source>
          <target state="translated">약한 형식화 경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 는 사용 하는 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>If the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> has been created by using a file name, the database corresponding to that file name is created.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 만든 파일 이름을 사용 하 여 해당 파일 이름에 해당 데이터베이스가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateDatabase">
          <source>The following code shows how to set up a temporary database and then remove it.</source>
          <target state="translated">다음 코드에는 임시 데이터베이스를 설정 하 고 제거 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The type of the elements in the returned collection.</source>
          <target state="translated">반환된 된 컬렉션에 있는 요소의 형식입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The instance of the method invocation (the current object).</source>
          
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that identifies the CLR method that corresponds to a database method.</source>
          
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The array of parameters to be passed to the command.</source>
          
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>Executes the table-valued database function associated with the specified CLR method.</source>
          
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>A collection of resultant values returned by the database query.</source>
          
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.CreateMethodCallQuery%2A&gt;</ph> method is used in automatically generated code and acts as a proxy to database functions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.CreateMethodCallQuery%2A&gt;</ph> 메서드 자동으로 생성 된 코드에 사용 되 고 데이터베이스 함수에 대 한 프록시 역할을 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.DatabaseExists">
          <source>Determines whether the associated database can be opened.</source>
          
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.DatabaseExists">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified database can be opened; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.DatabaseExists">
          <source>This method uses the connection in the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.Connection%2A&gt;</ph> property to attempt to open the associated database.</source>
          <target state="translated">연결을 사용 하 여이 메서드는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.Connection%2A&gt;</ph> 속성을 연결된 된 데이터베이스를 열려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.DatabaseExists">
          <source>The following example uses this method to determine whether a database already exists.</source>
          <target state="translated">다음 예제에서는이 메서드를 사용 하 여 데이터베이스가 이미 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>Gets or sets a value that indicates whether to delay-load one-to-many or one-to-one relationships.</source>
          
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if deferred loading is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 지연 된 로드를 사용 하면 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>When the code accesses one of these relationships, null is returned if the relationship is one-to-one, and an empty collection is returned if it is one-to-many.</source>
          <target state="translated">코드 null 이러한 관계 중 하나에 액세스할 때 관계는 한 일, 다를 경우에 빈 컬렉션이 반환 됩니다 하는 경우 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>The relationships can still be filled by setting the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.LoadOptions%2A&gt;</ph> property.</source>
          <target state="translated">관계 여전히 설정 하 여 채울 수는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.LoadOptions%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>The main scenario for this property is to enable you to extract a piece of the object model and send it out (for example, to a Web service).</source>
          <target state="translated">이 속성에 대 한 주요 시나리오는 개체 모델의 일부를 추출 하 고 (예를 들어 웹 서비스)에 보낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>If this property is set to <ph id="ph1">`false`</ph> after a query has been executed, an exception is thrown.</source>
          <target state="translated">이 속성은로 설정 하는 경우 <ph id="ph1">`false`</ph> 쿼리 실행 된 후 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>See the <bpt id="p1">**</bpt>Valid Modes<ept id="p1">**</ept> section below for more information.</source>
          <target state="translated">참조는 <bpt id="p1">**</bpt>유효한 모드<ept id="p1">**</ept> 자세한 내용은 아래 섹션.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>Valid modes</source>
          <target state="translated">사용할 수 있는 모드</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>Deferred loading requires object tracking.</source>
          <target state="translated">지연 된 로드 개체 추적이 필요합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>Only the following three modes are valid:</source>
          <target state="translated">다음 세 가지 모드에만 적용 하는 유효한은 같습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph> is ignored and inferred to be <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph> 무시 되 고 것으로 유추 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>This behavior corresponds to a read-only <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">이 문제는 읽기 전용에 해당 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>This situation corresponds to a <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> that allows users to load an object graph by using <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> directives, but it does not enable deferred loading.</source>
          <target state="translated">이 경우에 해당 하는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 를 사용 하 여 개체 그래프를 로드, 사용자가 허용 <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> 지시문 하지만 지연 된 로드를 사용 하지 않는 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>Both are set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">둘 다로 설정 된 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>This is the default.</source>
          <target state="translated">이 값이 기본값입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>The flags may not be changed after a query has been executed.</source>
          <target state="translated">쿼리를 실행 한 후 플래그를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
          <source>Any change after the execution of the first query that uses that <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> throws an exception.</source>
          <target state="translated">사용 하는 첫 번째 쿼리를 실행 한 후 모든 변경 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.DeleteDatabase">
          <source>Deletes the associated database.</source>
          
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.DeleteDatabase">
          <source>This method uses the connection in the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.Connection%2A&gt;</ph> property to identify the database to be deleted.</source>
          <target state="translated">연결을 사용 하 여이 메서드는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.Connection%2A&gt;</ph> 속성을 삭제할 데이터베이스를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.DeleteDatabase">
          <source>The following example shows how to delete a database that has been temporarily created.</source>
          <target state="translated">다음 예제에서는 일시적으로 작성 된 데이터베이스를 삭제 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> class and optionally releases the managed resource.</source>
          
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The SQL command to be executed.</source>
          
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The array of parameters to be passed to the command.</source>
          
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>Note the following behavior:</source>
          
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>If the array contains objects that are not referenced in the command string, no exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>If any one of the parameters is null, it is converted to <ph id="ph1">&lt;see langword="DBNull.Value" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>Executes SQL commands directly on the database.</source>
          
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The number of rows modified by the executed command.</source>
          
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>This method is a pass-through mechanism for cases where <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not adequately provide for a particular scenario.</source>
          <target state="translated">이 메서드는 사례에 대 한 통과 메커니즘 여기서 <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 특정 시나리오에 적절 하 게 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The syntax for the command is almost the same as the syntax used to create an ADO.NET <ph id="ph1">`DataCommand`</ph>.</source>
          <target state="translated">명령에 대 한 구문은 구문을 사용 하는 ADO.NET 만들어와 거의 동일 <ph id="ph1">`DataCommand`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The only difference is in how the parameters are specified.</source>
          <target state="translated">유일한 차이점은 매개 변수를 지정 하는 방법을입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>Specifically, you specify parameters by enclosing them in braces ({…}) and enumerate them starting from 0.</source>
          <target state="translated">중괄호 ({...})로 묶어 매개 변수를 지정 하 고 열거 하는 구체적으로, 0에서 시작 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The parameter is associated with the equally numbered object in the parameters array.</source>
          <target state="translated">매개 변수는 매개 변수 배열에 있는 동일 하 게 번호가 매겨진된 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source><ph id="ph1">`ExecuteQuery`</ph> and <ph id="ph2">`ExecuteCommand`</ph> allow you to specify a variable number of arguments for parameter substitution.</source>
          <target state="translated"><ph id="ph1">`ExecuteQuery`</ph> 및 <ph id="ph2">`ExecuteCommand`</ph> 가변 개수의 매개 변수 대체에 대 한 인수를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>For example, you can specify the parameters when invoking ExecuteQuery<ph id="ph1">\&lt;</ph>TResult&gt;:</source>
          <target state="translated">예를 들어 ExecuteQuery를 호출할 때 매개 변수에 지정할 수 있습니다<ph id="ph1">\&lt;</ph>TResult &gt;:</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>And, another example:</source>
          <target state="translated">그리고 또 다른 예.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
          <source>The following example opens a connection and passes a SQL <ph id="ph1">`UPDATE`</ph> command to the SQL engine.</source>
          <target state="translated">다음 예제에서는 연결을 열고 전달 SQL <ph id="ph1">`UPDATE`</ph> SQL 엔진에 명령 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
          <source>The entity to be deleted.</source>
          
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
          <source>Executes, inside delete override methods, to redelegate to <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> the task of generating and executing dynamic SQL for delete operations.</source>
          
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
          <source>See <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>The entity to be inserted.</source>
          
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>Executes, inside insert override methods, to redelegate to <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> the task of generating and executing dynamic SQL for insert operations.</source>
          
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>Note the following considerations:</source>
          <target state="translated">다음 사항을 note:</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>Because the method has a protected modifier, its use requires subclassing <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">서브클래싱 해야 사용할 메서드가 보호 된 한정자가 있으므로 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>An exception is thrown if this operation is not called inside a <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> operation.</source>
          <target state="translated">이 작업 내 호출 하지 않은 경우 예외가 throw 되는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 작업 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>It is not intended to be called as a stand-alone operation outside the scope of a <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> operation.</source>
          <target state="translated">범위 밖에 서 독립 실행형 작업으로 호출에 적합 하지 않습니다는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 작업 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> itself calls override methods if they are implemented and the previous methods are intended to be called inside the override methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 자체 호출 메서드를 재정의 구현 하 고 이전 메서드를 재정의 메서드 호출 하도록 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>It is the responsibility of the developer to pass in the correct entity.</source>
          <target state="translated">것은 올바른 엔터티를 전달 하는 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>The implementation verifies that the passed-in entity is tracked.</source>
          <target state="translated">구현에 전달 된 엔터티를 추적 하는 것을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>However, it is the responsibility of the developer to maintain the order or pass in the same entity two times.</source>
          <target state="translated">그러나 되기 순서 유지 관리 또는 두 번 동일한 엔터티를 전달 하는 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>It is the responsibility of the developer to invoke the correct dynamic API.</source>
          <target state="translated">것은 올바른 동적 API를 호출 하는 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>For example, in the <ph id="ph1">`Update`</ph> override method, only the <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A&gt;</ph> method can be called.</source>
          <target state="translated">예를 들어는 <ph id="ph1">`Update`</ph> 재정의 메서드에서 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A&gt;</ph> 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not detect or verify whether the invoked dynamic method matches the applicable operation.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph>에서는 호출된 동적 메서드가 적용 가능한 작업과 일치하는지 여부를 감지하거나 확인하지 않습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
          <source>The results are undefined if an inapplicable method is called (for example, calling <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A&gt;</ph> for an object to be updated).</source>
          <target state="translated">적용할 수 없는 메서드를 호출 하면 결과가 정의 되지 않습니다 (예를 들어 호출 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A&gt;</ph> 업데이트할 개체에 대 한).</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
          <source>The entity to be updated.</source>
          
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
          <source>Executes, inside update override methods, to redelegate to <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> the task of generating and executing dynamic SQL for update operations.</source>
          
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
          <source>See <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The instance of the method invocation (the current object).</source>
          
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>Identifies the CLR method that corresponds to a database method.</source>
          
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The array of parameters to be passed to the command.</source>
          
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>Executes the stored database procedure or scalar function associated with the specified CLR method.</source>
          
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The result (the return value and output parameters) of executing the specified method.</source>
          
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteMethodCall%2A&gt;</ph> method is used in automatically generated code and acts as a proxy to database functions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ExecuteMethodCall%2A&gt;</ph> 메서드 자동으로 생성 된 코드에 사용 되 고 데이터베이스 함수에 대 한 프록시 역할을 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to be returned.</source>
          
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The algorithm for matching columns in the result of the query to fields or properties in the object works as follows:</source>
          
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>If a field or property is mapped to a particular column name, that column name is expected in the resultset.</source>
          
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</source>
          
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The comparison is performed by looking for a case-sensitive match first.</source>
          
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>If this match is not found, a subsequent search occurs for a case-insensitive match.</source>
          
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:</source>
          
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is an entity explicitly tracked by the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source><ph id="ph1">&lt;see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The entity has a primary key.</source>
          
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>Otherwise an exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The SQL query to be executed.</source>
          
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>The array of parameters to be passed to the command.</source>
          
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>Note the following behavior:</source>
          
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>If the array contains objects that are not referenced in the command string, no exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>If a parameter is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, it is converted to <ph id="ph2">&lt;see langword="DBNull.Value" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>Executes SQL queries directly on the database.</source>
          
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> collection of objects returned by the query.</source>
          
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The type of the elements in the returned collection.</source>
          <target state="translated">반환된 된 컬렉션에 있는 요소의 형식입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The SQL query to be executed.</source>
          
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The array of parameters to be passed to the command.</source>
          
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>Note the following behavior:</source>
          
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If the array contains objects that are not referenced in the command string, no exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If a parameter is null, it is converted to <ph id="ph1">&lt;see langword="DBNull.Value" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>Executes SQL queries directly on the database and returns objects.</source>
          
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>A collection of objects returned by the query.</source>
          
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>This method is a pass-through mechanism for cases where <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not provide for a particular scenario.</source>
          <target state="translated">이 메서드는 사례에 대 한 통과 메커니즘 여기서 <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 특정 시나리오를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The algorithm for matching columns in the result of the query to fields and properties in the object works as follows:</source>
          <target state="translated">개체의 속성과 필드에 대 한 쿼리의 결과에 일치 하는 열에 대 한 알고리즘은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If a field or property is mapped to a particular column name, that column name is expected in the resultset.</source>
          <target state="translated">필드 또는 속성에 특정 열 이름에 매핑되는 경우 결과 집합에 해당 열 이름을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</source>
          <target state="translated">필드 또는 속성이 매핑되지 않은 경우 결과 집합에 열 이름이 같은 필드 또는 속성으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The comparison is performed by first looking for a case-sensitive match.</source>
          <target state="translated">비교는 대/소문자 구분 일치 하는 첫 번째 검색 하 여 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If such a match is not found, a subsequent search occurs for a case-insensitive match.</source>
          <target state="translated">일치 하는 항목이 없는 경우 대/소문자 구분 일치 하는 항목이 다시 검색 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The query must return all the tracked fields and properties of the object (apart from those subject to deferred loading) when all the following are true:</source>
          <target state="translated">쿼리는 모든 추적 된 필드 및 (되는 항목과 별도로 지연 된 로드에 따라) 개체의 속성을 반환 해야 다음 작업을 모두 충족 되는 경우:</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>If <ph id="ph1">`&lt;T&gt;`</ph> is an entity explicitly tracked by the <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`&lt;T&gt;`</ph> 엔터티 명시적으로에서 추적 되는 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>ObjectTrackingEnabled is true.</source>
          <target state="translated">ObjectTrackingEnabled 그렇습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The entity has a primary key.</source>
          <target state="translated">엔터티는 기본 키를 있습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>Otherwise an exception is thrown.</source>
          <target state="translated">그렇지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>In all other cases, the query can retrieve just a subset of the tracked fields and properties for the object.</source>
          <target state="translated">다른 모든 경우 쿼리는 추적 된 필드 및 개체에 대 한 속성의 일부만을 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>The following C# snippet shows one use for this method:</source>
          <target state="translated">다음 C# 조각은이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
          <source>In Visual Basic</source>
          <target state="translated">Visual Basic에서는</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>Gets the modified objects tracked by <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>The set of objects is returned as three read-only collections.</source>
          
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>Note the following considerations:</source>
          <target state="translated">다음 사항을 note:</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.GetChangeSet%2A&gt;</ph> might have side effects, such as inference of insert and delete operations that are usually performed at the time of <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.GetChangeSet%2A&gt;</ph> 유추의 삽입과 같은 부작용 및 삭제 작업 시 일반적으로 수행 하는 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>For example, objects that are used in the following operations can create corresponding inferred operations in the following list:</source>
          <target state="translated">예를 들어, 다음 작업에 사용 되는 개체는 다음 목록에 해당 작업이 유추를 만들 수 있습니다.:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601.Add%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Data.Linq.Table%601.InsertOnSubmit%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601.Add%2A&gt;</ph> <ph id="ph2">&lt;xref:System.Data.Linq.Table%601.InsertOnSubmit%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.EntityRef%601&gt;</ph> assignment to null (possibly because of <ph id="ph2">&lt;xref:System.Data.Linq.EntitySet%601.Remove%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.EntityRef%601&gt;</ph> null에 대 한 할당 (가능으로 인해 <ph id="ph2">&lt;xref:System.Data.Linq.EntitySet%601.Remove%2A&gt;</ph> 를 <ph id="ph3">&lt;xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>The set may not be ordered according to foreign key constraints.</source>
          <target state="translated">집합 foreign key 제약 조건에 따라 정렬 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>Database-generated values (for example, primary and foreign key values, timestamps, and so forth) are not available.</source>
          <target state="translated">데이터베이스에서 생성 된 값 (예를 들어, 기본 및 외래 키 값, 타임 스탬프 등)를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>Such information requires database command execution and perhaps the propagation of retrieved information (for example, foreign key from primary key).</source>
          <target state="translated">이러한 정보는 데이터베이스 명령 실행 하 고 검색 된 정보 (예를 들어 기본 키에서 외래 키)의 전파 아마도 필요합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>The set of changed objects is computed at the time of the call.</source>
          <target state="translated">변경 된 개체 집합이 호출 시 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> can produce a different set if additional changes are made.</source>
          <target state="translated">에 대 한 후속 호출 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 추가로 변경 내용이 있는 경우 다른 집합을 생성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetChangeSet">
          <source>Output when no changes have been made appears as follows:</source>
          <target state="translated">변경 내용을 적용 된 경우의 출력을 다음과 같이 나타납니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>The query whose SQL command information is to be retrieved.</source>
          
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>Gets the information about SQL commands generated by <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph>.</source>
          
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>The requested command information object.</source>
          
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>This method is only a getter and does not affect <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> state.</source>
          <target state="translated">이 방법은 getter에만 영향을 주지 않습니다 뛰어나며 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>Note the following considerations:</source>
          <target state="translated">다음 사항을 note:</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>The argument must be non-null.</source>
          <target state="translated">인수는 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>Otherwise, a null argument exception is thrown.</source>
          <target state="translated">그렇지 않으면 null 인수 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>Normal query translation exceptions thrown during <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> query execution apply for a query that cannot be translated.</source>
          <target state="translated">하는 동안 발생 하는 일반적인 쿼리 변환 예외 <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 쿼리 실행 변환할 수 없는 쿼리에 적용 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>Only the first query command is returned.</source>
          <target state="translated">첫 번째 쿼리 명령이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>Specifically, additional commands that are used for eager loading (<ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph>) are not included.</source>
          <target state="translated">즉시 로드에 사용 되는 추가 명령이 특히 (<ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph>)는 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> does not track what the user does with the command.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 명령을 사용 하 여 사용자가을 추적 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
          <source>For example, results from the execution of the returned command are not tracked and do not affect <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> state.</source>
          <target state="translated">반환 된 명령을 실행 한 결과 추적 되지 않으며 영향을 주지 않습니다 예를 들어 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>The type of the objects to be returned.</source>
          
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>Returns a collection of objects of a particular type, where the type is defined by the <ph id="ph1">&lt;paramref name="type" /&gt;</ph> parameter.</source>
          
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>A collection of objects defined by the <ph id="ph1">&lt;paramref name="type" /&gt;</ph> parameter.</source>
          
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>This is a weakly typed version of <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph>.</source>
          <target state="translated">이의 약한 형식의 버전 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>It is important to have a weakly typed version because it is a relatively common practice to construct queries dynamically.</source>
          <target state="translated">쿼리를 동적으로 생성 하는 상대적으로 일반적인 좋습니다 이기 때문에 약한 형식의 버전을 포함 하는 것이 유용 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>It would be inconvenient to force the application to use reflection to call the correct generic method.</source>
          <target state="translated">하기란 리플렉션을 사용 하 여 올바른 제네릭 메서드를 호출 하면 응용 프로그램을 편리 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable(System.Type)">
          <source>If there is no collection for a particular type, an exception is thrown.</source>
          <target state="translated">특정 형식에 대 한 컬렉션이 없는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>The type of the objects to be returned.</source>
          <target state="translated">반환할 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>Returns a collection of objects of a particular type, where the type is defined by the <ph id="ph1">&lt;paramref name="TEntity" /&gt;</ph> parameter.</source>
          
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>A collection of objects defined by the <ph id="ph1">&lt;paramref name="TEntity" /&gt;</ph> parameter.</source>
          
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>This method is the main entry point for querying.</source>
          <target state="translated">이 메서드는 쿼리를 위한 기본 요소입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>When a strongly typed <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is created, new generated properties encapsulate calls to this method.</source>
          <target state="translated">강력한 형식의 경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 새로 생성 된 속성은이 메서드의 호출 캡슐화 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>For example, a <ph id="ph1">`Customers`</ph> property is generated that returns <ph id="ph2">`GetTable&lt;Customer&gt;`</ph>.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">`Customers`</ph> 속성이 반환 하는 생성 된 <ph id="ph2">`GetTable&lt;Customer&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.GetTable``1">
          <source>If there is no collection for a particular type, an exception is thrown.</source>
          <target state="translated">특정 형식에 대 한 컬렉션이 없는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.LoadOptions">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataLoadOptions" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.LoadOptions">
          <source>The prefetch load options for related data.</source>
          <target state="translated">프리페치는 관련된 데이터에 대 한 옵션을 로드 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.LoadOptions">
          <source>This property gets or sets the options that are used to define prefetch behavior for deferred-loaded members and membership of related collections.</source>
          <target state="translated">이 속성에는 지연 로드 된 멤버와 관련 된 컬렉션의 멤버 자격에 대 한 사전 인출 동작을 정의 하는 데 사용 되는 옵션을 설정 하거나 가져옵니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.Log">
          <source>Gets or sets the destination to write the SQL query or command.</source>
          
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Log">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> to use for writing the command.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> 명령을 쓰는 데 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Log">
          <source>Set this property to <ph id="ph1">`null`</ph> to disable command logging.</source>
          <target state="translated">이 속성을 설정 <ph id="ph1">`null`</ph> 명령 로깅을 사용 하지 않으려면입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Log">
          <source>The following example displays generated SQL in the console window before it displays the results of the query.</source>
          <target state="translated">다음 예에서는 쿼리의 결과 표시 하기 전에 콘솔 창에 생성 된 SQL을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.Mapping">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Data.Linq.Mapping.MetaModel" /&gt;</ph> on which the mapping is based.</source>
          
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Mapping">
          <source>The mapping between a database and domain objects.</source>
          <target state="translated">데이터베이스 및 도메인 개체 간의 매핑입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>Gets or sets a value that indicates whether object tracking is enabled.</source>
          
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object tracking is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 개체 추적을 사용 하면 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>Setting this property to <ph id="ph1">`false`</ph> improves performance at retrieval time, because there are fewer items to track.</source>
          <target state="translated">이 속성을 설정 <ph id="ph1">`false`</ph> 사용 되므로 적은 추적할 항목을 검색할 때 성능이 향상 됩니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>An exception is thrown:</source>
          <target state="translated">예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>If the property is set to <ph id="ph1">`false`</ph> after a query has been executed.</source>
          <target state="translated">속성이로 설정 된 경우 <ph id="ph1">`false`</ph> 쿼리가 실행 된 후입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>For more information, see the Valid Modes section in <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
          <target state="translated">자세한 내용은 사용할 수 있는 모드 섹션을 참조 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>If the property is set to <ph id="ph1">`false`</ph> and <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.</source>
          <target state="translated">속성이로 설정 된 경우 <ph id="ph1">`false`</ph> 및 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>If <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph> is <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph> is ignored and treated as <ph id="ph4">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph> 은 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph> 은 무시 되 고로 처리 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is read-only.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>If <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A&gt;</ph> 은 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
          <source>In this case, <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> allows you to load an object graph by using <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> directives, but does not enable deferred loading.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 개체 그래프를 사용 하 여 로드할 수 있게 해 <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> 지시문 하지만 지연 된 로드를 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>Refreshes object state by using data in the database.</source>
          
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>This method is useful after an optimistic concurrency error to bring items into a state for another attempt.</source>
          <target state="translated">이 메서드는 또 다른 시도 대 한 상태 항목을 낙관적 동시성 오류가 발생 한 후 유용 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>It updates the state of the primitive fields and properties on the objects.</source>
          <target state="translated">기본 필드 및 개체에 속성의 상태를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>If an object is on the <bpt id="p1">*</bpt>many<ept id="p1">*</ept> side of a one-to-many relationship, the foreign key on the object will be set and the object pointer for the other side of the relationship will be set to the new value.</source>
          <target state="translated">개체가 있는 경우에 <bpt id="p1">*</bpt>많은<ept id="p1">*</ept> 대 다 관계 개체에서 외래 키 쪽 설정 되 고 관계의 다른 쪽에 대 한 개체 포인터를 새 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
          <source>A value that specifies how optimistic concurrency conflicts are handled.</source>
          
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
          <source>The collection of entities to be refreshed.</source>
          
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
          <source>Refreshes a collection of entity objects according to the specified mode.</source>
          
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
          <source>A value that specifies how optimistic concurrency conflicts are handled.</source>
          
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
          <source>The object to be refreshed.</source>
          
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
          <source>Refreshes an entity object according to the specified mode.</source>
          
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
          <source>A value that specifies how optimistic concurrency conflicts are handled.</source>
          
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
          <source>The array of entity objects to be refreshed.</source>
          
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
          <source>Refreshes an array of entity objects according to the specified mode.</source>
          
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</source>
          
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>If override methods are present for insert, update, or delete, <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> executes these methods instead of the default <ph id="ph2">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> commands.</source>
          <target state="translated">Insert, update 또는 delete에 대 한 재정의 메서드 없으면 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 기본값 대신 이러한 메서드를 실행 <ph id="ph2">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> starts a transaction and will roll back if an exception occurs while <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is executing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 트랜잭션을 시작 하 고 예외가 발생 하는 경우 롤백합니다 동안 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 실행 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>However, this does not roll back the changes in memory or tracked by the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>; those changes will need to be rolled back manually.</source>
          <target state="translated">그러나이 롤백되지 않습니다 변경 내용이 메모리에 또는 파일에서 추적 되는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>; 변경 내용을 수동으로 롤백해야 해야 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>You can start with a new instance of the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> if the changes in memory are to be discarded.</source>
          <target state="translated">새 인스턴스를 시작할 수는 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> 메모리에 변경이 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.SubmitChanges">
          <source>Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</source>
          
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.SubmitChanges">
          <source>If override methods are present for insert, update, or delete, <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> executes these methods instead of the default <ph id="ph2">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> commands.</source>
          <target state="translated">Insert, update 또는 delete에 대 한 재정의 메서드 없으면 <ph id="ph1">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> 기본값 대신 이러한 메서드를 실행 <ph id="ph2">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
          <source>The action to be taken if the submission fails.</source>
          
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
          <source>Valid arguments are as follows:</source>
          
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
          <source>Sends changes that were made to retrieved objects to the underlying database, and specifies the action to be taken if the submission fails.</source>
          
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
          <source>Default failure mode is <ph id="ph1">&lt;xref:System.Data.Linq.ConflictMode.FailOnFirstConflict&gt;</ph>.</source>
          <target state="translated">기본 오류 모드는 <ph id="ph1">&lt;xref:System.Data.Linq.ConflictMode.FailOnFirstConflict&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>Gets or sets a local transaction for the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> to use to access the database.</source>
          
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>The transaction object used by the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> when executing queries and commands.</source>
          <target state="translated">사용 하는 트랜잭션 개체는 <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph> 쿼리와 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>The primary scenario for this property is interoperability with relational <ph id="ph1">[!INCLUDE[vstecado](~/includes/vstecado-md.md)]</ph> code.</source>
          <target state="translated">이 속성에 대 한 기본 시나리오는 관계형와 상호 운용성 <ph id="ph1">[!INCLUDE[vstecado](~/includes/vstecado-md.md)]</ph> 코드입니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>For example, use this property when you write your own <ph id="ph1">`Create`</ph><ph id="ph2">/</ph><ph id="ph3">`Update`</ph><ph id="ph4">/</ph><ph id="ph5">`Delete`</ph> methods to set the <ph id="ph6">`Transaction`</ph> property on the ADO <ph id="ph7">`Command`</ph> object.</source>
          <target state="translated">직접 작성 하는 경우이 속성을 사용 하 여 예를 들어 <ph id="ph1">`Create`</ph> <ph id="ph2">/</ph> <ph id="ph3">`Update`</ph> <ph id="ph4">/</ph> <ph id="ph5">`Delete`</ph> 설정 하는 메서드는 <ph id="ph6">`Transaction`</ph> ADO 속성 <ph id="ph7">`Command`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>Note the following:</source>
          <target state="translated">다음 사항에 유의하십시오.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>If this property has not been explicitly set, the getter returns null.</source>
          <target state="translated">이 속성이 명시적으로 설정 되지 않은 경우 getter는 null을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>If the code is executing in a <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> context, setting this property throws an exception.</source>
          <target state="translated">코드에서 실행 되는 경우는 <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> 예외를 throw 하는 컨텍스트를이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Linq.DataContext.Transaction">
          <source>If this property is set and a new <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> is opened, an exception is thrown when a query or update is executed.</source>
          <target state="translated">이 속성이 설정 되 고 새 경우 <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> 가 열려 예외가 쿼리 또는 업데이트가 실행 될 때입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="T:System.Data.Linq.DataContext">
          <source>Converts an existing <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> to objects.</source>
          
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>Each row in the <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph> is converted to an object in the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">각 행에는 <ph id="ph1">&lt;xref:System.Data.IDataReader&gt;</ph> 개체에 변환는 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>Description: This method is used to convert an existing <ph id="ph1">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> to objects.</source>
          <target state="translated">설명:이 메서드는 기존 변환 하는 <ph id="ph1">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> 개체에 있습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source>Each row in the <ph id="ph1">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> is converted to an object in the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">각 행에는 <ph id="ph1">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> 개체에 변환는 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><bpt id="p1">**</bpt>Generic parameters:<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>제네릭 매개 변수:<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><ph id="ph1">`T`</ph>: See <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteQuery%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`T`</ph>: 참조 <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteQuery%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>매개 변수:<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><ph id="ph1">`Query`</ph>: See the description for command under <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteCommand%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Query`</ph>:에서 명령에 대 한 설명을 참조 하십시오. <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><ph id="ph1">`Parameters`</ph>: See the description for parameters under <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteCommand%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Parameters`</ph>:에서 매개 변수에 대 한 설명을 참조 하십시오. <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.ExecuteCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><bpt id="p1">**</bpt>Return type:<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>반환 형식:<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Linq.DataContext">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>: collection of objects returned by the conversion.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>: 변환에 의해 반환 되는 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> to be converted.</source>
          
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
          <source>Converts an existing <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataReader" /&gt;</ph> to objects.</source>
          
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
          <source>A list of objects returned by the conversion.</source>
          
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to be returned.</source>
          
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>The algorithm for matching columns in the result to fields and properties in the object works as follows:</source>
          
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>If a field or property is mapped to a particular column name, that column name is expected in the resultset.</source>
          
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</source>
          
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>The comparison is performed by looking for a case-sensitive match first.</source>
          
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>If this match is not found, a subsequent search is occurs for a case-insensitive match.</source>
          
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:</source>
          
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is an entity explicitly tracked by the <ph id="ph1">&lt;see cref="T:System.Data.Linq.DataContext" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source><ph id="ph1">&lt;see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>The entity has a primary key.</source>
          
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>Otherwise an exception is thrown.</source>
          
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> to be converted.</source>
          
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>Converts an existing <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataReader" /&gt;</ph> to objects.</source>
          
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
          <source>A list of objects returned by the conversion.</source>
          
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to be returned.</source>
          <target state="translated">형식에서 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.IDataReader" /&gt;</ph> to be converted.</source>
          
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
          <source>Converts an existing <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataReader" /&gt;</ph> to objects.</source>
          
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
          <source>A collection of objects returned by the conversion.</source>
          
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>